
Smart Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000133e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  0000133e  000013d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000ec  008000ec  0000145e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003356  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f5b  00000000  00000000  00004b12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bd8  00000000  00000000  00005a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000664  00000000  00000000  00007648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cd9  00000000  00000000  00007cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001dbf  00000000  00000000  00008985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__vector_1>
       8:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_2>
       c:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_3>
      10:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      14:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      18:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      1c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      20:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      24:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	59 07       	cpc	r21, r25
      56:	66 07       	cpc	r22, r22
      58:	73 07       	cpc	r23, r19
      5a:	80 07       	cpc	r24, r16
      5c:	8d 07       	cpc	r24, r29
      5e:	9a 07       	cpc	r25, r26
      60:	a7 07       	cpc	r26, r23

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ee e3       	ldi	r30, 0x3E	; 62
      76:	f3 e1       	ldi	r31, 0x13	; 19
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ac 3e       	cpi	r26, 0xEC	; 236
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	21 e0       	ldi	r18, 0x01	; 1
      86:	ac ee       	ldi	r26, 0xEC	; 236
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a0 30       	cpi	r26, 0x00	; 0
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 44 04 	call	0x888	; 0x888 <main>
      98:	0c 94 9d 09 	jmp	0x133a	; 0x133a <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <Store_Information_InEEPROM>:
#include "../HAL/LED/Led_interface.h"
#include "../HAL/Servo_Motor/Servo_Init.h"
#include "../HAL/BUZZER/BUZ_Init.h"
#include "util/delay.h"
void Store_Information_InEEPROM()
{
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	cd b7       	in	r28, 0x3d	; 61
      a6:	de b7       	in	r29, 0x3e	; 62
      a8:	6e 97       	sbiw	r28, 0x1e	; 30
      aa:	0f b6       	in	r0, 0x3f	; 63
      ac:	f8 94       	cli
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	0f be       	out	0x3f, r0	; 63
      b2:	cd bf       	out	0x3d, r28	; 61
	char name[20] = "Menna Eid";
      b4:	8a e0       	ldi	r24, 0x0A	; 10
      b6:	e0 e6       	ldi	r30, 0x60	; 96
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	de 01       	movw	r26, r28
      bc:	11 96       	adiw	r26, 0x01	; 1
      be:	01 90       	ld	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	8a 95       	dec	r24
      c4:	e1 f7       	brne	.-8      	; 0xbe <Store_Information_InEEPROM+0x1e>
      c6:	fe 01       	movw	r30, r28
      c8:	3b 96       	adiw	r30, 0x0b	; 11
      ca:	8a e0       	ldi	r24, 0x0A	; 10
      cc:	df 01       	movw	r26, r30
      ce:	1d 92       	st	X+, r1
      d0:	8a 95       	dec	r24
      d2:	e9 f7       	brne	.-6      	; 0xce <Store_Information_InEEPROM+0x2e>
	char pass[10] = "123456";
      d4:	87 e0       	ldi	r24, 0x07	; 7
      d6:	e4 e7       	ldi	r30, 0x74	; 116
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	de 01       	movw	r26, r28
      dc:	55 96       	adiw	r26, 0x15	; 21
      de:	01 90       	ld	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	8a 95       	dec	r24
      e4:	e1 f7       	brne	.-8      	; 0xde <Store_Information_InEEPROM+0x3e>
      e6:	fe 01       	movw	r30, r28
      e8:	7c 96       	adiw	r30, 0x1c	; 28
      ea:	83 e0       	ldi	r24, 0x03	; 3
      ec:	df 01       	movw	r26, r30
      ee:	1d 92       	st	X+, r1
      f0:	8a 95       	dec	r24
      f2:	e9 f7       	brne	.-6      	; 0xee <Store_Information_InEEPROM+0x4e>
	EEPROM_WriteString(name,1);
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	ce 01       	movw	r24, r28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	0e 94 8d 05 	call	0xb1a	; 0xb1a <EEPROM_WriteString>
	EEPROM_WriteString(pass,15);
      fe:	6f e0       	ldi	r22, 0x0F	; 15
     100:	ce 01       	movw	r24, r28
     102:	45 96       	adiw	r24, 0x15	; 21
     104:	0e 94 8d 05 	call	0xb1a	; 0xb1a <EEPROM_WriteString>
}
     108:	6e 96       	adiw	r28, 0x1e	; 30
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <Open_System>:
// this function send data to slave to open smart home system to the user

void Open_System()
{
	PORTB =0x10;
     11a:	80 e1       	ldi	r24, 0x10	; 16
     11c:	88 bb       	out	0x18, r24	; 24
	SPI_enuMasterInit();
     11e:	0e 94 2b 06 	call	0xc56	; 0xc56 <SPI_enuMasterInit>
	SPI_enuSelectData_Order(MSB);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	0e 94 75 06 	call	0xcea	; 0xcea <SPI_enuSelectData_Order>
	SPI_enuSelectClock_Polarity(RISING);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 34 06 	call	0xc68	; 0xc68 <SPI_enuSelectClock_Polarity>
	SPI_enuSelectClock_Phase(SAMPLE);
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	0e 94 41 06 	call	0xc82	; 0xc82 <SPI_enuSelectClock_Phase>
	SPI_enuSelectClock_Rate(SCK_64);
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	0e 94 4e 06 	call	0xc9c	; 0xc9c <SPI_enuSelectClock_Rate>
	DIO_SetPinValue(PORT_B,PIN4,LOW);
     13a:	40 e0       	ldi	r20, 0x00	; 0
     13c:	64 e0       	ldi	r22, 0x04	; 4
     13e:	82 e4       	ldi	r24, 0x42	; 66
     140:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
	SPI_enuSendChar('O'); // to open smart home
     144:	8f e4       	ldi	r24, 0x4F	; 79
     146:	0e 94 81 06 	call	0xd02	; 0xd02 <SPI_enuSendChar>
     14a:	08 95       	ret

0000014c <Compare_enu>:
}
ES_t Compare_enu(const char*data1 , const char*data2)
{
     14c:	dc 01       	movw	r26, r24
	
	uint8_t i =0;
     14e:	40 e0       	ldi	r20, 0x00	; 0
	for(;data1[i]!='\0' && data2[i]!='\0';i++)
     150:	03 c0       	rjmp	.+6      	; 0x158 <Compare_enu+0xc>
	{
		if(data1[i]!=data2[i])
     152:	95 13       	cpse	r25, r21
     154:	0f c0       	rjmp	.+30     	; 0x174 <Compare_enu+0x28>
}
ES_t Compare_enu(const char*data1 , const char*data2)
{
	
	uint8_t i =0;
	for(;data1[i]!='\0' && data2[i]!='\0';i++)
     156:	4f 5f       	subi	r20, 0xFF	; 255
     158:	24 2f       	mov	r18, r20
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	fd 01       	movw	r30, r26
     15e:	e2 0f       	add	r30, r18
     160:	f3 1f       	adc	r31, r19
     162:	90 81       	ld	r25, Z
     164:	99 23       	and	r25, r25
     166:	31 f0       	breq	.+12     	; 0x174 <Compare_enu+0x28>
     168:	fb 01       	movw	r30, r22
     16a:	e2 0f       	add	r30, r18
     16c:	f3 1f       	adc	r31, r19
     16e:	50 81       	ld	r21, Z
     170:	51 11       	cpse	r21, r1
     172:	ef cf       	rjmp	.-34     	; 0x152 <Compare_enu+0x6>
		if(data1[i]!=data2[i])
		{
			break;
		}
	}
	if(data1[i]==0 && data2[i]==0)
     174:	91 11       	cpse	r25, r1
     176:	08 c0       	rjmp	.+16     	; 0x188 <Compare_enu+0x3c>
     178:	fb 01       	movw	r30, r22
     17a:	e2 0f       	add	r30, r18
     17c:	f3 1f       	adc	r31, r19
     17e:	80 81       	ld	r24, Z
     180:	88 23       	and	r24, r24
     182:	21 f0       	breq	.+8      	; 0x18c <Compare_enu+0x40>
	{
		return ES_OK;
	}
	else
	{
		return ES_NOK;
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	08 95       	ret
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	08 95       	ret
			break;
		}
	}
	if(data1[i]==0 && data2[i]==0)
	{
		return ES_OK;
     18c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return ES_NOK;
	}
}
     18e:	08 95       	ret

00000190 <SendData_ToControl_OFLight>:
// this function receive data from user through uart protocol to control of light of rooms

void SendData_ToControl_OFLight()
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
     198:	2c 97       	sbiw	r28, 0x0c	; 12
     19a:	0f b6       	in	r0, 0x3f	; 63
     19c:	f8 94       	cli
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	cd bf       	out	0x3d, r28	; 61
		uint8_t data[12];
		SPI_enuEnableInterrupt();
     1a4:	0e 94 85 06 	call	0xd0a	; 0xd0a <SPI_enuEnableInterrupt>
		while(1)
		{
			UART_enuReceiveString(data);
     1a8:	ce 01       	movw	r24, r28
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	0e 94 e5 07 	call	0xfca	; 0xfca <UART_enuReceiveString>
			UART_enuTransimtterString("\r\n");
     1b0:	8e e7       	ldi	r24, 0x7E	; 126
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
			UART_enuTransimtterString(data);
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
			if(ES_OK==Compare_enu(data,"LedonRoom1"))
     1c0:	61 e8       	ldi	r22, 0x81	; 129
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	49 f4       	brne	.+18     	; 0x1e2 <SendData_ToControl_OFLight+0x52>
			{
				DIO_SetPinValue(PORT_B,PIN4,LOW);
     1d0:	40 e0       	ldi	r20, 0x00	; 0
     1d2:	64 e0       	ldi	r22, 0x04	; 4
     1d4:	82 e4       	ldi	r24, 0x42	; 66
     1d6:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
				SPI_enuSendChar('T'); // mean turn on led on room
     1da:	84 e5       	ldi	r24, 0x54	; 84
     1dc:	0e 94 81 06 	call	0xd02	; 0xd02 <SPI_enuSendChar>
     1e0:	e3 cf       	rjmp	.-58     	; 0x1a8 <SendData_ToControl_OFLight+0x18>
			}
			else if(ES_OK==Compare_enu(data,"LedofRoom1"))
     1e2:	6c e8       	ldi	r22, 0x8C	; 140
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	ce 01       	movw	r24, r28
     1e8:	01 96       	adiw	r24, 0x01	; 1
     1ea:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	49 f4       	brne	.+18     	; 0x204 <SendData_ToControl_OFLight+0x74>
			{
				DIO_SetPinValue(PORT_B,PIN4,LOW);
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	64 e0       	ldi	r22, 0x04	; 4
     1f6:	82 e4       	ldi	r24, 0x42	; 66
     1f8:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
				SPI_enuSendChar('F'); // mean turn off led of room1
     1fc:	86 e4       	ldi	r24, 0x46	; 70
     1fe:	0e 94 81 06 	call	0xd02	; 0xd02 <SPI_enuSendChar>
     202:	d2 cf       	rjmp	.-92     	; 0x1a8 <SendData_ToControl_OFLight+0x18>
			}
			else if(ES_OK==Compare_enu(data,"LedonRoom2"))
     204:	67 e9       	ldi	r22, 0x97	; 151
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	ce 01       	movw	r24, r28
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	49 f4       	brne	.+18     	; 0x226 <SendData_ToControl_OFLight+0x96>
			{
				DIO_SetPinValue(PORT_B,PIN4,LOW);
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	64 e0       	ldi	r22, 0x04	; 4
     218:	82 e4       	ldi	r24, 0x42	; 66
     21a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
				SPI_enuSendChar('t'); //mean turn on led of room2
     21e:	84 e7       	ldi	r24, 0x74	; 116
     220:	0e 94 81 06 	call	0xd02	; 0xd02 <SPI_enuSendChar>
     224:	c1 cf       	rjmp	.-126    	; 0x1a8 <SendData_ToControl_OFLight+0x18>
			}
			else if(ES_OK==Compare_enu(data,"LedofRoom2"))
     226:	62 ea       	ldi	r22, 0xA2	; 162
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     232:	81 30       	cpi	r24, 0x01	; 1
     234:	09 f0       	breq	.+2      	; 0x238 <SendData_ToControl_OFLight+0xa8>
     236:	b8 cf       	rjmp	.-144    	; 0x1a8 <SendData_ToControl_OFLight+0x18>
			{
				DIO_SetPinValue(PORT_B,PIN4,LOW);
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	64 e0       	ldi	r22, 0x04	; 4
     23c:	82 e4       	ldi	r24, 0x42	; 66
     23e:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
				SPI_enuSendChar('f'); //mean turn off led of room2
     242:	86 e6       	ldi	r24, 0x66	; 102
     244:	0e 94 81 06 	call	0xd02	; 0xd02 <SPI_enuSendChar>
     248:	af cf       	rjmp	.-162    	; 0x1a8 <SendData_ToControl_OFLight+0x18>

0000024a <DoorLockSystem>:
			}
			
		}
}
ES_t DoorLockSystem()
{
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	cd b7       	in	r28, 0x3d	; 61
     250:	de b7       	in	r29, 0x3e	; 62
     252:	c6 54       	subi	r28, 0x46	; 70
     254:	d1 09       	sbc	r29, r1
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
	  ES_t LocalError;
	  Store_Information_InEEPROM();
     260:	0e 94 50 00 	call	0xa0	; 0xa0 <Store_Information_InEEPROM>
	  led_init(PORT_D,PIN6);
     264:	66 e0       	ldi	r22, 0x06	; 6
     266:	84 e4       	ldi	r24, 0x44	; 68
     268:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <led_init>
	  led_init(PORT_D,PIN7);
     26c:	67 e0       	ldi	r22, 0x07	; 7
     26e:	84 e4       	ldi	r24, 0x44	; 68
     270:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <led_init>
	  Servo_Init(Timer1_Prescaler_64,MODE_15,Timer1_NON_INVERTING);
     274:	41 e0       	ldi	r20, 0x01	; 1
     276:	66 e0       	ldi	r22, 0x06	; 6
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	0e 94 24 04 	call	0x848	; 0x848 <Servo_Init>
	  LCD_enInit();
     27e:	0e 94 38 02 	call	0x470	; 0x470 <LCD_enInit>
	  char username[20];
	  char password[10];
	  char check1[20];
	  char check2[20];
	  UART_enuInit();
     282:	0e 94 c7 07 	call	0xf8e	; 0xf8e <UART_enuInit>
	  // ask user to enter username
	  LCD_enSendCommand(0x01);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_enSendCommand>
	  LCD_goto(1,1);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_goto>
	  LCD_enuDisplayString("Enter user name");
     294:	8d ea       	ldi	r24, 0xAD	; 173
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_enuDisplayString>
	  UART_enuReceiveString(username);
     29c:	ce 01       	movw	r24, r28
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	0e 94 e5 07 	call	0xfca	; 0xfca <UART_enuReceiveString>
	  UART_enuTransimtterString(username);
     2a4:	ce 01       	movw	r24, r28
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
	  UART_enuTransimtterString("\r\n");
     2ac:	8e e7       	ldi	r24, 0x7E	; 126
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
	  // ask user to enter password 
	  LCD_enSendCommand(0x01);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_enSendCommand>
	  LCD_enuDisplayString("Enter Password");
     2ba:	8d eb       	ldi	r24, 0xBD	; 189
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_enuDisplayString>
	  UART_enuReceiveString(password);
     2c2:	ce 01       	movw	r24, r28
     2c4:	45 96       	adiw	r24, 0x15	; 21
     2c6:	0e 94 e5 07 	call	0xfca	; 0xfca <UART_enuReceiveString>
	  UART_enuTransimtterString(password);
     2ca:	ce 01       	movw	r24, r28
     2cc:	45 96       	adiw	r24, 0x15	; 21
     2ce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
	  UART_enuTransimtterString("\r\n");
     2d2:	8e e7       	ldi	r24, 0x7E	; 126
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <UART_enuTransimtterString>
	  EEPROM_ReadString(check1,1);
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	ce 01       	movw	r24, r28
     2de:	4f 96       	adiw	r24, 0x1f	; 31
     2e0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROM_ReadString>
	  EEPROM_ReadString(check2,15);
     2e4:	6f e0       	ldi	r22, 0x0F	; 15
     2e6:	ce 01       	movw	r24, r28
     2e8:	c3 96       	adiw	r24, 0x33	; 51
     2ea:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <EEPROM_ReadString>
	  // check pass and user from data that is stored in epprom
	  if(ES_OK==Compare_enu(username,check1) && ES_OK==Compare_enu(password,check2))
     2ee:	be 01       	movw	r22, r28
     2f0:	61 5e       	subi	r22, 0xE1	; 225
     2f2:	7f 4f       	sbci	r23, 0xFF	; 255
     2f4:	ce 01       	movw	r24, r28
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	b1 f5       	brne	.+108    	; 0x36c <DoorLockSystem+0x122>
     300:	be 01       	movw	r22, r28
     302:	6d 5c       	subi	r22, 0xCD	; 205
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	ce 01       	movw	r24, r28
     308:	45 96       	adiw	r24, 0x15	; 21
     30a:	0e 94 a6 00 	call	0x14c	; 0x14c <Compare_enu>
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	69 f5       	brne	.+90     	; 0x36c <DoorLockSystem+0x122>
	  {
		  //yellow led will be turn on
		  led_of(PORT_D,PIN6,source);
     312:	48 e0       	ldi	r20, 0x08	; 8
     314:	66 e0       	ldi	r22, 0x06	; 6
     316:	84 e4       	ldi	r24, 0x44	; 68
     318:	0e 94 0e 04 	call	0x81c	; 0x81c <led_of>
		  led_on(PORT_D,PIN7,source);
     31c:	48 e0       	ldi	r20, 0x08	; 8
     31e:	67 e0       	ldi	r22, 0x07	; 7
     320:	84 e4       	ldi	r24, 0x44	; 68
     322:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <led_on>
		  // turn on servo motor 
		  Servo_Speed(0.2);
     326:	6d ec       	ldi	r22, 0xCD	; 205
     328:	7c ec       	ldi	r23, 0xCC	; 204
     32a:	8c e4       	ldi	r24, 0x4C	; 76
     32c:	9e e3       	ldi	r25, 0x3E	; 62
     32e:	0e 94 37 04 	call	0x86e	; 0x86e <Servo_Speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     332:	2f eb       	ldi	r18, 0xBF	; 191
     334:	87 e2       	ldi	r24, 0x27	; 39
     336:	99 e0       	ldi	r25, 0x09	; 9
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	80 40       	sbci	r24, 0x00	; 0
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	e1 f7       	brne	.-8      	; 0x338 <DoorLockSystem+0xee>
     340:	00 c0       	rjmp	.+0      	; 0x342 <DoorLockSystem+0xf8>
     342:	00 00       	nop
		  _delay_ms(3000);
		  Servo_Speed(0);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 37 04 	call	0x86e	; 0x86e <Servo_Speed>
		  LCD_enSendCommand(0x01); // clear lcd
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_enSendCommand>
		  LCD_goto(1,1);
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_goto>
		  LCD_enuDisplayString(" Smart Home ");
     35c:	8c ec       	ldi	r24, 0xCC	; 204
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_enuDisplayString>
		  Open_System();
     364:	0e 94 8d 00 	call	0x11a	; 0x11a <Open_System>
		  SendData_ToControl_OFLight();
     368:	0e 94 c8 00 	call	0x190	; 0x190 <SendData_ToControl_OFLight>
		  LocalError = ES_OK;
	  }
	  else
	  {
		 LCD_enSendCommand(0x01); // clear lcd
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_enSendCommand>
		 LCD_goto(1,1);
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <LCD_goto>
		 LCD_enuDisplayString(" Wrong Password   ");
     37a:	89 ed       	ldi	r24, 0xD9	; 217
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 b9 03 	call	0x772	; 0x772 <LCD_enuDisplayString>
     382:	8f e4       	ldi	r24, 0x4F	; 79
     384:	93 ec       	ldi	r25, 0xC3	; 195
     386:	01 97       	sbiw	r24, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <DoorLockSystem+0x13c>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <DoorLockSystem+0x142>
     38c:	00 00       	nop
		 _delay_ms(200);
		 //red led will be turn on
		 led_of(PORT_D,PIN7,source);
     38e:	48 e0       	ldi	r20, 0x08	; 8
     390:	67 e0       	ldi	r22, 0x07	; 7
     392:	84 e4       	ldi	r24, 0x44	; 68
     394:	0e 94 0e 04 	call	0x81c	; 0x81c <led_of>
		 led_on(PORT_D,PIN6,source);
     398:	48 e0       	ldi	r20, 0x08	; 8
     39a:	66 e0       	ldi	r22, 0x06	; 6
     39c:	84 e4       	ldi	r24, 0x44	; 68
     39e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <led_on>
		 LocalError = ES_NOK;
	  }
	return LocalError;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	ca 5b       	subi	r28, 0xBA	; 186
     3a6:	df 4f       	sbci	r29, 0xFF	; 255
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	08 95       	ret

000003b8 <LCD_Latch>:
		Numdigit--;
	}
	
	
	return LocalErrorstate;
}
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	84 e4       	ldi	r24, 0x44	; 68
     3c2:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	63 e0       	ldi	r22, 0x03	; 3
     3ca:	84 e4       	ldi	r24, 0x44	; 68
     3cc:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     3d0:	4c 2f       	mov	r20, r28
     3d2:	44 1f       	adc	r20, r20
     3d4:	44 27       	eor	r20, r20
     3d6:	44 1f       	adc	r20, r20
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	83 e4       	ldi	r24, 0x43	; 67
     3dc:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     3e0:	c6 fb       	bst	r28, 6
     3e2:	44 27       	eor	r20, r20
     3e4:	40 f9       	bld	r20, 0
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	83 e4       	ldi	r24, 0x43	; 67
     3ea:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     3ee:	c5 fb       	bst	r28, 5
     3f0:	44 27       	eor	r20, r20
     3f2:	40 f9       	bld	r20, 0
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	83 e4       	ldi	r24, 0x43	; 67
     3f8:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     3fc:	c4 fb       	bst	r28, 4
     3fe:	44 27       	eor	r20, r20
     400:	40 f9       	bld	r20, 0
     402:	63 e0       	ldi	r22, 0x03	; 3
     404:	83 e4       	ldi	r24, 0x43	; 67
     406:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     40a:	c3 fb       	bst	r28, 3
     40c:	44 27       	eor	r20, r20
     40e:	40 f9       	bld	r20, 0
     410:	64 e0       	ldi	r22, 0x04	; 4
     412:	83 e4       	ldi	r24, 0x43	; 67
     414:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     418:	c2 fb       	bst	r28, 2
     41a:	44 27       	eor	r20, r20
     41c:	40 f9       	bld	r20, 0
     41e:	65 e0       	ldi	r22, 0x05	; 5
     420:	83 e4       	ldi	r24, 0x43	; 67
     422:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     426:	c1 fb       	bst	r28, 1
     428:	44 27       	eor	r20, r20
     42a:	40 f9       	bld	r20, 0
     42c:	66 e0       	ldi	r22, 0x06	; 6
     42e:	83 e4       	ldi	r24, 0x43	; 67
     430:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     434:	4c 2f       	mov	r20, r28
     436:	41 70       	andi	r20, 0x01	; 1
     438:	67 e0       	ldi	r22, 0x07	; 7
     43a:	83 e4       	ldi	r24, 0x43	; 67
     43c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	84 e4       	ldi	r24, 0x44	; 68
     446:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     44a:	8f e1       	ldi	r24, 0x1F	; 31
     44c:	9e e4       	ldi	r25, 0x4E	; 78
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     454:	00 00       	nop
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	84 e4       	ldi	r24, 0x44	; 68
     45c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     460:	8f e1       	ldi	r24, 0x1F	; 31
     462:	9e e4       	ldi	r25, 0x4E	; 78
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <LCD_enInit>:
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	81 e4       	ldi	r24, 0x41	; 65
     476:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	84 e4       	ldi	r24, 0x44	; 68
     480:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	63 e0       	ldi	r22, 0x03	; 3
     488:	84 e4       	ldi	r24, 0x44	; 68
     48a:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	83 e4       	ldi	r24, 0x43	; 67
     494:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	83 e4       	ldi	r24, 0x43	; 67
     49e:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	62 e0       	ldi	r22, 0x02	; 2
     4a6:	83 e4       	ldi	r24, 0x43	; 67
     4a8:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	63 e0       	ldi	r22, 0x03	; 3
     4b0:	83 e4       	ldi	r24, 0x43	; 67
     4b2:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4b6:	2f eb       	ldi	r18, 0xBF	; 191
     4b8:	8a ed       	ldi	r24, 0xDA	; 218
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	21 50       	subi	r18, 0x01	; 1
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <LCD_enInit+0x4c>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_enInit+0x56>
     4c6:	00 00       	nop
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	83 e4       	ldi	r24, 0x43	; 67
     4ce:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4d2:	41 e0       	ldi	r20, 0x01	; 1
     4d4:	65 e0       	ldi	r22, 0x05	; 5
     4d6:	83 e4       	ldi	r24, 0x43	; 67
     4d8:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	66 e0       	ldi	r22, 0x06	; 6
     4e0:	83 e4       	ldi	r24, 0x43	; 67
     4e2:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	67 e0       	ldi	r22, 0x07	; 7
     4ea:	83 e4       	ldi	r24, 0x43	; 67
     4ec:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	62 e0       	ldi	r22, 0x02	; 2
     4f4:	84 e4       	ldi	r24, 0x44	; 68
     4f6:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	84 e4       	ldi	r24, 0x44	; 68
     500:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	83 e4       	ldi	r24, 0x43	; 67
     50a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	83 e4       	ldi	r24, 0x43	; 67
     514:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     518:	41 e0       	ldi	r20, 0x01	; 1
     51a:	62 e0       	ldi	r22, 0x02	; 2
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	63 e0       	ldi	r22, 0x03	; 3
     526:	83 e4       	ldi	r24, 0x43	; 67
     528:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	64 e0       	ldi	r22, 0x04	; 4
     530:	83 e4       	ldi	r24, 0x43	; 67
     532:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	65 e0       	ldi	r22, 0x05	; 5
     53a:	83 e4       	ldi	r24, 0x43	; 67
     53c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	66 e0       	ldi	r22, 0x06	; 6
     544:	83 e4       	ldi	r24, 0x43	; 67
     546:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	67 e0       	ldi	r22, 0x07	; 7
     54e:	83 e4       	ldi	r24, 0x43	; 67
     550:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	84 e4       	ldi	r24, 0x44	; 68
     55a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     55e:	8f e1       	ldi	r24, 0x1F	; 31
     560:	9e e4       	ldi	r25, 0x4E	; 78
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <LCD_enInit+0xf2>
     566:	00 c0       	rjmp	.+0      	; 0x568 <LCD_enInit+0xf8>
     568:	00 00       	nop
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	84 e4       	ldi	r24, 0x44	; 68
     570:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     574:	8f e1       	ldi	r24, 0x1F	; 31
     576:	9e e4       	ldi	r25, 0x4E	; 78
     578:	01 97       	sbiw	r24, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <LCD_enInit+0x108>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <LCD_enInit+0x10e>
     57e:	00 00       	nop
     580:	8f ec       	ldi	r24, 0xCF	; 207
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	f1 f7       	brne	.-4      	; 0x584 <LCD_enInit+0x114>
     588:	00 c0       	rjmp	.+0      	; 0x58a <LCD_enInit+0x11a>
     58a:	00 00       	nop
     58c:	40 e0       	ldi	r20, 0x00	; 0
     58e:	62 e0       	ldi	r22, 0x02	; 2
     590:	84 e4       	ldi	r24, 0x44	; 68
     592:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	63 e0       	ldi	r22, 0x03	; 3
     59a:	84 e4       	ldi	r24, 0x44	; 68
     59c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	83 e4       	ldi	r24, 0x43	; 67
     5a6:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5aa:	40 e0       	ldi	r20, 0x00	; 0
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	83 e4       	ldi	r24, 0x43	; 67
     5b0:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5b4:	40 e0       	ldi	r20, 0x00	; 0
     5b6:	62 e0       	ldi	r22, 0x02	; 2
     5b8:	83 e4       	ldi	r24, 0x43	; 67
     5ba:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	63 e0       	ldi	r22, 0x03	; 3
     5c2:	83 e4       	ldi	r24, 0x43	; 67
     5c4:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5c8:	41 e0       	ldi	r20, 0x01	; 1
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	83 e4       	ldi	r24, 0x43	; 67
     5ce:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	65 e0       	ldi	r22, 0x05	; 5
     5d6:	83 e4       	ldi	r24, 0x43	; 67
     5d8:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	66 e0       	ldi	r22, 0x06	; 6
     5e0:	83 e4       	ldi	r24, 0x43	; 67
     5e2:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	67 e0       	ldi	r22, 0x07	; 7
     5ea:	83 e4       	ldi	r24, 0x43	; 67
     5ec:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	63 e0       	ldi	r22, 0x03	; 3
     5f4:	84 e4       	ldi	r24, 0x44	; 68
     5f6:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     5fa:	8f e1       	ldi	r24, 0x1F	; 31
     5fc:	9e e4       	ldi	r25, 0x4E	; 78
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_enInit+0x18e>
     602:	00 c0       	rjmp	.+0      	; 0x604 <LCD_enInit+0x194>
     604:	00 00       	nop
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	84 e4       	ldi	r24, 0x44	; 68
     60c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     610:	8f e1       	ldi	r24, 0x1F	; 31
     612:	9e e4       	ldi	r25, 0x4E	; 78
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <LCD_enInit+0x1a4>
     618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_enInit+0x1aa>
     61a:	00 00       	nop
     61c:	8f ec       	ldi	r24, 0xCF	; 207
     61e:	97 e0       	ldi	r25, 0x07	; 7
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <LCD_enInit+0x1b0>
     624:	00 c0       	rjmp	.+0      	; 0x626 <LCD_enInit+0x1b6>
     626:	00 00       	nop
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	62 e0       	ldi	r22, 0x02	; 2
     62c:	84 e4       	ldi	r24, 0x44	; 68
     62e:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	63 e0       	ldi	r22, 0x03	; 3
     636:	84 e4       	ldi	r24, 0x44	; 68
     638:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	83 e4       	ldi	r24, 0x43	; 67
     642:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	83 e4       	ldi	r24, 0x43	; 67
     64c:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	62 e0       	ldi	r22, 0x02	; 2
     654:	83 e4       	ldi	r24, 0x43	; 67
     656:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	63 e0       	ldi	r22, 0x03	; 3
     65e:	83 e4       	ldi	r24, 0x43	; 67
     660:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	64 e0       	ldi	r22, 0x04	; 4
     668:	83 e4       	ldi	r24, 0x43	; 67
     66a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	83 e4       	ldi	r24, 0x43	; 67
     674:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	83 e4       	ldi	r24, 0x43	; 67
     67e:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	67 e0       	ldi	r22, 0x07	; 7
     686:	83 e4       	ldi	r24, 0x43	; 67
     688:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	63 e0       	ldi	r22, 0x03	; 3
     690:	84 e4       	ldi	r24, 0x44	; 68
     692:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     696:	8f e1       	ldi	r24, 0x1F	; 31
     698:	9e e4       	ldi	r25, 0x4E	; 78
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <LCD_enInit+0x22a>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <LCD_enInit+0x230>
     6a0:	00 00       	nop
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	63 e0       	ldi	r22, 0x03	; 3
     6a6:	84 e4       	ldi	r24, 0x44	; 68
     6a8:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6ac:	8f e1       	ldi	r24, 0x1F	; 31
     6ae:	9e e4       	ldi	r25, 0x4E	; 78
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	f1 f7       	brne	.-4      	; 0x6b0 <LCD_enInit+0x240>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <LCD_enInit+0x246>
     6b6:	00 00       	nop
     6b8:	8f e9       	ldi	r24, 0x9F	; 159
     6ba:	9f e0       	ldi	r25, 0x0F	; 15
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <LCD_enInit+0x24c>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <LCD_enInit+0x252>
     6c2:	00 00       	nop
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	84 e4       	ldi	r24, 0x44	; 68
     6ca:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	84 e4       	ldi	r24, 0x44	; 68
     6d4:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	83 e4       	ldi	r24, 0x43	; 67
     6de:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6e2:	40 e0       	ldi	r20, 0x00	; 0
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	83 e4       	ldi	r24, 0x43	; 67
     6e8:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	62 e0       	ldi	r22, 0x02	; 2
     6f0:	83 e4       	ldi	r24, 0x43	; 67
     6f2:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	83 e4       	ldi	r24, 0x43	; 67
     6fc:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	83 e4       	ldi	r24, 0x43	; 67
     706:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	83 e4       	ldi	r24, 0x43	; 67
     710:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	66 e0       	ldi	r22, 0x06	; 6
     718:	83 e4       	ldi	r24, 0x43	; 67
     71a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	67 e0       	ldi	r22, 0x07	; 7
     722:	83 e4       	ldi	r24, 0x43	; 67
     724:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	63 e0       	ldi	r22, 0x03	; 3
     72c:	84 e4       	ldi	r24, 0x44	; 68
     72e:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     732:	8f e1       	ldi	r24, 0x1F	; 31
     734:	9e e4       	ldi	r25, 0x4E	; 78
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <LCD_enInit+0x2c6>
     73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_enInit+0x2cc>
     73c:	00 00       	nop
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	63 e0       	ldi	r22, 0x03	; 3
     742:	84 e4       	ldi	r24, 0x44	; 68
     744:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     748:	8f e1       	ldi	r24, 0x1F	; 31
     74a:	9e e4       	ldi	r25, 0x4E	; 78
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	f1 f7       	brne	.-4      	; 0x74c <LCD_enInit+0x2dc>
     750:	00 c0       	rjmp	.+0      	; 0x752 <LCD_enInit+0x2e2>
     752:	00 00       	nop
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	08 95       	ret

00000758 <LCD_enDisplayChar>:
     758:	cf 93       	push	r28
     75a:	c8 2f       	mov	r28, r24
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	81 e4       	ldi	r24, 0x41	; 65
     762:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
     766:	8c 2f       	mov	r24, r28
     768:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Latch>
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <LCD_enuDisplayString>:
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	ec 01       	movw	r28, r24
     778:	03 c0       	rjmp	.+6      	; 0x780 <LCD_enuDisplayString+0xe>
     77a:	0e 94 ac 03 	call	0x758	; 0x758 <LCD_enDisplayChar>
     77e:	21 96       	adiw	r28, 0x01	; 1
     780:	88 81       	ld	r24, Y
     782:	81 11       	cpse	r24, r1
     784:	fa cf       	rjmp	.-12     	; 0x77a <LCD_enuDisplayString+0x8>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <LCD_enSendCommand>:

ES_t LCD_enSendCommand(uint8_t _u8command)
{
     78e:	cf 93       	push	r28
     790:	c8 2f       	mov	r28, r24
    ES_t LocalErrorstate= ES_OK;
	// set rs  as command
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	81 e4       	ldi	r24, 0x41	; 65
     798:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
	LCD_Latch(_u8command);
     79c:	8c 2f       	mov	r24, r28
     79e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_Latch>
	
	return LocalErrorstate;
}
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <LCD_goto>:
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
	_delay_ms(10);
}
ES_t LCD_goto(uint8_t x,uint8_t y)
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <LCD_goto+0x6>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local=ES_OK;
	uint8_t Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE , FORCE_CURSOR_START_SECOND_LINE};
     7b2:	90 e8       	ldi	r25, 0x80	; 128
     7b4:	99 83       	std	Y+1, r25	; 0x01
     7b6:	90 ec       	ldi	r25, 0xC0	; 192
     7b8:	9a 83       	std	Y+2, r25	; 0x02
	LCD_enSendCommand(Local_u8RowLocation [x-LCD_ONE]+(y-LCD_ONE));
     7ba:	e8 2f       	mov	r30, r24
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	8c 0f       	add	r24, r28
     7c6:	9d 1f       	adc	r25, r29
     7c8:	e8 0f       	add	r30, r24
     7ca:	f9 1f       	adc	r31, r25
     7cc:	80 81       	ld	r24, Z
     7ce:	86 0f       	add	r24, r22
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_enSendCommand>
	return Local;
}
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <led_init>:
#include "Led_priv.h"
#include "../../MCAL/DIO/DI0_interface.h"
//#include "Led_interface.h"
ES_t led_init(uint8_t ledport,uint8_t ledpin){
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     7e2:	9f eb       	ldi	r25, 0xBF	; 191
     7e4:	98 0f       	add	r25, r24
     7e6:	94 30       	cpi	r25, 0x04	; 4
     7e8:	28 f4       	brcc	.+10     	; 0x7f4 <led_init+0x12>
	{
		DIO_SetPinDirection(ledport,ledpin,OUT);
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
		LocalErrorstate=ES_OK;
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return LocalErrorstate;
}
     7f6:	08 95       	ret

000007f8 <led_on>:
ES_t led_on(uint8_t ledport,uint8_t ledpin,uint8_t type_connection)
{
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     7f8:	9f eb       	ldi	r25, 0xBF	; 191
     7fa:	98 0f       	add	r25, r24
     7fc:	94 30       	cpi	r25, 0x04	; 4
     7fe:	60 f4       	brcc	.+24     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	{
		if(type_connection==source)//source
     800:	48 30       	cpi	r20, 0x08	; 8
     802:	29 f4       	brne	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
     804:	41 e0       	ldi	r20, 0x01	; 1
     806:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
		}
		else
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
		}
		LocalErrorstate=ES_OK;
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 95       	ret
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		else
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
		}
		LocalErrorstate=ES_OK;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     818:	80 e0       	ldi	r24, 0x00	; 0
	}
	return LocalErrorstate;
}
     81a:	08 95       	ret

0000081c <led_of>:
ES_t led_of(uint8_t ledport,uint8_t ledpin,uint8_t type_connection)
{
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     81c:	9f eb       	ldi	r25, 0xBF	; 191
     81e:	98 0f       	add	r25, r24
     820:	94 30       	cpi	r25, 0x04	; 4
     822:	70 f4       	brcc	.+28     	; 0x840 <led_of+0x24>
	{
		if(type_connection==source)//source
     824:	48 30       	cpi	r20, 0x08	; 8
     826:	29 f4       	brne	.+10     	; 0x832 <led_of+0x16>
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret
	{
		if(type_connection==source)//source
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
		}
		else if(type_connection==sink)
     832:	49 30       	cpi	r20, 0x09	; 9
     834:	39 f4       	brne	.+14     	; 0x844 <led_of+0x28>
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	0e 94 ef 04 	call	0x9de	; 0x9de <DIO_SetPinValue>
		}
		LocalErrorstate=ES_OK;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	08 95       	ret
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
     844:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LocalErrorstate=ES_NOK;
	}
	return LocalErrorstate;
}
     846:	08 95       	ret

00000848 <Servo_Init>:
#include "../../MCAL/DIO/DI0_interface.h"
#include "../../MCAL/Timer1/Timer1_Priv.h"
#include "../../MCAL/Timer1/Timer1_Init.h"
#include "Servo_Init.h"
void Servo_Init(TIMER1_PRESCALER enupres_val,TIMER1_SELECTMODE enuMode,Timer1_CompareOutMode enu_outputcompare)
{
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	c8 2f       	mov	r28, r24
     84e:	86 2f       	mov	r24, r22
     850:	d4 2f       	mov	r29, r20
	Timer1_SelectMode(enuMode);
     852:	0e 94 4f 07 	call	0xe9e	; 0xe9e <Timer1_SelectMode>
	Timer1FastPWM_SelectOutPutCompareMatch(enu_outputcompare);
     856:	8d 2f       	mov	r24, r29
     858:	0e 94 b4 07 	call	0xf68	; 0xf68 <Timer1FastPWM_SelectOutPutCompareMatch>
	Timer1_SelectPrescaler(enupres_val);
     85c:	8c 2f       	mov	r24, r28
     85e:	0e 94 d2 06 	call	0xda4	; 0xda4 <Timer1_SelectPrescaler>
	Timer1_FrequancyValue(50);
     862:	82 e3       	ldi	r24, 0x32	; 50
     864:	0e 94 89 06 	call	0xd12	; 0xd12 <Timer1_FrequancyValue>
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <Servo_Speed>:

void Servo_Speed(f32 f32duty)
{
	Timer1_Fast_PWM(f32duty);
     86e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Timer1_Fast_PWM>
	DIO_SetPinDirection(PORT_D,PIN4,OUT);
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	64 e0       	ldi	r22, 0x04	; 4
     876:	84 e4       	ldi	r24, 0x44	; 68
     878:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
	DIO_SetPinDirection(PORT_D,PIN5,OUT);
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	65 e0       	ldi	r22, 0x05	; 5
     880:	84 e4       	ldi	r24, 0x44	; 68
     882:	0e 94 56 04 	call	0x8ac	; 0x8ac <DIO_SetPinDirection>
     886:	08 95       	ret

00000888 <main>:
#include "MCAL/DIO/DI0_interface.h"
#include "MCAL/Timer1/Timer1_Priv.h"
#include "MCAL/Timer1/Timer1_Init.h"
#include "HAL/Servo_Motor/Servo_Init.h"
int main(void)
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
  
   int i =3;
     88c:	c3 e0       	ldi	r28, 0x03	; 3
     88e:	d0 e0       	ldi	r29, 0x00	; 0
   while(i>0)
     890:	05 c0       	rjmp	.+10     	; 0x89c <main+0x14>
   {
	   if(ES_OK==DoorLockSystem())
     892:	0e 94 25 01 	call	0x24a	; 0x24a <DoorLockSystem>
     896:	01 97       	sbiw	r24, 0x01	; 1
     898:	21 f0       	breq	.+8      	; 0x8a2 <main+0x1a>
	   {
			break;	   
	   }
	   else
	   {
			i--;
     89a:	21 97       	sbiw	r28, 0x01	; 1
#include "HAL/Servo_Motor/Servo_Init.h"
int main(void)
{
  
   int i =3;
   while(i>0)
     89c:	1c 16       	cp	r1, r28
     89e:	1d 06       	cpc	r1, r29
     8a0:	c4 f3       	brlt	.-16     	; 0x892 <main+0xa>
	   {
			i--;
	   }
   }
 
}
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <DIO_SetPinDirection>:
	return Local_enErrorstate;
}
ES_t DIO_SetPinDirection(uint8_t portnumber,uint8_t pinnumber,uint8_t direction)
{
	ES_t Local_Errorstate;
	if(portnumber>='A' && portnumber<='D' && direction<=OUT)
     8ac:	9f eb       	ldi	r25, 0xBF	; 191
     8ae:	98 0f       	add	r25, r24
     8b0:	94 30       	cpi	r25, 0x04	; 4
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <DIO_SetPinDirection+0xa>
     8b4:	86 c0       	rjmp	.+268    	; 0x9c2 <DIO_SetPinDirection+0x116>
     8b6:	42 30       	cpi	r20, 0x02	; 2
     8b8:	08 f0       	brcs	.+2      	; 0x8bc <DIO_SetPinDirection+0x10>
     8ba:	85 c0       	rjmp	.+266    	; 0x9c6 <DIO_SetPinDirection+0x11a>
	{
	 switch(portnumber)
     8bc:	82 34       	cpi	r24, 0x42	; 66
     8be:	49 f1       	breq	.+82     	; 0x912 <DIO_SetPinDirection+0x66>
     8c0:	18 f4       	brcc	.+6      	; 0x8c8 <DIO_SetPinDirection+0x1c>
     8c2:	81 34       	cpi	r24, 0x41	; 65
     8c4:	41 f0       	breq	.+16     	; 0x8d6 <DIO_SetPinDirection+0x2a>
     8c6:	81 c0       	rjmp	.+258    	; 0x9ca <DIO_SetPinDirection+0x11e>
     8c8:	83 34       	cpi	r24, 0x43	; 67
     8ca:	09 f4       	brne	.+2      	; 0x8ce <DIO_SetPinDirection+0x22>
     8cc:	40 c0       	rjmp	.+128    	; 0x94e <DIO_SetPinDirection+0xa2>
     8ce:	84 34       	cpi	r24, 0x44	; 68
     8d0:	09 f4       	brne	.+2      	; 0x8d4 <DIO_SetPinDirection+0x28>
     8d2:	5a c0       	rjmp	.+180    	; 0x988 <DIO_SetPinDirection+0xdc>
     8d4:	7a c0       	rjmp	.+244    	; 0x9ca <DIO_SetPinDirection+0x11e>
	 {
		case PORT_A:
		    if(direction==IN)
     8d6:	41 11       	cpse	r20, r1
     8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <DIO_SetPinDirection+0x48>
			{
				DDRA &= ~(1<<pinnumber);
     8da:	2a b3       	in	r18, 0x1a	; 26
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <DIO_SetPinDirection+0x3a>
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	6a 95       	dec	r22
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <DIO_SetPinDirection+0x36>
     8ea:	80 95       	com	r24
     8ec:	82 23       	and	r24, r18
     8ee:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	08 95       	ret
		case PORT_A:
		    if(direction==IN)
			{
				DDRA &= ~(1<<pinnumber);
			}
			else if(direction==OUT)
     8f4:	41 30       	cpi	r20, 0x01	; 1
     8f6:	09 f0       	breq	.+2      	; 0x8fa <DIO_SetPinDirection+0x4e>
     8f8:	6a c0       	rjmp	.+212    	; 0x9ce <DIO_SetPinDirection+0x122>
			{
				DDRA |=(1<<pinnumber);
     8fa:	2a b3       	in	r18, 0x1a	; 26
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_SetPinDirection+0x5a>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	6a 95       	dec	r22
     908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_SetPinDirection+0x56>
     90a:	82 2b       	or	r24, r18
     90c:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	08 95       	ret
			{
				DDRA |=(1<<pinnumber);
			}
		break;
		case PORT_B:
		    if(direction==IN)
     912:	41 11       	cpse	r20, r1
     914:	0d c0       	rjmp	.+26     	; 0x930 <DIO_SetPinDirection+0x84>
		    {
			    DDRB &= ~(1<<pinnumber);
     916:	27 b3       	in	r18, 0x17	; 23
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_SetPinDirection+0x76>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_SetPinDirection+0x72>
     926:	80 95       	com	r24
     928:	82 23       	and	r24, r18
     92a:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	08 95       	ret
		case PORT_B:
		    if(direction==IN)
		    {
			    DDRB &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     930:	41 30       	cpi	r20, 0x01	; 1
     932:	09 f0       	breq	.+2      	; 0x936 <DIO_SetPinDirection+0x8a>
     934:	4e c0       	rjmp	.+156    	; 0x9d2 <DIO_SetPinDirection+0x126>
		    {
			    DDRB |=(1<<pinnumber);
     936:	27 b3       	in	r18, 0x17	; 23
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_SetPinDirection+0x96>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	6a 95       	dec	r22
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_SetPinDirection+0x92>
     946:	82 2b       	or	r24, r18
     948:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	08 95       	ret
		    {
			    DDRB |=(1<<pinnumber);
		    }
		break;
		case PORT_C:
		    if(direction==IN)
     94e:	41 11       	cpse	r20, r1
     950:	0d c0       	rjmp	.+26     	; 0x96c <DIO_SetPinDirection+0xc0>
		    {
			    DDRC &= ~(1<<pinnumber);
     952:	24 b3       	in	r18, 0x14	; 20
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_SetPinDirection+0xb2>
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	6a 95       	dec	r22
     960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_SetPinDirection+0xae>
     962:	80 95       	com	r24
     964:	82 23       	and	r24, r18
     966:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	08 95       	ret
		case PORT_C:
		    if(direction==IN)
		    {
			    DDRC &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     96c:	41 30       	cpi	r20, 0x01	; 1
     96e:	99 f5       	brne	.+102    	; 0x9d6 <DIO_SetPinDirection+0x12a>
		    {
			    DDRC |=(1<<pinnumber);
     970:	24 b3       	in	r18, 0x14	; 20
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	02 c0       	rjmp	.+4      	; 0x97c <DIO_SetPinDirection+0xd0>
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	6a 95       	dec	r22
     97e:	e2 f7       	brpl	.-8      	; 0x978 <DIO_SetPinDirection+0xcc>
     980:	82 2b       	or	r24, r18
     982:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	08 95       	ret
		    {
			    DDRC |=(1<<pinnumber);
		    }
		break;
		case PORT_D:
		    if(direction==IN)
     988:	41 11       	cpse	r20, r1
     98a:	0d c0       	rjmp	.+26     	; 0x9a6 <DIO_SetPinDirection+0xfa>
		    {
			    DDRD &= ~(1<<pinnumber);
     98c:	21 b3       	in	r18, 0x11	; 17
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_SetPinDirection+0xec>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_SetPinDirection+0xe8>
     99c:	80 95       	com	r24
     99e:	82 23       	and	r24, r18
     9a0:	81 bb       	out	0x11, r24	; 17
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	08 95       	ret
		case PORT_D:
		    if(direction==IN)
		    {
			    DDRD &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     9a6:	41 30       	cpi	r20, 0x01	; 1
     9a8:	c1 f4       	brne	.+48     	; 0x9da <DIO_SetPinDirection+0x12e>
		    {
			    DDRD |=(1<<pinnumber);
     9aa:	21 b3       	in	r18, 0x11	; 17
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <DIO_SetPinDirection+0x10a>
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	6a 95       	dec	r22
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <DIO_SetPinDirection+0x106>
     9ba:	82 2b       	or	r24, r18
     9bc:	81 bb       	out	0x11, r24	; 17
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	08 95       	ret
  }
  else
  {
	  Local_Errorstate = ES_NOK;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	08 95       	ret
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	08 95       	ret
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	08 95       	ret
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	08 95       	ret
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret
     9da:	81 e0       	ldi	r24, 0x01	; 1
  else
  {
	  Local_Errorstate = ES_NOK;
  }
  return Local_Errorstate;
}
     9dc:	08 95       	ret

000009de <DIO_SetPinValue>:
ES_t DIO_SetPinValue(uint8_t portnumber,uint8_t pinnumber,uint8_t value)
{
	ES_t Local_Errorstate;
    if(portnumber>='A' && portnumber<='D' && value<=OUT)
     9de:	9f eb       	ldi	r25, 0xBF	; 191
     9e0:	98 0f       	add	r25, r24
     9e2:	94 30       	cpi	r25, 0x04	; 4
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <DIO_SetPinValue+0xa>
     9e6:	6b c0       	rjmp	.+214    	; 0xabe <DIO_SetPinValue+0xe0>
     9e8:	42 30       	cpi	r20, 0x02	; 2
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <DIO_SetPinValue+0x10>
     9ec:	6a c0       	rjmp	.+212    	; 0xac2 <DIO_SetPinValue+0xe4>
    {
		switch(portnumber)
     9ee:	82 34       	cpi	r24, 0x42	; 66
     9f0:	09 f1       	breq	.+66     	; 0xa34 <DIO_SetPinValue+0x56>
     9f2:	18 f4       	brcc	.+6      	; 0x9fa <DIO_SetPinValue+0x1c>
     9f4:	81 34       	cpi	r24, 0x41	; 65
     9f6:	39 f0       	breq	.+14     	; 0xa06 <DIO_SetPinValue+0x28>
     9f8:	66 c0       	rjmp	.+204    	; 0xac6 <DIO_SetPinValue+0xe8>
     9fa:	83 34       	cpi	r24, 0x43	; 67
     9fc:	91 f1       	breq	.+100    	; 0xa62 <DIO_SetPinValue+0x84>
     9fe:	84 34       	cpi	r24, 0x44	; 68
     a00:	09 f4       	brne	.+2      	; 0xa04 <DIO_SetPinValue+0x26>
     a02:	46 c0       	rjmp	.+140    	; 0xa90 <DIO_SetPinValue+0xb2>
     a04:	60 c0       	rjmp	.+192    	; 0xac6 <DIO_SetPinValue+0xe8>
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
     a06:	2b b3       	in	r18, 0x1b	; 27
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	06 2e       	mov	r0, r22
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <DIO_SetPinValue+0x36>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	0a 94       	dec	r0
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <DIO_SetPinValue+0x32>
     a18:	80 95       	com	r24
     a1a:	82 23       	and	r24, r18
     a1c:	8b bb       	out	0x1b, r24	; 27
				PORTA |=(value<<pinnumber);	
     a1e:	8b b3       	in	r24, 0x1b	; 27
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_SetPinValue+0x4a>
     a24:	44 0f       	add	r20, r20
     a26:	55 1f       	adc	r21, r21
     a28:	6a 95       	dec	r22
     a2a:	e2 f7       	brpl	.-8      	; 0xa24 <DIO_SetPinValue+0x46>
     a2c:	48 2b       	or	r20, r24
     a2e:	4b bb       	out	0x1b, r20	; 27
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     a30:	81 e0       	ldi	r24, 0x01	; 1
		switch(portnumber)
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
				PORTA |=(value<<pinnumber);	
			    break;
     a32:	08 95       	ret
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
     a34:	28 b3       	in	r18, 0x18	; 24
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	06 2e       	mov	r0, r22
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <DIO_SetPinValue+0x64>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	0a 94       	dec	r0
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <DIO_SetPinValue+0x60>
     a46:	80 95       	com	r24
     a48:	82 23       	and	r24, r18
     a4a:	88 bb       	out	0x18, r24	; 24
				PORTB |=(value<<pinnumber);
     a4c:	88 b3       	in	r24, 0x18	; 24
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_SetPinValue+0x78>
     a52:	44 0f       	add	r20, r20
     a54:	55 1f       	adc	r21, r21
     a56:	6a 95       	dec	r22
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_SetPinValue+0x74>
     a5a:	48 2b       	or	r20, r24
     a5c:	48 bb       	out	0x18, r20	; 24
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
				PORTA |=(value<<pinnumber);	
			    break;
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
				PORTB |=(value<<pinnumber);
				break;
     a60:	08 95       	ret
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
     a62:	25 b3       	in	r18, 0x15	; 21
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	06 2e       	mov	r0, r22
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_SetPinValue+0x92>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	0a 94       	dec	r0
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_SetPinValue+0x8e>
     a74:	80 95       	com	r24
     a76:	82 23       	and	r24, r18
     a78:	85 bb       	out	0x15, r24	; 21
				PORTC |=(value<<pinnumber);
     a7a:	85 b3       	in	r24, 0x15	; 21
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <DIO_SetPinValue+0xa6>
     a80:	44 0f       	add	r20, r20
     a82:	55 1f       	adc	r21, r21
     a84:	6a 95       	dec	r22
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <DIO_SetPinValue+0xa2>
     a88:	48 2b       	or	r20, r24
     a8a:	45 bb       	out	0x15, r20	; 21
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
				PORTB |=(value<<pinnumber);
				break;
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
				PORTC |=(value<<pinnumber);
				break;
     a8e:	08 95       	ret
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
     a90:	22 b3       	in	r18, 0x12	; 18
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	06 2e       	mov	r0, r22
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_SetPinValue+0xc0>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_SetPinValue+0xbc>
     aa2:	80 95       	com	r24
     aa4:	82 23       	and	r24, r18
     aa6:	82 bb       	out	0x12, r24	; 18
				PORTD |=(value<<pinnumber);
     aa8:	82 b3       	in	r24, 0x12	; 18
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_SetPinValue+0xd4>
     aae:	44 0f       	add	r20, r20
     ab0:	55 1f       	adc	r21, r21
     ab2:	6a 95       	dec	r22
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_SetPinValue+0xd0>
     ab6:	48 2b       	or	r20, r24
     ab8:	42 bb       	out	0x12, r20	; 18
				break;
			
		}
		Local_Errorstate =ES_OK;
     aba:	81 e0       	ldi	r24, 0x01	; 1
				PORTC |=(value<<pinnumber);
				break;
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
     abc:	08 95       	ret
		}
		Local_Errorstate =ES_OK;
	}
   else
   {
	 Local_Errorstate= ES_NOK;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 95       	ret
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
	 Local_Errorstate= ES_NOK;
   }
  return Local_Errorstate;
}
     ac8:	08 95       	ret

00000aca <EEPROM_WriteChar>:
	EECR |= (1<<EERIE);
}

void EEPROM_WriteChar(uint8_t Copy_u8Data ,uint8_t Copy_u8Address)
{
	while(((EECR>>EEWE)&1)==1);
     aca:	e1 99       	sbic	0x1c, 1	; 28
     acc:	fe cf       	rjmp	.-4      	; 0xaca <EEPROM_WriteChar>
	EEARL = Copy_u8Address;
     ace:	6e bb       	out	0x1e, r22	; 30
	EEDR = Copy_u8Data;
     ad0:	8d bb       	out	0x1d, r24	; 29
	EECR |= (1<<EEMWE);
     ad2:	8c b3       	in	r24, 0x1c	; 28
     ad4:	84 60       	ori	r24, 0x04	; 4
     ad6:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
     ad8:	8c b3       	in	r24, 0x1c	; 28
     ada:	82 60       	ori	r24, 0x02	; 2
     adc:	8c bb       	out	0x1c, r24	; 28
     ade:	08 95       	ret

00000ae0 <EEPROM_ReadChar>:
}

void EEPROM_ReadChar(uint8_t *Copy_u8Data,uint8_t Copy_u8Address)
{
     ae0:	fc 01       	movw	r30, r24
	while(((EECR>>EEWE)&1)==1);
     ae2:	e1 99       	sbic	0x1c, 1	; 28
     ae4:	fe cf       	rjmp	.-4      	; 0xae2 <EEPROM_ReadChar+0x2>
	EEARL = Copy_u8Address;
     ae6:	6e bb       	out	0x1e, r22	; 30
	EECR |= (1<<EERE);
     ae8:	9c b3       	in	r25, 0x1c	; 28
     aea:	91 60       	ori	r25, 0x01	; 1
     aec:	9c bb       	out	0x1c, r25	; 28
	*Copy_u8Data = EEDR;
     aee:	8d b3       	in	r24, 0x1d	; 29
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <EEPROM_ReadString>:
}
void EEPROM_ReadString(uint8_t *Copy_u8Data,uint8_t Copy_u8Address)
{
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	16 2f       	mov	r17, r22
   while(1)
   {
	    EEPROM_ReadChar(Copy_u8Data,Copy_u8Address);
     afe:	61 2f       	mov	r22, r17
     b00:	ce 01       	movw	r24, r28
     b02:	0e 94 70 05 	call	0xae0	; 0xae0 <EEPROM_ReadChar>
	    if(*Copy_u8Data!='\0')
     b06:	88 81       	ld	r24, Y
     b08:	88 23       	and	r24, r24
     b0a:	19 f0       	breq	.+6      	; 0xb12 <EEPROM_ReadString+0x1e>
		{
			Copy_u8Data++;
     b0c:	21 96       	adiw	r28, 0x01	; 1
			Copy_u8Address++;
     b0e:	1f 5f       	subi	r17, 0xFF	; 255
		{
			break;
	
		}
	  
   }
     b10:	f6 cf       	rjmp	.-20     	; 0xafe <EEPROM_ReadString+0xa>
   
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <EEPROM_WriteString>:

void EEPROM_WriteString(uint8_t*Copy_u8Data ,uint8_t Copy_u8Address)
{
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	cf 93       	push	r28
     b20:	8c 01       	movw	r16, r24
     b22:	c6 2f       	mov	r28, r22
	while(*Copy_u8Data!='\0')
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <EEPROM_WriteString+0x18>
	{
		EEPROM_WriteChar(*Copy_u8Data,Copy_u8Address);
     b26:	6c 2f       	mov	r22, r28
     b28:	0e 94 65 05 	call	0xaca	; 0xaca <EEPROM_WriteChar>
		Copy_u8Data++;
     b2c:	0f 5f       	subi	r16, 0xFF	; 255
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
		Copy_u8Address++;
     b30:	cf 5f       	subi	r28, 0xFF	; 255
   
}

void EEPROM_WriteString(uint8_t*Copy_u8Data ,uint8_t Copy_u8Address)
{
	while(*Copy_u8Data!='\0')
     b32:	f8 01       	movw	r30, r16
     b34:	80 81       	ld	r24, Z
     b36:	81 11       	cpse	r24, r1
     b38:	f6 cf       	rjmp	.-20     	; 0xb26 <EEPROM_WriteString+0xc>
	{
		EEPROM_WriteChar(*Copy_u8Data,Copy_u8Address);
		Copy_u8Data++;
		Copy_u8Address++;
	}
	EEPROM_WriteChar('\0',Copy_u8Address);
     b3a:	6c 2f       	mov	r22, r28
     b3c:	0e 94 65 05 	call	0xaca	; 0xaca <EEPROM_WriteChar>
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <__vector_1>:
		break;
	}
}

ISR(INT0_vect)
{
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
	if(INT0_PTR!=NULLPTR)
     b6a:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <INT0_PTR>
     b6e:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <INT0_PTR+0x1>
     b72:	30 97       	sbiw	r30, 0x00	; 0
     b74:	29 f0       	breq	.+10     	; 0xb80 <__vector_1+0x38>
	{
		INT0_PTR(EXI_pvoidGenricprameter[0]);
     b76:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__data_end>
     b7a:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <__data_end+0x1>
     b7e:	09 95       	icall
	}
	
}
     b80:	ff 91       	pop	r31
     b82:	ef 91       	pop	r30
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_2>:
ISR(INT1_vect)
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	2f 93       	push	r18
     bae:	3f 93       	push	r19
     bb0:	4f 93       	push	r20
     bb2:	5f 93       	push	r21
     bb4:	6f 93       	push	r22
     bb6:	7f 93       	push	r23
     bb8:	8f 93       	push	r24
     bba:	9f 93       	push	r25
     bbc:	af 93       	push	r26
     bbe:	bf 93       	push	r27
     bc0:	ef 93       	push	r30
     bc2:	ff 93       	push	r31
	if(INT1_PTR!=NULLPTR)
     bc4:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <INT1_PTR>
     bc8:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <INT1_PTR+0x1>
     bcc:	30 97       	sbiw	r30, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <__vector_2+0x38>
	{
		INT1_PTR(EXI_pvoidGenricprameter[1]);
     bd0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__data_end+0x2>
     bd4:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__data_end+0x3>
     bd8:	09 95       	icall
	}
	
}
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <__vector_3>:

ISR(INT2_vect)
{
     bfc:	1f 92       	push	r1
     bfe:	0f 92       	push	r0
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	0f 92       	push	r0
     c04:	11 24       	eor	r1, r1
     c06:	2f 93       	push	r18
     c08:	3f 93       	push	r19
     c0a:	4f 93       	push	r20
     c0c:	5f 93       	push	r21
     c0e:	6f 93       	push	r22
     c10:	7f 93       	push	r23
     c12:	8f 93       	push	r24
     c14:	9f 93       	push	r25
     c16:	af 93       	push	r26
     c18:	bf 93       	push	r27
     c1a:	ef 93       	push	r30
     c1c:	ff 93       	push	r31
	if(INT2_PTR!=NULLPTR)
     c1e:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <INT2_PTR>
     c22:	f0 91 f3 00 	lds	r31, 0x00F3	; 0x8000f3 <INT2_PTR+0x1>
     c26:	30 97       	sbiw	r30, 0x00	; 0
     c28:	29 f0       	breq	.+10     	; 0xc34 <__vector_3+0x38>
	{
		INT2_PTR(EXI_pvoidGenricprameter[2]);
     c2a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__data_end+0x4>
     c2e:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__data_end+0x5>
     c32:	09 95       	icall
	}
	
}
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	0f 90       	pop	r0
     c52:	1f 90       	pop	r1
     c54:	18 95       	reti

00000c56 <SPI_enuMasterInit>:
	while(!((SPSR>>SPIF)&1));
}
void SPI_enuReceiveChar(uint8_t*u8ptrdata)
{
	while(!((SPSR>>SPIF)&1));
	*u8ptrdata = SPDR;
     c56:	80 eb       	ldi	r24, 0xB0	; 176
     c58:	87 bb       	out	0x17, r24	; 23
     c5a:	8d b1       	in	r24, 0x0d	; 13
     c5c:	80 64       	ori	r24, 0x40	; 64
     c5e:	8d b9       	out	0x0d, r24	; 13
     c60:	8d b1       	in	r24, 0x0d	; 13
     c62:	80 61       	ori	r24, 0x10	; 16
     c64:	8d b9       	out	0x0d, r24	; 13
     c66:	08 95       	ret

00000c68 <SPI_enuSelectClock_Polarity>:
     c68:	88 23       	and	r24, r24
     c6a:	19 f0       	breq	.+6      	; 0xc72 <SPI_enuSelectClock_Polarity+0xa>
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	29 f0       	breq	.+10     	; 0xc7a <SPI_enuSelectClock_Polarity+0x12>
     c70:	08 95       	ret
     c72:	8d b1       	in	r24, 0x0d	; 13
     c74:	87 7f       	andi	r24, 0xF7	; 247
     c76:	8d b9       	out	0x0d, r24	; 13
     c78:	08 95       	ret
     c7a:	8d b1       	in	r24, 0x0d	; 13
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	8d b9       	out	0x0d, r24	; 13
     c80:	08 95       	ret

00000c82 <SPI_enuSelectClock_Phase>:
     c82:	88 23       	and	r24, r24
     c84:	19 f0       	breq	.+6      	; 0xc8c <SPI_enuSelectClock_Phase+0xa>
     c86:	81 30       	cpi	r24, 0x01	; 1
     c88:	29 f0       	breq	.+10     	; 0xc94 <SPI_enuSelectClock_Phase+0x12>
     c8a:	08 95       	ret
     c8c:	8d b1       	in	r24, 0x0d	; 13
     c8e:	8b 7f       	andi	r24, 0xFB	; 251
     c90:	8d b9       	out	0x0d, r24	; 13
     c92:	08 95       	ret
     c94:	8d b1       	in	r24, 0x0d	; 13
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8d b9       	out	0x0d, r24	; 13
     c9a:	08 95       	ret

00000c9c <SPI_enuSelectClock_Rate>:
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	69 f0       	breq	.+26     	; 0xcba <SPI_enuSelectClock_Rate+0x1e>
     ca0:	28 f0       	brcs	.+10     	; 0xcac <SPI_enuSelectClock_Rate+0x10>
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	89 f0       	breq	.+34     	; 0xcc8 <SPI_enuSelectClock_Rate+0x2c>
     ca6:	83 30       	cpi	r24, 0x03	; 3
     ca8:	b1 f0       	breq	.+44     	; 0xcd6 <SPI_enuSelectClock_Rate+0x3a>
     caa:	1b c0       	rjmp	.+54     	; 0xce2 <SPI_enuSelectClock_Rate+0x46>
     cac:	8d b1       	in	r24, 0x0d	; 13
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	8d b9       	out	0x0d, r24	; 13
     cb2:	8d b1       	in	r24, 0x0d	; 13
     cb4:	8d 7f       	andi	r24, 0xFD	; 253
     cb6:	8d b9       	out	0x0d, r24	; 13
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <SPI_enuSelectClock_Rate+0x46>
     cba:	8d b1       	in	r24, 0x0d	; 13
     cbc:	81 60       	ori	r24, 0x01	; 1
     cbe:	8d b9       	out	0x0d, r24	; 13
     cc0:	8d b1       	in	r24, 0x0d	; 13
     cc2:	8d 7f       	andi	r24, 0xFD	; 253
     cc4:	8d b9       	out	0x0d, r24	; 13
     cc6:	0d c0       	rjmp	.+26     	; 0xce2 <SPI_enuSelectClock_Rate+0x46>
     cc8:	8d b1       	in	r24, 0x0d	; 13
     cca:	8e 7f       	andi	r24, 0xFE	; 254
     ccc:	8d b9       	out	0x0d, r24	; 13
     cce:	8d b1       	in	r24, 0x0d	; 13
     cd0:	82 60       	ori	r24, 0x02	; 2
     cd2:	8d b9       	out	0x0d, r24	; 13
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <SPI_enuSelectClock_Rate+0x46>
     cd6:	8d b1       	in	r24, 0x0d	; 13
     cd8:	81 60       	ori	r24, 0x01	; 1
     cda:	8d b9       	out	0x0d, r24	; 13
     cdc:	8d b1       	in	r24, 0x0d	; 13
     cde:	82 60       	ori	r24, 0x02	; 2
     ce0:	8d b9       	out	0x0d, r24	; 13
     ce2:	8e b1       	in	r24, 0x0e	; 14
     ce4:	8e 7f       	andi	r24, 0xFE	; 254
     ce6:	8e b9       	out	0x0e, r24	; 14
     ce8:	08 95       	ret

00000cea <SPI_enuSelectData_Order>:
     cea:	81 11       	cpse	r24, r1
     cec:	04 c0       	rjmp	.+8      	; 0xcf6 <SPI_enuSelectData_Order+0xc>
     cee:	8d b1       	in	r24, 0x0d	; 13
     cf0:	80 62       	ori	r24, 0x20	; 32
     cf2:	8d b9       	out	0x0d, r24	; 13
     cf4:	08 95       	ret
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	19 f4       	brne	.+6      	; 0xd00 <SPI_enuSelectData_Order+0x16>
     cfa:	8d b1       	in	r24, 0x0d	; 13
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	8d b9       	out	0x0d, r24	; 13
     d00:	08 95       	ret

00000d02 <SPI_enuSendChar>:
     d02:	8f b9       	out	0x0f, r24	; 15
     d04:	77 9b       	sbis	0x0e, 7	; 14
     d06:	fe cf       	rjmp	.-4      	; 0xd04 <SPI_enuSendChar+0x2>
     d08:	08 95       	ret

00000d0a <SPI_enuEnableInterrupt>:
}
void SPI_enuEnableInterrupt()
{
	SPCR |= (1<<SPIE);
     d0a:	8d b1       	in	r24, 0x0d	; 13
     d0c:	80 68       	ori	r24, 0x80	; 128
     d0e:	8d b9       	out	0x0d, r24	; 13
     d10:	08 95       	ret

00000d12 <Timer1_FrequancyValue>:
	Timer1_FastPWM_CalC_OCRX(f32duty_Value);
	
}
void Timer1_FrequancyValue(uint8_t u8Frequancy_value)
{
	 f32 Time = ((f32)1/u8Frequancy_value);
     d12:	68 2f       	mov	r22, r24
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 9e 08 	call	0x113c	; 0x113c <__floatsisf>
     d1e:	9b 01       	movw	r18, r22
     d20:	ac 01       	movw	r20, r24
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	80 e8       	ldi	r24, 0x80	; 128
     d28:	9f e3       	ldi	r25, 0x3F	; 63
     d2a:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3>
	 counts = Time / Time_sys;
     d2e:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <Time_sys>
     d32:	30 91 f9 00 	lds	r19, 0x00F9	; 0x8000f9 <Time_sys+0x1>
     d36:	40 91 fa 00 	lds	r20, 0x00FA	; 0x8000fa <Time_sys+0x2>
     d3a:	50 91 fb 00 	lds	r21, 0x00FB	; 0x8000fb <Time_sys+0x3>
     d3e:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3>
     d42:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     d46:	60 93 fe 00 	sts	0x00FE, r22	; 0x8000fe <counts>
     d4a:	70 93 ff 00 	sts	0x00FF, r23	; 0x8000ff <counts+0x1>
	 OCR1AH = ((counts & 0xFF00)>>8);
     d4e:	7b bd       	out	0x2b, r23	; 43
	 OCR1AL = counts;
     d50:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <counts>
     d54:	8a bd       	out	0x2a, r24	; 42
     d56:	08 95       	ret

00000d58 <Timer1_FastPWM_CalC_OCRX>:
}
void Timer1_FastPWM_CalC_OCRX(f32 f32duty_Value)
{
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	6b 01       	movw	r12, r22
     d62:	7c 01       	movw	r14, r24
	ocrx = f32duty_Value*(counts+1);
     d64:	60 91 fe 00 	lds	r22, 0x00FE	; 0x8000fe <counts>
     d68:	70 91 ff 00 	lds	r23, 0x00FF	; 0x8000ff <counts+0x1>
     d6c:	6f 5f       	subi	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 9c 08 	call	0x1138	; 0x1138 <__floatunsisf>
     d78:	a7 01       	movw	r20, r14
     d7a:	96 01       	movw	r18, r12
     d7c:	0e 94 2a 09 	call	0x1254	; 0x1254 <__mulsf3>
     d80:	0e 94 6d 08 	call	0x10da	; 0x10da <__fixunssfsi>
     d84:	60 93 fc 00 	sts	0x00FC, r22	; 0x8000fc <ocrx>
     d88:	70 93 fd 00 	sts	0x00FD, r23	; 0x8000fd <ocrx+0x1>
		OCR1BH = ((ocrx & 0xFF00)>>8);
     d8c:	79 bd       	out	0x29, r23	; 41
		OCR1BL = ocrx;
     d8e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <ocrx>
     d92:	88 bd       	out	0x28, r24	; 40
	
}
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	08 95       	ret

00000d9e <Timer1_Fast_PWM>:
u16_t counts;
u16_t ocrx;
f32 Time_sys;
void Timer1_Fast_PWM(f32 f32duty_Value)
{
	Timer1_FastPWM_CalC_OCRX(f32duty_Value);
     d9e:	0e 94 ac 06 	call	0xd58	; 0xd58 <Timer1_FastPWM_CalC_OCRX>
     da2:	08 95       	ret

00000da4 <Timer1_SelectPrescaler>:
		OCR1BL = ocrx;
	
}
void Timer1_SelectPrescaler(TIMER1_PRESCALER enupres_val)
{
	switch(enupres_val)
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	c9 f1       	breq	.+114    	; 0xe1a <Timer1_SelectPrescaler+0x76>
     da8:	28 f4       	brcc	.+10     	; 0xdb4 <Timer1_SelectPrescaler+0x10>
     daa:	88 23       	and	r24, r24
     dac:	51 f0       	breq	.+20     	; 0xdc2 <Timer1_SelectPrescaler+0x1e>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	f1 f0       	breq	.+60     	; 0xdee <Timer1_SelectPrescaler+0x4a>
     db2:	08 95       	ret
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	09 f4       	brne	.+2      	; 0xdba <Timer1_SelectPrescaler+0x16>
     db8:	46 c0       	rjmp	.+140    	; 0xe46 <Timer1_SelectPrescaler+0xa2>
     dba:	84 30       	cpi	r24, 0x04	; 4
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <Timer1_SelectPrescaler+0x1c>
     dbe:	59 c0       	rjmp	.+178    	; 0xe72 <Timer1_SelectPrescaler+0xce>
     dc0:	08 95       	ret
	{
		case Timer1_Prescaler_8:
			 TCCR1B &= ~(1<<CS10);
     dc2:	8e b5       	in	r24, 0x2e	; 46
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<CS11);
     dc8:	8e b5       	in	r24, 0x2e	; 46
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B &= ~(1<<CS12);
     dce:	8e b5       	in	r24, 0x2e	; 46
     dd0:	8b 7f       	andi	r24, 0xFB	; 251
     dd2:	8e bd       	out	0x2e, r24	; 46
			 Time_sys = (f32)8/8000000UL;
     dd4:	8d eb       	ldi	r24, 0xBD	; 189
     dd6:	97 e3       	ldi	r25, 0x37	; 55
     dd8:	a6 e8       	ldi	r26, 0x86	; 134
     dda:	b5 e3       	ldi	r27, 0x35	; 53
     ddc:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Time_sys>
     de0:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Time_sys+0x1>
     de4:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <Time_sys+0x2>
     de8:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <Time_sys+0x3>
			 break;
     dec:	08 95       	ret
		case Timer1_Prescaler_64:
			 TCCR1B |= (1<<CS10);
     dee:	8e b5       	in	r24, 0x2e	; 46
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<CS11);
     df4:	8e b5       	in	r24, 0x2e	; 46
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B &= ~(1<<CS12);
     dfa:	8e b5       	in	r24, 0x2e	; 46
     dfc:	8b 7f       	andi	r24, 0xFB	; 251
     dfe:	8e bd       	out	0x2e, r24	; 46
			 Time_sys = (f32)64/8000000UL;
     e00:	8d eb       	ldi	r24, 0xBD	; 189
     e02:	97 e3       	ldi	r25, 0x37	; 55
     e04:	a6 e0       	ldi	r26, 0x06	; 6
     e06:	b7 e3       	ldi	r27, 0x37	; 55
     e08:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Time_sys>
     e0c:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Time_sys+0x1>
     e10:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <Time_sys+0x2>
     e14:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <Time_sys+0x3>
			 break;
     e18:	08 95       	ret
		case Timer1_Prescaler_256:
		     TCCR1B &= ~(1<<CS10);
     e1a:	8e b5       	in	r24, 0x2e	; 46
     e1c:	8e 7f       	andi	r24, 0xFE	; 254
     e1e:	8e bd       	out	0x2e, r24	; 46
		     TCCR1B &= ~(1<<CS11);
     e20:	8e b5       	in	r24, 0x2e	; 46
     e22:	8d 7f       	andi	r24, 0xFD	; 253
     e24:	8e bd       	out	0x2e, r24	; 46
		     TCCR1B |= (1<<CS12);
     e26:	8e b5       	in	r24, 0x2e	; 46
     e28:	84 60       	ori	r24, 0x04	; 4
     e2a:	8e bd       	out	0x2e, r24	; 46
			 Time_sys = (f32)256/8000000UL;
     e2c:	8d eb       	ldi	r24, 0xBD	; 189
     e2e:	97 e3       	ldi	r25, 0x37	; 55
     e30:	a6 e0       	ldi	r26, 0x06	; 6
     e32:	b8 e3       	ldi	r27, 0x38	; 56
     e34:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Time_sys>
     e38:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Time_sys+0x1>
     e3c:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <Time_sys+0x2>
     e40:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <Time_sys+0x3>
		     break;
     e44:	08 95       	ret
		case Timer1_Prescaler_1024:
			 TCCR1B |= (1<<CS10);
     e46:	8e b5       	in	r24, 0x2e	; 46
     e48:	81 60       	ori	r24, 0x01	; 1
     e4a:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B &= ~(1<<CS11);
     e4c:	8e b5       	in	r24, 0x2e	; 46
     e4e:	8d 7f       	andi	r24, 0xFD	; 253
     e50:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<CS12);
     e52:	8e b5       	in	r24, 0x2e	; 46
     e54:	84 60       	ori	r24, 0x04	; 4
     e56:	8e bd       	out	0x2e, r24	; 46
			 Time_sys = (f32)1024/8000000UL;
     e58:	8d eb       	ldi	r24, 0xBD	; 189
     e5a:	97 e3       	ldi	r25, 0x37	; 55
     e5c:	a6 e0       	ldi	r26, 0x06	; 6
     e5e:	b9 e3       	ldi	r27, 0x39	; 57
     e60:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Time_sys>
     e64:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Time_sys+0x1>
     e68:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <Time_sys+0x2>
     e6c:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <Time_sys+0x3>
			 break;
     e70:	08 95       	ret
		case Timer1_NO_Prescaling:
			TCCR1B |= (1<<CS10);
     e72:	8e b5       	in	r24, 0x2e	; 46
     e74:	81 60       	ori	r24, 0x01	; 1
     e76:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~(1<<CS11);
     e78:	8e b5       	in	r24, 0x2e	; 46
     e7a:	8d 7f       	andi	r24, 0xFD	; 253
     e7c:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~(1<<CS12);
     e7e:	8e b5       	in	r24, 0x2e	; 46
     e80:	8b 7f       	andi	r24, 0xFB	; 251
     e82:	8e bd       	out	0x2e, r24	; 46
			Time_sys = (f32)1/8000000UL;
     e84:	8d eb       	ldi	r24, 0xBD	; 189
     e86:	97 e3       	ldi	r25, 0x37	; 55
     e88:	a6 e0       	ldi	r26, 0x06	; 6
     e8a:	b4 e3       	ldi	r27, 0x34	; 52
     e8c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <Time_sys>
     e90:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <Time_sys+0x1>
     e94:	a0 93 fa 00 	sts	0x00FA, r26	; 0x8000fa <Time_sys+0x2>
     e98:	b0 93 fb 00 	sts	0x00FB, r27	; 0x8000fb <Time_sys+0x3>
     e9c:	08 95       	ret

00000e9e <Timer1_SelectMode>:
	}
}
 
void Timer1_SelectMode(TIMER1_SELECTMODE enuMode)
{
	switch(enuMode)
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	87 30       	cpi	r24, 0x07	; 7
     ea2:	91 05       	cpc	r25, r1
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <Timer1_SelectMode+0xa>
     ea6:	5f c0       	rjmp	.+190    	; 0xf66 <Timer1_SelectMode+0xc8>
     ea8:	fc 01       	movw	r30, r24
     eaa:	e6 5d       	subi	r30, 0xD6	; 214
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	0c 94 97 09 	jmp	0x132e	; 0x132e <__tablejump2__>
	{
		case MODE_1:
			TCCR1A |= (1<<WGM10);
     eb2:	8f b5       	in	r24, 0x2f	; 47
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	8f bd       	out	0x2f, r24	; 47
			TCCR1A &= ~(1<<WGM11);
     eb8:	8f b5       	in	r24, 0x2f	; 47
     eba:	8d 7f       	andi	r24, 0xFD	; 253
     ebc:	8f bd       	out	0x2f, r24	; 47
			TCCR1B &= ~(1<<WGM12);
     ebe:	8e b5       	in	r24, 0x2e	; 46
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	8e bd       	out	0x2e, r24	; 46
			TCCR1B &= ~(1<<WGM13);
     ec4:	8e b5       	in	r24, 0x2e	; 46
     ec6:	8f 7e       	andi	r24, 0xEF	; 239
     ec8:	8e bd       	out	0x2e, r24	; 46
			break;
     eca:	08 95       	ret
		case MODE_5:
			 TCCR1A |= (1<<WGM10);
     ecc:	8f b5       	in	r24, 0x2f	; 47
     ece:	81 60       	ori	r24, 0x01	; 1
     ed0:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A &= ~(1<<WGM11);
     ed2:	8f b5       	in	r24, 0x2f	; 47
     ed4:	8d 7f       	andi	r24, 0xFD	; 253
     ed6:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B |= (1<<WGM12);
     ed8:	8e b5       	in	r24, 0x2e	; 46
     eda:	88 60       	ori	r24, 0x08	; 8
     edc:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B &= ~(1<<WGM13);
     ede:	8e b5       	in	r24, 0x2e	; 46
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	8e bd       	out	0x2e, r24	; 46
			 break;
     ee4:	08 95       	ret
		case MODE_8:
			 TCCR1A &= ~(1<<WGM10);
     ee6:	8f b5       	in	r24, 0x2f	; 47
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A &= ~(1<<WGM11);
     eec:	8f b5       	in	r24, 0x2f	; 47
     eee:	8d 7f       	andi	r24, 0xFD	; 253
     ef0:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B &= ~(1<<WGM12);
     ef2:	8e b5       	in	r24, 0x2e	; 46
     ef4:	87 7f       	andi	r24, 0xF7	; 247
     ef6:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<WGM13);
     ef8:	8e b5       	in	r24, 0x2e	; 46
     efa:	80 61       	ori	r24, 0x10	; 16
     efc:	8e bd       	out	0x2e, r24	; 46
			 break;
     efe:	08 95       	ret
		case MODE_9:
			 TCCR1A |= (1<<WGM10);
     f00:	8f b5       	in	r24, 0x2f	; 47
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A &= ~(1<<WGM11);
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B &= ~(1<<WGM12);
     f0c:	8e b5       	in	r24, 0x2e	; 46
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<WGM13);
     f12:	8e b5       	in	r24, 0x2e	; 46
     f14:	80 61       	ori	r24, 0x10	; 16
     f16:	8e bd       	out	0x2e, r24	; 46
			 break;
     f18:	08 95       	ret
		case MODE_10:
			 TCCR1A &= ~(1<<WGM10);
     f1a:	8f b5       	in	r24, 0x2f	; 47
     f1c:	8e 7f       	andi	r24, 0xFE	; 254
     f1e:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A |= (1<<WGM11);
     f20:	8f b5       	in	r24, 0x2f	; 47
     f22:	82 60       	ori	r24, 0x02	; 2
     f24:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B &= ~(1<<WGM12);
     f26:	8e b5       	in	r24, 0x2e	; 46
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<WGM13);
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8e bd       	out	0x2e, r24	; 46
			 break;
     f32:	08 95       	ret
		case MODE_14:
			 TCCR1A &= ~(1<<WGM10);
     f34:	8f b5       	in	r24, 0x2f	; 47
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A |= (1<<WGM11);
     f3a:	8f b5       	in	r24, 0x2f	; 47
     f3c:	82 60       	ori	r24, 0x02	; 2
     f3e:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B |= (1<<WGM12);
     f40:	8e b5       	in	r24, 0x2e	; 46
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<WGM13);
     f46:	8e b5       	in	r24, 0x2e	; 46
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	8e bd       	out	0x2e, r24	; 46
			 break;
     f4c:	08 95       	ret
		case MODE_15:
			 TCCR1A |= (1<<WGM10);
     f4e:	8f b5       	in	r24, 0x2f	; 47
     f50:	81 60       	ori	r24, 0x01	; 1
     f52:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A |= (1<<WGM11);
     f54:	8f b5       	in	r24, 0x2f	; 47
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	8f bd       	out	0x2f, r24	; 47
			 TCCR1B |= (1<<WGM12);
     f5a:	8e b5       	in	r24, 0x2e	; 46
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8e bd       	out	0x2e, r24	; 46
			 TCCR1B |= (1<<WGM13);
     f60:	8e b5       	in	r24, 0x2e	; 46
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	8e bd       	out	0x2e, r24	; 46
     f66:	08 95       	ret

00000f68 <Timer1FastPWM_SelectOutPutCompareMatch>:
	}
}

void Timer1FastPWM_SelectOutPutCompareMatch(Timer1_CompareOutMode enu_outputcompare)
{
	switch(enu_outputcompare)
     f68:	88 23       	and	r24, r24
     f6a:	19 f0       	breq	.+6      	; 0xf72 <Timer1FastPWM_SelectOutPutCompareMatch+0xa>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	41 f0       	breq	.+16     	; 0xf80 <Timer1FastPWM_SelectOutPutCompareMatch+0x18>
     f70:	08 95       	ret
	{
		case Timer1_INVERTING:
			 TCCR1A |= (1<<COM1B0);
     f72:	8f b5       	in	r24, 0x2f	; 47
     f74:	80 61       	ori	r24, 0x10	; 16
     f76:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A |= (1<<COM1B1);
     f78:	8f b5       	in	r24, 0x2f	; 47
     f7a:	80 62       	ori	r24, 0x20	; 32
     f7c:	8f bd       	out	0x2f, r24	; 47
			 break;
     f7e:	08 95       	ret
		case Timer1_NON_INVERTING:
			 TCCR1A &= ~(1<<COM1B0);
     f80:	8f b5       	in	r24, 0x2f	; 47
     f82:	8f 7e       	andi	r24, 0xEF	; 239
     f84:	8f bd       	out	0x2f, r24	; 47
			 TCCR1A |= (1<<COM1B1);
     f86:	8f b5       	in	r24, 0x2f	; 47
     f88:	80 62       	ori	r24, 0x20	; 32
     f8a:	8f bd       	out	0x2f, r24	; 47
     f8c:	08 95       	ret

00000f8e <UART_enuInit>:
{
	ES_t LocalErrorstate = ES_OK;
	while ((UCSRA & (1 << RXC)) == 0);
	*data = UDR;
	return LocalErrorstate;
}
     f8e:	8a b1       	in	r24, 0x0a	; 10
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	8a b9       	out	0x0a, r24	; 10
     f94:	8a b1       	in	r24, 0x0a	; 10
     f96:	88 60       	ori	r24, 0x08	; 8
     f98:	8a b9       	out	0x0a, r24	; 10
     f9a:	8a b1       	in	r24, 0x0a	; 10
     f9c:	80 61       	ori	r24, 0x10	; 16
     f9e:	8a b9       	out	0x0a, r24	; 10
     fa0:	8b b1       	in	r24, 0x0b	; 11
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8b b9       	out	0x0b, r24	; 11
     fa6:	86 e8       	ldi	r24, 0x86	; 134
     fa8:	80 bd       	out	0x20, r24	; 32
     faa:	87 e6       	ldi	r24, 0x67	; 103
     fac:	89 b9       	out	0x09, r24	; 9
     fae:	10 bc       	out	0x20, r1	; 32
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	08 95       	ret

00000fb4 <UART_enuTransimtterString>:

ES_t UART_enuTransimtterString(char*data)
{
     fb4:	fc 01       	movw	r30, r24
	ES_t LocalErrorstate = ES_OK;
	while(*data!= '\0')
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <UART_enuTransimtterString+0xc>
	{
		while (! (UCSRA & (1<<UDRE))); 
     fb8:	5d 9b       	sbis	0x0b, 5	; 11
     fba:	fe cf       	rjmp	.-4      	; 0xfb8 <UART_enuTransimtterString+0x4>
		UDR = *data;
     fbc:	8c b9       	out	0x0c, r24	; 12
		data++;
     fbe:	31 96       	adiw	r30, 0x01	; 1
}

ES_t UART_enuTransimtterString(char*data)
{
	ES_t LocalErrorstate = ES_OK;
	while(*data!= '\0')
     fc0:	80 81       	ld	r24, Z
     fc2:	81 11       	cpse	r24, r1
     fc4:	f9 cf       	rjmp	.-14     	; 0xfb8 <UART_enuTransimtterString+0x4>
		UDR = *data;
		data++;
	}
	
	return LocalErrorstate;
}
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	08 95       	ret

00000fca <UART_enuReceiveString>:
ES_t UART_enuReceiveString(char*data)
{
     fca:	ac 01       	movw	r20, r24
	ES_t LocalErrorstate = ES_OK;
	uint8_t index = 0;
	uint8_t localdata = 0;
	uint8_t temdata=0;
	while ((UCSRA & (1 << RXC)) == 0);
     fcc:	5f 9b       	sbis	0x0b, 7	; 11
     fce:	fe cf       	rjmp	.-4      	; 0xfcc <UART_enuReceiveString+0x2>
	temdata= UDR;
     fd0:	8c b1       	in	r24, 0x0c	; 12
	return LocalErrorstate;
}
ES_t UART_enuReceiveString(char*data)
{
	ES_t LocalErrorstate = ES_OK;
	uint8_t index = 0;
     fd2:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t temdata=0;
	while ((UCSRA & (1 << RXC)) == 0);
	temdata= UDR;
	while(1)
	{
		while ((UCSRA & (1 << RXC)) == 0);
     fd4:	5f 9b       	sbis	0x0b, 7	; 11
     fd6:	fe cf       	rjmp	.-4      	; 0xfd4 <UART_enuReceiveString+0xa>
		localdata = UDR;
     fd8:	9c b1       	in	r25, 0x0c	; 12
		if(localdata == temdata)
     fda:	89 17       	cp	r24, r25
     fdc:	31 f0       	breq	.+12     	; 0xfea <UART_enuReceiveString+0x20>
		{
			data[index] = '\0';
			break;
		}
		data[index]= localdata;
     fde:	fa 01       	movw	r30, r20
     fe0:	e2 0f       	add	r30, r18
     fe2:	f1 1d       	adc	r31, r1
     fe4:	90 83       	st	Z, r25
		index++;
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
	}
     fe8:	f5 cf       	rjmp	.-22     	; 0xfd4 <UART_enuReceiveString+0xa>
	{
		while ((UCSRA & (1 << RXC)) == 0);
		localdata = UDR;
		if(localdata == temdata)
		{
			data[index] = '\0';
     fea:	fa 01       	movw	r30, r20
     fec:	e2 0f       	add	r30, r18
     fee:	f1 1d       	adc	r31, r1
     ff0:	10 82       	st	Z, r1
		data[index]= localdata;
		index++;
	}
	
	return LocalErrorstate;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <__divsf3>:
     ff6:	0e 94 0f 08 	call	0x101e	; 0x101e <__divsf3x>
     ffa:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_round>
     ffe:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscB>
    1002:	58 f0       	brcs	.+22     	; 0x101a <__divsf3+0x24>
    1004:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_pscA>
    1008:	40 f0       	brcs	.+16     	; 0x101a <__divsf3+0x24>
    100a:	29 f4       	brne	.+10     	; 0x1016 <__divsf3+0x20>
    100c:	5f 3f       	cpi	r21, 0xFF	; 255
    100e:	29 f0       	breq	.+10     	; 0x101a <__divsf3+0x24>
    1010:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1014:	51 11       	cpse	r21, r1
    1016:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    101a:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>

0000101e <__divsf3x>:
    101e:	0e 94 01 09 	call	0x1202	; 0x1202 <__fp_split3>
    1022:	68 f3       	brcs	.-38     	; 0xffe <__divsf3+0x8>

00001024 <__divsf3_pse>:
    1024:	99 23       	and	r25, r25
    1026:	b1 f3       	breq	.-20     	; 0x1014 <__divsf3+0x1e>
    1028:	55 23       	and	r21, r21
    102a:	91 f3       	breq	.-28     	; 0x1010 <__divsf3+0x1a>
    102c:	95 1b       	sub	r25, r21
    102e:	55 0b       	sbc	r21, r21
    1030:	bb 27       	eor	r27, r27
    1032:	aa 27       	eor	r26, r26
    1034:	62 17       	cp	r22, r18
    1036:	73 07       	cpc	r23, r19
    1038:	84 07       	cpc	r24, r20
    103a:	38 f0       	brcs	.+14     	; 0x104a <__divsf3_pse+0x26>
    103c:	9f 5f       	subi	r25, 0xFF	; 255
    103e:	5f 4f       	sbci	r21, 0xFF	; 255
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	44 1f       	adc	r20, r20
    1046:	aa 1f       	adc	r26, r26
    1048:	a9 f3       	breq	.-22     	; 0x1034 <__divsf3_pse+0x10>
    104a:	35 d0       	rcall	.+106    	; 0x10b6 <__divsf3_pse+0x92>
    104c:	0e 2e       	mov	r0, r30
    104e:	3a f0       	brmi	.+14     	; 0x105e <__divsf3_pse+0x3a>
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	32 d0       	rcall	.+100    	; 0x10b8 <__divsf3_pse+0x94>
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	e6 95       	lsr	r30
    105a:	00 1c       	adc	r0, r0
    105c:	ca f7       	brpl	.-14     	; 0x1050 <__divsf3_pse+0x2c>
    105e:	2b d0       	rcall	.+86     	; 0x10b6 <__divsf3_pse+0x92>
    1060:	fe 2f       	mov	r31, r30
    1062:	29 d0       	rcall	.+82     	; 0x10b6 <__divsf3_pse+0x92>
    1064:	66 0f       	add	r22, r22
    1066:	77 1f       	adc	r23, r23
    1068:	88 1f       	adc	r24, r24
    106a:	bb 1f       	adc	r27, r27
    106c:	26 17       	cp	r18, r22
    106e:	37 07       	cpc	r19, r23
    1070:	48 07       	cpc	r20, r24
    1072:	ab 07       	cpc	r26, r27
    1074:	b0 e8       	ldi	r27, 0x80	; 128
    1076:	09 f0       	breq	.+2      	; 0x107a <__divsf3_pse+0x56>
    1078:	bb 0b       	sbc	r27, r27
    107a:	80 2d       	mov	r24, r0
    107c:	bf 01       	movw	r22, r30
    107e:	ff 27       	eor	r31, r31
    1080:	93 58       	subi	r25, 0x83	; 131
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	3a f0       	brmi	.+14     	; 0x1094 <__divsf3_pse+0x70>
    1086:	9e 3f       	cpi	r25, 0xFE	; 254
    1088:	51 05       	cpc	r21, r1
    108a:	78 f0       	brcs	.+30     	; 0x10aa <__divsf3_pse+0x86>
    108c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1090:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	e4 f3       	brlt	.-8      	; 0x1090 <__divsf3_pse+0x6c>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	d4 f3       	brlt	.-12     	; 0x1090 <__divsf3_pse+0x6c>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	c9 f7       	brne	.-14     	; 0x109c <__divsf3_pse+0x78>
    10aa:	88 0f       	add	r24, r24
    10ac:	91 1d       	adc	r25, r1
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret
    10b6:	e1 e0       	ldi	r30, 0x01	; 1
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	bb 1f       	adc	r27, r27
    10c0:	62 17       	cp	r22, r18
    10c2:	73 07       	cpc	r23, r19
    10c4:	84 07       	cpc	r24, r20
    10c6:	ba 07       	cpc	r27, r26
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__divsf3_pse+0xae>
    10ca:	62 1b       	sub	r22, r18
    10cc:	73 0b       	sbc	r23, r19
    10ce:	84 0b       	sbc	r24, r20
    10d0:	ba 0b       	sbc	r27, r26
    10d2:	ee 1f       	adc	r30, r30
    10d4:	88 f7       	brcc	.-30     	; 0x10b8 <__divsf3_pse+0x94>
    10d6:	e0 95       	com	r30
    10d8:	08 95       	ret

000010da <__fixunssfsi>:
    10da:	0e 94 09 09 	call	0x1212	; 0x1212 <__fp_splitA>
    10de:	88 f0       	brcs	.+34     	; 0x1102 <__fixunssfsi+0x28>
    10e0:	9f 57       	subi	r25, 0x7F	; 127
    10e2:	98 f0       	brcs	.+38     	; 0x110a <__fixunssfsi+0x30>
    10e4:	b9 2f       	mov	r27, r25
    10e6:	99 27       	eor	r25, r25
    10e8:	b7 51       	subi	r27, 0x17	; 23
    10ea:	b0 f0       	brcs	.+44     	; 0x1118 <__fixunssfsi+0x3e>
    10ec:	e1 f0       	breq	.+56     	; 0x1126 <__fixunssfsi+0x4c>
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	88 1f       	adc	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	1a f0       	brmi	.+6      	; 0x10fe <__fixunssfsi+0x24>
    10f8:	ba 95       	dec	r27
    10fa:	c9 f7       	brne	.-14     	; 0x10ee <__fixunssfsi+0x14>
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <__fixunssfsi+0x4c>
    10fe:	b1 30       	cpi	r27, 0x01	; 1
    1100:	91 f0       	breq	.+36     	; 0x1126 <__fixunssfsi+0x4c>
    1102:	0e 94 23 09 	call	0x1246	; 0x1246 <__fp_zero>
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	08 95       	ret
    110a:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__fp_zero>
    110e:	67 2f       	mov	r22, r23
    1110:	78 2f       	mov	r23, r24
    1112:	88 27       	eor	r24, r24
    1114:	b8 5f       	subi	r27, 0xF8	; 248
    1116:	39 f0       	breq	.+14     	; 0x1126 <__fixunssfsi+0x4c>
    1118:	b9 3f       	cpi	r27, 0xF9	; 249
    111a:	cc f3       	brlt	.-14     	; 0x110e <__fixunssfsi+0x34>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b3 95       	inc	r27
    1124:	d9 f7       	brne	.-10     	; 0x111c <__fixunssfsi+0x42>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__fixunssfsi+0x5c>
    1128:	90 95       	com	r25
    112a:	80 95       	com	r24
    112c:	70 95       	com	r23
    112e:	61 95       	neg	r22
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	8f 4f       	sbci	r24, 0xFF	; 255
    1134:	9f 4f       	sbci	r25, 0xFF	; 255
    1136:	08 95       	ret

00001138 <__floatunsisf>:
    1138:	e8 94       	clt
    113a:	09 c0       	rjmp	.+18     	; 0x114e <__floatsisf+0x12>

0000113c <__floatsisf>:
    113c:	97 fb       	bst	r25, 7
    113e:	3e f4       	brtc	.+14     	; 0x114e <__floatsisf+0x12>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	99 23       	and	r25, r25
    1150:	a9 f0       	breq	.+42     	; 0x117c <__floatsisf+0x40>
    1152:	f9 2f       	mov	r31, r25
    1154:	96 e9       	ldi	r25, 0x96	; 150
    1156:	bb 27       	eor	r27, r27
    1158:	93 95       	inc	r25
    115a:	f6 95       	lsr	r31
    115c:	87 95       	ror	r24
    115e:	77 95       	ror	r23
    1160:	67 95       	ror	r22
    1162:	b7 95       	ror	r27
    1164:	f1 11       	cpse	r31, r1
    1166:	f8 cf       	rjmp	.-16     	; 0x1158 <__floatsisf+0x1c>
    1168:	fa f4       	brpl	.+62     	; 0x11a8 <__floatsisf+0x6c>
    116a:	bb 0f       	add	r27, r27
    116c:	11 f4       	brne	.+4      	; 0x1172 <__floatsisf+0x36>
    116e:	60 ff       	sbrs	r22, 0
    1170:	1b c0       	rjmp	.+54     	; 0x11a8 <__floatsisf+0x6c>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	16 c0       	rjmp	.+44     	; 0x11a8 <__floatsisf+0x6c>
    117c:	88 23       	and	r24, r24
    117e:	11 f0       	breq	.+4      	; 0x1184 <__floatsisf+0x48>
    1180:	96 e9       	ldi	r25, 0x96	; 150
    1182:	11 c0       	rjmp	.+34     	; 0x11a6 <__floatsisf+0x6a>
    1184:	77 23       	and	r23, r23
    1186:	21 f0       	breq	.+8      	; 0x1190 <__floatsisf+0x54>
    1188:	9e e8       	ldi	r25, 0x8E	; 142
    118a:	87 2f       	mov	r24, r23
    118c:	76 2f       	mov	r23, r22
    118e:	05 c0       	rjmp	.+10     	; 0x119a <__floatsisf+0x5e>
    1190:	66 23       	and	r22, r22
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__floatsisf+0x74>
    1194:	96 e8       	ldi	r25, 0x86	; 134
    1196:	86 2f       	mov	r24, r22
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	2a f0       	brmi	.+10     	; 0x11a8 <__floatsisf+0x6c>
    119e:	9a 95       	dec	r25
    11a0:	66 0f       	add	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	da f7       	brpl	.-10     	; 0x119e <__floatsisf+0x62>
    11a8:	88 0f       	add	r24, r24
    11aa:	96 95       	lsr	r25
    11ac:	87 95       	ror	r24
    11ae:	97 f9       	bld	r25, 7
    11b0:	08 95       	ret

000011b2 <__fp_inf>:
    11b2:	97 f9       	bld	r25, 7
    11b4:	9f 67       	ori	r25, 0x7F	; 127
    11b6:	80 e8       	ldi	r24, 0x80	; 128
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	08 95       	ret

000011be <__fp_nan>:
    11be:	9f ef       	ldi	r25, 0xFF	; 255
    11c0:	80 ec       	ldi	r24, 0xC0	; 192
    11c2:	08 95       	ret

000011c4 <__fp_pscA>:
    11c4:	00 24       	eor	r0, r0
    11c6:	0a 94       	dec	r0
    11c8:	16 16       	cp	r1, r22
    11ca:	17 06       	cpc	r1, r23
    11cc:	18 06       	cpc	r1, r24
    11ce:	09 06       	cpc	r0, r25
    11d0:	08 95       	ret

000011d2 <__fp_pscB>:
    11d2:	00 24       	eor	r0, r0
    11d4:	0a 94       	dec	r0
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	14 06       	cpc	r1, r20
    11dc:	05 06       	cpc	r0, r21
    11de:	08 95       	ret

000011e0 <__fp_round>:
    11e0:	09 2e       	mov	r0, r25
    11e2:	03 94       	inc	r0
    11e4:	00 0c       	add	r0, r0
    11e6:	11 f4       	brne	.+4      	; 0x11ec <__fp_round+0xc>
    11e8:	88 23       	and	r24, r24
    11ea:	52 f0       	brmi	.+20     	; 0x1200 <__fp_round+0x20>
    11ec:	bb 0f       	add	r27, r27
    11ee:	40 f4       	brcc	.+16     	; 0x1200 <__fp_round+0x20>
    11f0:	bf 2b       	or	r27, r31
    11f2:	11 f4       	brne	.+4      	; 0x11f8 <__fp_round+0x18>
    11f4:	60 ff       	sbrs	r22, 0
    11f6:	04 c0       	rjmp	.+8      	; 0x1200 <__fp_round+0x20>
    11f8:	6f 5f       	subi	r22, 0xFF	; 255
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	8f 4f       	sbci	r24, 0xFF	; 255
    11fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1200:	08 95       	ret

00001202 <__fp_split3>:
    1202:	57 fd       	sbrc	r21, 7
    1204:	90 58       	subi	r25, 0x80	; 128
    1206:	44 0f       	add	r20, r20
    1208:	55 1f       	adc	r21, r21
    120a:	59 f0       	breq	.+22     	; 0x1222 <__fp_splitA+0x10>
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	71 f0       	breq	.+28     	; 0x122c <__fp_splitA+0x1a>
    1210:	47 95       	ror	r20

00001212 <__fp_splitA>:
    1212:	88 0f       	add	r24, r24
    1214:	97 fb       	bst	r25, 7
    1216:	99 1f       	adc	r25, r25
    1218:	61 f0       	breq	.+24     	; 0x1232 <__fp_splitA+0x20>
    121a:	9f 3f       	cpi	r25, 0xFF	; 255
    121c:	79 f0       	breq	.+30     	; 0x123c <__fp_splitA+0x2a>
    121e:	87 95       	ror	r24
    1220:	08 95       	ret
    1222:	12 16       	cp	r1, r18
    1224:	13 06       	cpc	r1, r19
    1226:	14 06       	cpc	r1, r20
    1228:	55 1f       	adc	r21, r21
    122a:	f2 cf       	rjmp	.-28     	; 0x1210 <__fp_split3+0xe>
    122c:	46 95       	lsr	r20
    122e:	f1 df       	rcall	.-30     	; 0x1212 <__fp_splitA>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <__fp_splitA+0x30>
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	99 1f       	adc	r25, r25
    123a:	f1 cf       	rjmp	.-30     	; 0x121e <__fp_splitA+0xc>
    123c:	86 95       	lsr	r24
    123e:	71 05       	cpc	r23, r1
    1240:	61 05       	cpc	r22, r1
    1242:	08 94       	sec
    1244:	08 95       	ret

00001246 <__fp_zero>:
    1246:	e8 94       	clt

00001248 <__fp_szero>:
    1248:	bb 27       	eor	r27, r27
    124a:	66 27       	eor	r22, r22
    124c:	77 27       	eor	r23, r23
    124e:	cb 01       	movw	r24, r22
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret

00001254 <__mulsf3>:
    1254:	0e 94 3d 09 	call	0x127a	; 0x127a <__mulsf3x>
    1258:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__fp_round>
    125c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__fp_pscA>
    1260:	38 f0       	brcs	.+14     	; 0x1270 <__mulsf3+0x1c>
    1262:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fp_pscB>
    1266:	20 f0       	brcs	.+8      	; 0x1270 <__mulsf3+0x1c>
    1268:	95 23       	and	r25, r21
    126a:	11 f0       	breq	.+4      	; 0x1270 <__mulsf3+0x1c>
    126c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1270:	0c 94 df 08 	jmp	0x11be	; 0x11be <__fp_nan>
    1274:	11 24       	eor	r1, r1
    1276:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>

0000127a <__mulsf3x>:
    127a:	0e 94 01 09 	call	0x1202	; 0x1202 <__fp_split3>
    127e:	70 f3       	brcs	.-36     	; 0x125c <__mulsf3+0x8>

00001280 <__mulsf3_pse>:
    1280:	95 9f       	mul	r25, r21
    1282:	c1 f3       	breq	.-16     	; 0x1274 <__mulsf3+0x20>
    1284:	95 0f       	add	r25, r21
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	55 1f       	adc	r21, r21
    128a:	62 9f       	mul	r22, r18
    128c:	f0 01       	movw	r30, r0
    128e:	72 9f       	mul	r23, r18
    1290:	bb 27       	eor	r27, r27
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	63 9f       	mul	r22, r19
    1298:	aa 27       	eor	r26, r26
    129a:	f0 0d       	add	r31, r0
    129c:	b1 1d       	adc	r27, r1
    129e:	aa 1f       	adc	r26, r26
    12a0:	64 9f       	mul	r22, r20
    12a2:	66 27       	eor	r22, r22
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	66 1f       	adc	r22, r22
    12aa:	82 9f       	mul	r24, r18
    12ac:	22 27       	eor	r18, r18
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	73 9f       	mul	r23, r19
    12b6:	b0 0d       	add	r27, r0
    12b8:	a1 1d       	adc	r26, r1
    12ba:	62 1f       	adc	r22, r18
    12bc:	83 9f       	mul	r24, r19
    12be:	a0 0d       	add	r26, r0
    12c0:	61 1d       	adc	r22, r1
    12c2:	22 1f       	adc	r18, r18
    12c4:	74 9f       	mul	r23, r20
    12c6:	33 27       	eor	r19, r19
    12c8:	a0 0d       	add	r26, r0
    12ca:	61 1d       	adc	r22, r1
    12cc:	23 1f       	adc	r18, r19
    12ce:	84 9f       	mul	r24, r20
    12d0:	60 0d       	add	r22, r0
    12d2:	21 1d       	adc	r18, r1
    12d4:	82 2f       	mov	r24, r18
    12d6:	76 2f       	mov	r23, r22
    12d8:	6a 2f       	mov	r22, r26
    12da:	11 24       	eor	r1, r1
    12dc:	9f 57       	subi	r25, 0x7F	; 127
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	9a f0       	brmi	.+38     	; 0x1308 <__mulsf3_pse+0x88>
    12e2:	f1 f0       	breq	.+60     	; 0x1320 <__mulsf3_pse+0xa0>
    12e4:	88 23       	and	r24, r24
    12e6:	4a f0       	brmi	.+18     	; 0x12fa <__mulsf3_pse+0x7a>
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	bb 1f       	adc	r27, r27
    12ee:	66 1f       	adc	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	91 50       	subi	r25, 0x01	; 1
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <__mulsf3_pse+0x64>
    12fa:	9e 3f       	cpi	r25, 0xFE	; 254
    12fc:	51 05       	cpc	r21, r1
    12fe:	80 f0       	brcs	.+32     	; 0x1320 <__mulsf3_pse+0xa0>
    1300:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__fp_inf>
    1304:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__fp_szero>
    1308:	5f 3f       	cpi	r21, 0xFF	; 255
    130a:	e4 f3       	brlt	.-8      	; 0x1304 <__mulsf3_pse+0x84>
    130c:	98 3e       	cpi	r25, 0xE8	; 232
    130e:	d4 f3       	brlt	.-12     	; 0x1304 <__mulsf3_pse+0x84>
    1310:	86 95       	lsr	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	b7 95       	ror	r27
    1318:	f7 95       	ror	r31
    131a:	e7 95       	ror	r30
    131c:	9f 5f       	subi	r25, 0xFF	; 255
    131e:	c1 f7       	brne	.-16     	; 0x1310 <__mulsf3_pse+0x90>
    1320:	fe 2b       	or	r31, r30
    1322:	88 0f       	add	r24, r24
    1324:	91 1d       	adc	r25, r1
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	97 f9       	bld	r25, 7
    132c:	08 95       	ret

0000132e <__tablejump2__>:
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	05 90       	lpm	r0, Z+
    1334:	f4 91       	lpm	r31, Z
    1336:	e0 2d       	mov	r30, r0
    1338:	09 94       	ijmp

0000133a <_exit>:
    133a:	f8 94       	cli

0000133c <__stop_program>:
    133c:	ff cf       	rjmp	.-2      	; 0x133c <__stop_program>
