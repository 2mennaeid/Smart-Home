
Smart Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000017ee  00001882  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080006e  0080006e  00001890  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d0  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dee  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001181  00000000  00000000  00005aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021ca  00000000  00000000  00006c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a0c  00000000  00000000  00008e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010a0  00000000  00000000  00009814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028a9  00000000  00000000  0000a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000d15d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_1>
       8:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_2>
       c:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_10>
      2c:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_11>
      30:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_12>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_16>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	9b 05       	cpc	r25, r11
      56:	9e 05       	cpc	r25, r14
      58:	a2 05       	cpc	r26, r2
      5a:	a6 05       	cpc	r26, r6
      5c:	aa 05       	cpc	r26, r10
      5e:	ae 05       	cpc	r26, r14
      60:	b2 05       	cpc	r27, r2
      62:	b6 05       	cpc	r27, r6

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ee       	ldi	r30, 0xEE	; 238
      78:	f7 e1       	ldi	r31, 0x17	; 23
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	20 e0       	ldi	r18, 0x00	; 0
      88:	ae e6       	ldi	r26, 0x6E	; 110
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	aa 39       	cpi	r26, 0x9A	; 154
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 38 05 	call	0xa70	; 0xa70 <main>
      9a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Control_LightOfRoom>:
	}
	else
	{
		return ES_NOK;
	}
}
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
      ac:	ce 01       	movw	r24, r28
      ae:	01 96       	adiw	r24, 0x01	; 1
      b0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <SPI_enuReceiveChar>
      b4:	89 81       	ldd	r24, Y+1	; 0x01
      b6:	84 35       	cpi	r24, 0x54	; 84
      b8:	31 f4       	brne	.+12     	; 0xc6 <Control_LightOfRoom+0x24>
      ba:	48 e0       	ldi	r20, 0x08	; 8
      bc:	62 e0       	ldi	r22, 0x02	; 2
      be:	81 e4       	ldi	r24, 0x41	; 65
      c0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
      c4:	17 c0       	rjmp	.+46     	; 0xf4 <Control_LightOfRoom+0x52>
      c6:	86 34       	cpi	r24, 0x46	; 70
      c8:	31 f4       	brne	.+12     	; 0xd6 <Control_LightOfRoom+0x34>
      ca:	48 e0       	ldi	r20, 0x08	; 8
      cc:	62 e0       	ldi	r22, 0x02	; 2
      ce:	81 e4       	ldi	r24, 0x41	; 65
      d0:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
      d4:	0f c0       	rjmp	.+30     	; 0xf4 <Control_LightOfRoom+0x52>
      d6:	84 37       	cpi	r24, 0x74	; 116
      d8:	31 f4       	brne	.+12     	; 0xe6 <Control_LightOfRoom+0x44>
      da:	48 e0       	ldi	r20, 0x08	; 8
      dc:	63 e0       	ldi	r22, 0x03	; 3
      de:	81 e4       	ldi	r24, 0x41	; 65
      e0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
      e4:	07 c0       	rjmp	.+14     	; 0xf4 <Control_LightOfRoom+0x52>
      e6:	86 36       	cpi	r24, 0x66	; 102
      e8:	29 f4       	brne	.+10     	; 0xf4 <Control_LightOfRoom+0x52>
      ea:	48 e0       	ldi	r20, 0x08	; 8
      ec:	63 e0       	ldi	r22, 0x03	; 3
      ee:	81 e4       	ldi	r24, 0x41	; 65
      f0:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
      f4:	0f 90       	pop	r0
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <AirCondition_Init>:
      fc:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_enInit>
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	82 e4       	ldi	r24, 0x42	; 66
     104:	0e 94 01 02 	call	0x402	; 0x402 <DC_Init>
     108:	08 95       	ret

0000010a <Automatic_AirCondition>:
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	00 d0       	rcall	.+0      	; 0x110 <Automatic_AirCondition+0x6>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	84 e0       	ldi	r24, 0x04	; 4
     116:	0e 94 05 05 	call	0xa0a	; 0xa0a <Temp_enuInit>
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     122:	80 e6       	ldi	r24, 0x60	; 96
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 1f 04 	call	0x83e	; 0x83e <LCD_enuDisplayString>
     12a:	ce 01       	movw	r24, r28
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	0e 94 16 05 	call	0xa2c	; 0xa2c <Temp_enuSychGetTemp_val>
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	8f 31       	cpi	r24, 0x1F	; 31
     138:	91 05       	cpc	r25, r1
     13a:	88 f4       	brcc	.+34     	; 0x15e <Automatic_AirCondition+0x54>
     13c:	42 e0       	ldi	r20, 0x02	; 2
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	cb 01       	movw	r24, r22
     144:	0e 94 10 02 	call	0x420	; 0x420 <DC_Speed>
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     150:	69 81       	ldd	r22, Y+1	; 0x01
     152:	7a 81       	ldd	r23, Y+2	; 0x02
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_enDisplayNum>
     15c:	5c c0       	rjmp	.+184    	; 0x216 <Automatic_AirCondition+0x10c>
     15e:	9c 01       	movw	r18, r24
     160:	2f 51       	subi	r18, 0x1F	; 31
     162:	31 09       	sbc	r19, r1
     164:	24 31       	cpi	r18, 0x14	; 20
     166:	31 05       	cpc	r19, r1
     168:	90 f4       	brcc	.+36     	; 0x18e <Automatic_AirCondition+0x84>
     16a:	42 e0       	ldi	r20, 0x02	; 2
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	80 e8       	ldi	r24, 0x80	; 128
     172:	9e e3       	ldi	r25, 0x3E	; 62
     174:	0e 94 10 02 	call	0x420	; 0x420 <DC_Speed>
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     180:	69 81       	ldd	r22, Y+1	; 0x01
     182:	7a 81       	ldd	r23, Y+2	; 0x02
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_enDisplayNum>
     18c:	44 c0       	rjmp	.+136    	; 0x216 <Automatic_AirCondition+0x10c>
     18e:	9c 01       	movw	r18, r24
     190:	23 53       	subi	r18, 0x33	; 51
     192:	31 09       	sbc	r19, r1
     194:	24 31       	cpi	r18, 0x14	; 20
     196:	31 05       	cpc	r19, r1
     198:	90 f4       	brcc	.+36     	; 0x1be <Automatic_AirCondition+0xb4>
     19a:	42 e0       	ldi	r20, 0x02	; 2
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	70 e0       	ldi	r23, 0x00	; 0
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	9f e3       	ldi	r25, 0x3F	; 63
     1a4:	0e 94 10 02 	call	0x420	; 0x420 <DC_Speed>
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     1b0:	69 81       	ldd	r22, Y+1	; 0x01
     1b2:	7a 81       	ldd	r23, Y+2	; 0x02
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_enDisplayNum>
     1bc:	2c c0       	rjmp	.+88     	; 0x216 <Automatic_AirCondition+0x10c>
     1be:	9c 01       	movw	r18, r24
     1c0:	27 54       	subi	r18, 0x47	; 71
     1c2:	31 09       	sbc	r19, r1
     1c4:	24 31       	cpi	r18, 0x14	; 20
     1c6:	31 05       	cpc	r19, r1
     1c8:	90 f4       	brcc	.+36     	; 0x1ee <Automatic_AirCondition+0xe4>
     1ca:	42 e0       	ldi	r20, 0x02	; 2
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e4       	ldi	r24, 0x40	; 64
     1d2:	9f e3       	ldi	r25, 0x3F	; 63
     1d4:	0e 94 10 02 	call	0x420	; 0x420 <DC_Speed>
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     1e0:	69 81       	ldd	r22, Y+1	; 0x01
     1e2:	7a 81       	ldd	r23, Y+2	; 0x02
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_enDisplayNum>
     1ec:	14 c0       	rjmp	.+40     	; 0x216 <Automatic_AirCondition+0x10c>
     1ee:	8b 35       	cpi	r24, 0x5B	; 91
     1f0:	91 05       	cpc	r25, r1
     1f2:	88 f0       	brcs	.+34     	; 0x216 <Automatic_AirCondition+0x10c>
     1f4:	42 e0       	ldi	r20, 0x02	; 2
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	9f e3       	ldi	r25, 0x3F	; 63
     1fe:	0e 94 10 02 	call	0x420	; 0x420 <DC_Speed>
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	0e 94 97 04 	call	0x92e	; 0x92e <LCD_goto>
     20a:	69 81       	ldd	r22, Y+1	; 0x01
     20c:	7a 81       	ldd	r23, Y+2	; 0x02
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 2d 04 	call	0x85a	; 0x85a <LCD_enDisplayNum>
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <Check_Connection>:
ES_t Check_Connection()
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	1f 92       	push	r1
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	ES_t LocalErrorState = ES_NOK;
	uint8_t u8Recievedata;
	SPI_enuSlaveInit();
     22a:	0e 94 b0 07 	call	0xf60	; 0xf60 <SPI_enuSlaveInit>
	SPI_enuSelectData_Order(MSB);
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <SPI_enuSelectData_Order>
	SPI_enuSelectClock_Polarity(RISING);
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 c2 07 	call	0xf84	; 0xf84 <SPI_enuSelectClock_Polarity>
	SPI_enuSelectClock_Phase(SAMPLE);
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	0e 94 cf 07 	call	0xf9e	; 0xf9e <SPI_enuSelectClock_Phase>
	DIO_SetPinValue(PORT_B,PIN7,LOW);
     240:	40 e0       	ldi	r20, 0x00	; 0
     242:	67 e0       	ldi	r22, 0x07	; 7
     244:	82 e4       	ldi	r24, 0x42	; 66
     246:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	SPI_enuReceiveChar(&u8Recievedata);
     24a:	ce 01       	movw	r24, r28
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <SPI_enuReceiveChar>
	if(u8Recievedata=='O')
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	8f 34       	cpi	r24, 0x4F	; 79
     256:	11 f0       	breq	.+4      	; 0x25c <Check_Connection+0x3c>
		return ES_NOK;
	}
}
ES_t Check_Connection()
{
	ES_t LocalErrorState = ES_NOK;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	01 c0       	rjmp	.+2      	; 0x25e <Check_Connection+0x3e>
	SPI_enuSelectClock_Phase(SAMPLE);
	DIO_SetPinValue(PORT_B,PIN7,LOW);
	SPI_enuReceiveChar(&u8Recievedata);
	if(u8Recievedata=='O')
	{
		LocalErrorState = ES_OK;
     25c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return LocalErrorState;
}
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <RecieveData_ToControl_OFLight>:
	}
}

void RecieveData_ToControl_OFLight()
{   
	DIO_SetPinValue(PORT_B,PIN7,LOW);
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	67 e0       	ldi	r22, 0x07	; 7
     26a:	82 e4       	ldi	r24, 0x42	; 66
     26c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	SPI_enuEnableInterrupt();
     270:	0e 94 ee 07 	call	0xfdc	; 0xfdc <SPI_enuEnableInterrupt>
	SPI_CallBack(&Control_LightOfRoom,NULLPTR);
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	81 e5       	ldi	r24, 0x51	; 81
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <SPI_CallBack>
	sei();
     280:	78 94       	sei
     282:	08 95       	ret

00000284 <Light_Init>:
}
void Light_Init()
{
	led_init(PORT_D,PIN0);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	84 e4       	ldi	r24, 0x44	; 68
     288:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
	led_init(PORT_D,PIN1);
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	84 e4       	ldi	r24, 0x44	; 68
     290:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
	led_init(PORT_D,PIN2);
     294:	62 e0       	ldi	r22, 0x02	; 2
     296:	84 e4       	ldi	r24, 0x44	; 68
     298:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
	led_init(PORT_D,PIN7);
     29c:	67 e0       	ldi	r22, 0x07	; 7
     29e:	84 e4       	ldi	r24, 0x44	; 68
     2a0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
	led_init(PORT_A,PIN2);
     2a4:	62 e0       	ldi	r22, 0x02	; 2
     2a6:	81 e4       	ldi	r24, 0x41	; 65
     2a8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
	led_init(PORT_A,PIN3);
     2ac:	63 e0       	ldi	r22, 0x03	; 3
     2ae:	81 e4       	ldi	r24, 0x41	; 65
     2b0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <led_init>
     2b4:	08 95       	ret

000002b6 <Automatic_ControlLight>:
}
void Automatic_ControlLight()
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <Automatic_ControlLight+0x6>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	    u16_t val;
		LDR_enuInit(5);
     2c0:	85 e0       	ldi	r24, 0x05	; 5
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 b4 04 	call	0x968	; 0x968 <LDR_enuInit>
		LDR_SychVoltageValue(&val);
     2c8:	ce 01       	movw	r24, r28
     2ca:	01 96       	adiw	r24, 0x01	; 1
     2cc:	0e 94 c5 04 	call	0x98a	; 0x98a <LDR_SychVoltageValue>
		if(val>1000 && val<1024)
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	9c 01       	movw	r18, r24
     2d6:	29 5e       	subi	r18, 0xE9	; 233
     2d8:	33 40       	sbci	r19, 0x03	; 3
     2da:	27 31       	cpi	r18, 0x17	; 23
     2dc:	31 05       	cpc	r19, r1
     2de:	a8 f4       	brcc	.+42     	; 0x30a <Automatic_ControlLight+0x54>
		{
			led_on(PORT_D,PIN0,source);
     2e0:	48 e0       	ldi	r20, 0x08	; 8
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	84 e4       	ldi	r24, 0x44	; 68
     2e6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN1,source);
     2ea:	48 e0       	ldi	r20, 0x08	; 8
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	84 e4       	ldi	r24, 0x44	; 68
     2f0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN2,source);
     2f4:	48 e0       	ldi	r20, 0x08	; 8
     2f6:	62 e0       	ldi	r22, 0x02	; 2
     2f8:	84 e4       	ldi	r24, 0x44	; 68
     2fa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN7,source);
     2fe:	48 e0       	ldi	r20, 0x08	; 8
     300:	67 e0       	ldi	r22, 0x07	; 7
     302:	84 e4       	ldi	r24, 0x44	; 68
     304:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
     308:	67 c0       	rjmp	.+206    	; 0x3d8 <Automatic_ControlLight+0x122>
		}
		else if(val>700 && val<1000)
     30a:	9c 01       	movw	r18, r24
     30c:	2d 5b       	subi	r18, 0xBD	; 189
     30e:	32 40       	sbci	r19, 0x02	; 2
     310:	2b 32       	cpi	r18, 0x2B	; 43
     312:	31 40       	sbci	r19, 0x01	; 1
     314:	a8 f4       	brcc	.+42     	; 0x340 <Automatic_ControlLight+0x8a>
		{
			led_of(PORT_D,PIN0,source);
     316:	48 e0       	ldi	r20, 0x08	; 8
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	84 e4       	ldi	r24, 0x44	; 68
     31c:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_on(PORT_D,PIN1,source);
     320:	48 e0       	ldi	r20, 0x08	; 8
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	84 e4       	ldi	r24, 0x44	; 68
     326:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN2,source);
     32a:	48 e0       	ldi	r20, 0x08	; 8
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	84 e4       	ldi	r24, 0x44	; 68
     330:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN7,source);
     334:	48 e0       	ldi	r20, 0x08	; 8
     336:	67 e0       	ldi	r22, 0x07	; 7
     338:	84 e4       	ldi	r24, 0x44	; 68
     33a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
     33e:	4c c0       	rjmp	.+152    	; 0x3d8 <Automatic_ControlLight+0x122>
		}
		else if(val>600 && val<700)
     340:	9c 01       	movw	r18, r24
     342:	29 55       	subi	r18, 0x59	; 89
     344:	32 40       	sbci	r19, 0x02	; 2
     346:	23 36       	cpi	r18, 0x63	; 99
     348:	31 05       	cpc	r19, r1
     34a:	a8 f4       	brcc	.+42     	; 0x376 <Automatic_ControlLight+0xc0>
		{
			led_of(PORT_D,PIN0,source);
     34c:	48 e0       	ldi	r20, 0x08	; 8
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	84 e4       	ldi	r24, 0x44	; 68
     352:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN1,source);
     356:	48 e0       	ldi	r20, 0x08	; 8
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	84 e4       	ldi	r24, 0x44	; 68
     35c:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_on(PORT_D,PIN2,source);
     360:	48 e0       	ldi	r20, 0x08	; 8
     362:	62 e0       	ldi	r22, 0x02	; 2
     364:	84 e4       	ldi	r24, 0x44	; 68
     366:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
			led_on(PORT_D,PIN7,source);
     36a:	48 e0       	ldi	r20, 0x08	; 8
     36c:	67 e0       	ldi	r22, 0x07	; 7
     36e:	84 e4       	ldi	r24, 0x44	; 68
     370:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
     374:	31 c0       	rjmp	.+98     	; 0x3d8 <Automatic_ControlLight+0x122>
		}
		else if(val>=512 && val<=600)
     376:	9c 01       	movw	r18, r24
     378:	32 50       	subi	r19, 0x02	; 2
     37a:	29 35       	cpi	r18, 0x59	; 89
     37c:	31 05       	cpc	r19, r1
     37e:	a8 f4       	brcc	.+42     	; 0x3aa <Automatic_ControlLight+0xf4>
		{
			led_of(PORT_D,PIN0,source);
     380:	48 e0       	ldi	r20, 0x08	; 8
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	84 e4       	ldi	r24, 0x44	; 68
     386:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN1,source);
     38a:	48 e0       	ldi	r20, 0x08	; 8
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	84 e4       	ldi	r24, 0x44	; 68
     390:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN2,source);
     394:	48 e0       	ldi	r20, 0x08	; 8
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	84 e4       	ldi	r24, 0x44	; 68
     39a:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_on(PORT_D,PIN7,source);
     39e:	48 e0       	ldi	r20, 0x08	; 8
     3a0:	67 e0       	ldi	r22, 0x07	; 7
     3a2:	84 e4       	ldi	r24, 0x44	; 68
     3a4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <led_on>
     3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <Automatic_ControlLight+0x122>
		}
		else if(val<500)
     3aa:	84 3f       	cpi	r24, 0xF4	; 244
     3ac:	91 40       	sbci	r25, 0x01	; 1
     3ae:	a0 f4       	brcc	.+40     	; 0x3d8 <Automatic_ControlLight+0x122>
		{
			led_of(PORT_D,PIN0,source);
     3b0:	48 e0       	ldi	r20, 0x08	; 8
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	84 e4       	ldi	r24, 0x44	; 68
     3b6:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN1,source);
     3ba:	48 e0       	ldi	r20, 0x08	; 8
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	84 e4       	ldi	r24, 0x44	; 68
     3c0:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN2,source);
     3c4:	48 e0       	ldi	r20, 0x08	; 8
     3c6:	62 e0       	ldi	r22, 0x02	; 2
     3c8:	84 e4       	ldi	r24, 0x44	; 68
     3ca:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
			led_of(PORT_D,PIN7,source);
     3ce:	48 e0       	ldi	r20, 0x08	; 8
     3d0:	67 e0       	ldi	r22, 0x07	; 7
     3d2:	84 e4       	ldi	r24, 0x44	; 68
     3d4:	0e 94 ef 04 	call	0x9de	; 0x9de <led_of>
		}
	
}
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <OPEN_SmartHome>:

void OPEN_SmartHome()
{
	Light_Init();
     3e2:	0e 94 42 01 	call	0x284	; 0x284 <Light_Init>
	AirCondition_Init();
     3e6:	0e 94 7e 00 	call	0xfc	; 0xfc <AirCondition_Init>
	ADC_euInit(AVCC,Left_Adjustment,Prescaler_8);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 41 05 	call	0xa82	; 0xa82 <ADC_euInit>
	RecieveData_ToControl_OFLight();
     3f4:	0e 94 33 01 	call	0x266	; 0x266 <RecieveData_ToControl_OFLight>
	while(1)
	{
		Automatic_AirCondition();
     3f8:	0e 94 85 00 	call	0x10a	; 0x10a <Automatic_AirCondition>
		Automatic_ControlLight();
     3fc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <Automatic_ControlLight>
     400:	fb cf       	rjmp	.-10     	; 0x3f8 <OPEN_SmartHome+0x16>

00000402 <DC_Init>:
#include "../../MCAL/DIO/DIO_confg.h"
#include "../../MCAL/DIO/DI0_interface.h"
#include "../../MCAL/Timer0/Timer_priv.h"
#include "../../MCAL/Timer0/Timer_Init.h"
void DC_Init(uint8_t u8portId ,uint8_t u8pinnumber)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	c8 2f       	mov	r28, r24
     408:	d6 2f       	mov	r29, r22
	DIO_SetPinDirection(u8portId,u8pinnumber,OUT);
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinValue(u8portId,u8pinnumber,LOW);
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	6d 2f       	mov	r22, r29
     414:	8c 2f       	mov	r24, r28
     416:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	08 95       	ret

00000420 <DC_Speed>:
void DC_Speed(f32 u8duty,TIMER_MODE enumode)
{
     420:	cf 92       	push	r12
     422:	df 92       	push	r13
     424:	ef 92       	push	r14
     426:	ff 92       	push	r15
     428:	cf 93       	push	r28
     42a:	6b 01       	movw	r12, r22
     42c:	7c 01       	movw	r14, r24
     42e:	c4 2f       	mov	r28, r20
	if(enumode==FPWM)
     430:	42 30       	cpi	r20, 0x02	; 2
     432:	79 f4       	brne	.+30     	; 0x452 <DC_Speed+0x32>
	{
		Timer_enSelectPrescaler(Timer0_Prescaler_1024);
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Timer_enSelectPrescaler>
		Timer_enSelectmode(enumode);
     43a:	8c 2f       	mov	r24, r28
     43c:	0e 94 28 08 	call	0x1050	; 0x1050 <Timer_enSelectmode>
		TimerFPWM_enuSelectCompare_Output_Mode(NON_INVERTING);
     440:	84 e0       	ldi	r24, 0x04	; 4
     442:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <TimerFPWM_enuSelectCompare_Output_Mode>
		TimerFPWM_enuCalc_OCR(u8duty,ON);
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	c7 01       	movw	r24, r14
     44a:	b6 01       	movw	r22, r12
     44c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <TimerFPWM_enuCalc_OCR>
     450:	13 c0       	rjmp	.+38     	; 0x478 <DC_Speed+0x58>
	}
	else if(enumode==PhaseCorrect)
     452:	43 30       	cpi	r20, 0x03	; 3
     454:	89 f4       	brne	.+34     	; 0x478 <DC_Speed+0x58>
	{
		Timer_enSelectPrescaler(Timer0_Prescaler_1024);
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Timer_enSelectPrescaler>
		Timer_enSelectmode(enumode);
     45c:	8c 2f       	mov	r24, r28
     45e:	0e 94 28 08 	call	0x1050	; 0x1050 <Timer_enSelectmode>
		TimerPhaseCorrect_enuSelectCompare_Output_Mode(NON_INVERTING);
     462:	84 e0       	ldi	r24, 0x04	; 4
     464:	0e 94 0c 09 	call	0x1218	; 0x1218 <TimerPhaseCorrect_enuSelectCompare_Output_Mode>
		TimerPhaseCorrect_enuCalc_OCR(u8duty,ON);
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fixunssfsi>
     470:	86 2f       	mov	r24, r22
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	0e 94 27 09 	call	0x124e	; 0x124e <TimerPhaseCorrect_enuCalc_OCR>
	}
     478:	cf 91       	pop	r28
     47a:	ff 90       	pop	r15
     47c:	ef 90       	pop	r14
     47e:	df 90       	pop	r13
     480:	cf 90       	pop	r12
     482:	08 95       	ret

00000484 <LCD_Latch>:
	
	return LocalErrorstate;
}

static void LCD_Latch(uint8_t _u8command)
{
     484:	cf 93       	push	r28
     486:	c8 2f       	mov	r28, r24
	// set rw 0 as write
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	64 e0       	ldi	r22, 0x04	; 4
     48c:	84 e4       	ldi	r24, 0x44	; 68
     48e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// EN is low
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     492:	40 e0       	ldi	r20, 0x00	; 0
     494:	63 e0       	ldi	r22, 0x03	; 3
     496:	84 e4       	ldi	r24, 0x44	; 68
     498:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// set data pins
#if LCD_MODE == EIGHT
	DIO_SetPinValue(D7_PORT,D7_PIN, ((_u8command>>7)&1) );
     49c:	4c 2f       	mov	r20, r28
     49e:	44 1f       	adc	r20, r20
     4a0:	44 27       	eor	r20, r20
     4a2:	44 1f       	adc	r20, r20
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	83 e4       	ldi	r24, 0x43	; 67
     4a8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
     4ac:	c6 fb       	bst	r28, 6
     4ae:	44 27       	eor	r20, r20
     4b0:	40 f9       	bld	r20, 0
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	83 e4       	ldi	r24, 0x43	; 67
     4b6:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
     4ba:	c5 fb       	bst	r28, 5
     4bc:	44 27       	eor	r20, r20
     4be:	40 f9       	bld	r20, 0
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	83 e4       	ldi	r24, 0x43	; 67
     4c4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
     4c8:	c4 fb       	bst	r28, 4
     4ca:	44 27       	eor	r20, r20
     4cc:	40 f9       	bld	r20, 0
     4ce:	63 e0       	ldi	r22, 0x03	; 3
     4d0:	83 e4       	ldi	r24, 0x43	; 67
     4d2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D3_PORT,D3_PIN, ((_u8command>>3)&1) );
     4d6:	c3 fb       	bst	r28, 3
     4d8:	44 27       	eor	r20, r20
     4da:	40 f9       	bld	r20, 0
     4dc:	64 e0       	ldi	r22, 0x04	; 4
     4de:	83 e4       	ldi	r24, 0x43	; 67
     4e0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT,D2_PIN, ((_u8command>>2)&1) );
     4e4:	c2 fb       	bst	r28, 2
     4e6:	44 27       	eor	r20, r20
     4e8:	40 f9       	bld	r20, 0
     4ea:	65 e0       	ldi	r22, 0x05	; 5
     4ec:	83 e4       	ldi	r24, 0x43	; 67
     4ee:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT,D1_PIN, ((_u8command>>1)&1) );
     4f2:	c1 fb       	bst	r28, 1
     4f4:	44 27       	eor	r20, r20
     4f6:	40 f9       	bld	r20, 0
     4f8:	66 e0       	ldi	r22, 0x06	; 6
     4fa:	83 e4       	ldi	r24, 0x43	; 67
     4fc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT,D0_PIN, ((_u8command>>0)&1) );
     500:	4c 2f       	mov	r20, r28
     502:	41 70       	andi	r20, 0x01	; 1
     504:	67 e0       	ldi	r22, 0x07	; 7
     506:	83 e4       	ldi	r24, 0x43	; 67
     508:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
#endif
	// enable latch
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
     50c:	41 e0       	ldi	r20, 0x01	; 1
     50e:	63 e0       	ldi	r22, 0x03	; 3
     510:	84 e4       	ldi	r24, 0x44	; 68
     512:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	8f e1       	ldi	r24, 0x1F	; 31
     518:	9e e4       	ldi	r25, 0x4E	; 78
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <LCD_Latch+0x96>
     51e:	00 c0       	rjmp	.+0      	; 0x520 <LCD_Latch+0x9c>
     520:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	63 e0       	ldi	r22, 0x03	; 3
     526:	84 e4       	ldi	r24, 0x44	; 68
     528:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     52c:	8f e1       	ldi	r24, 0x1F	; 31
     52e:	9e e4       	ldi	r25, 0x4E	; 78
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <LCD_Latch+0xac>
     534:	00 c0       	rjmp	.+0      	; 0x536 <LCD_Latch+0xb2>
     536:	00 00       	nop
	_delay_ms(10);
	
	
}
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <LCD_enInit>:

ES_t LCD_enInit(void)
{
	ES_t LocalErrorstate = ES_OK;
	// set control pins
	DIO_SetPinDirection(RS_PORT,RS_PIN,OUT);
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	65 e0       	ldi	r22, 0x05	; 5
     540:	84 e4       	ldi	r24, 0x44	; 68
     542:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(RW_PORT,RW_PIN,OUT);
     546:	41 e0       	ldi	r20, 0x01	; 1
     548:	64 e0       	ldi	r22, 0x04	; 4
     54a:	84 e4       	ldi	r24, 0x44	; 68
     54c:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(EN_PORT,EN_PIN,OUT);
     550:	41 e0       	ldi	r20, 0x01	; 1
     552:	63 e0       	ldi	r22, 0x03	; 3
     554:	84 e4       	ldi	r24, 0x44	; 68
     556:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	// set data pins
	DIO_SetPinDirection(D7_PORT,D7_PIN,OUT);
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	83 e4       	ldi	r24, 0x43	; 67
     560:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D6_PORT,D6_PIN,OUT);
     564:	41 e0       	ldi	r20, 0x01	; 1
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	83 e4       	ldi	r24, 0x43	; 67
     56a:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D5_PORT,D5_PIN,OUT);
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	62 e0       	ldi	r22, 0x02	; 2
     572:	83 e4       	ldi	r24, 0x43	; 67
     574:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D4_PORT,D4_PIN,OUT);
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	83 e4       	ldi	r24, 0x43	; 67
     57e:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
     582:	2f eb       	ldi	r18, 0xBF	; 191
     584:	8a ed       	ldi	r24, 0xDA	; 218
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	80 40       	sbci	r24, 0x00	; 0
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <LCD_enInit+0x4c>
     590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_enInit+0x56>
     592:	00 00       	nop
	_delay_ms(35);
#if LCD_MODE==EIGHT
	DIO_SetPinDirection(D3_PORT,D3_PIN,OUT);
     594:	41 e0       	ldi	r20, 0x01	; 1
     596:	64 e0       	ldi	r22, 0x04	; 4
     598:	83 e4       	ldi	r24, 0x43	; 67
     59a:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D2_PORT,D2_PIN,OUT);
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	65 e0       	ldi	r22, 0x05	; 5
     5a2:	83 e4       	ldi	r24, 0x43	; 67
     5a4:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D1_PORT,D1_PIN,OUT);
     5a8:	41 e0       	ldi	r20, 0x01	; 1
     5aa:	66 e0       	ldi	r22, 0x06	; 6
     5ac:	83 e4       	ldi	r24, 0x43	; 67
     5ae:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	DIO_SetPinDirection(D0_PORT,D0_PIN,OUT);
     5b2:	41 e0       	ldi	r20, 0x01	; 1
     5b4:	67 e0       	ldi	r22, 0x07	; 7
     5b6:	83 e4       	ldi	r24, 0x43	; 67
     5b8:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
	
}
static inline void LCD_invidSendCommend(uint8_t _u8command)
{
	// set rw 0 as write
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	64 e0       	ldi	r22, 0x04	; 4
     5c0:	84 e4       	ldi	r24, 0x44	; 68
     5c2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// EN is low
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	63 e0       	ldi	r22, 0x03	; 3
     5ca:	84 e4       	ldi	r24, 0x44	; 68
     5cc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// set data pins
	DIO_SetPinValue(D7_PORT,D7_PIN, ((_u8command>>7)&1) );
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	83 e4       	ldi	r24, 0x43	; 67
     5d6:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	83 e4       	ldi	r24, 0x43	; 67
     5e0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
     5e4:	41 e0       	ldi	r20, 0x01	; 1
     5e6:	62 e0       	ldi	r22, 0x02	; 2
     5e8:	83 e4       	ldi	r24, 0x43	; 67
     5ea:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	63 e0       	ldi	r22, 0x03	; 3
     5f2:	83 e4       	ldi	r24, 0x43	; 67
     5f4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D3_PORT,D3_PIN, ((_u8command>>3)&1) );
     5f8:	41 e0       	ldi	r20, 0x01	; 1
     5fa:	64 e0       	ldi	r22, 0x04	; 4
     5fc:	83 e4       	ldi	r24, 0x43	; 67
     5fe:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT,D2_PIN, ((_u8command>>2)&1) );
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	65 e0       	ldi	r22, 0x05	; 5
     606:	83 e4       	ldi	r24, 0x43	; 67
     608:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT,D1_PIN, ((_u8command>>1)&1) );
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	66 e0       	ldi	r22, 0x06	; 6
     610:	83 e4       	ldi	r24, 0x43	; 67
     612:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT,D0_PIN, ((_u8command>>0)&1) );
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	67 e0       	ldi	r22, 0x07	; 7
     61a:	83 e4       	ldi	r24, 0x43	; 67
     61c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	
	// enable latch
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	63 e0       	ldi	r22, 0x03	; 3
     624:	84 e4       	ldi	r24, 0x44	; 68
     626:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     62a:	8f e1       	ldi	r24, 0x1F	; 31
     62c:	9e e4       	ldi	r25, 0x4E	; 78
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <LCD_enInit+0xf2>
     632:	00 c0       	rjmp	.+0      	; 0x634 <LCD_enInit+0xf8>
     634:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	63 e0       	ldi	r22, 0x03	; 3
     63a:	84 e4       	ldi	r24, 0x44	; 68
     63c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     640:	8f e1       	ldi	r24, 0x1F	; 31
     642:	9e e4       	ldi	r25, 0x4E	; 78
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <LCD_enInit+0x108>
     648:	00 c0       	rjmp	.+0      	; 0x64a <LCD_enInit+0x10e>
     64a:	00 00       	nop
     64c:	8f ec       	ldi	r24, 0xCF	; 207
     64e:	97 e0       	ldi	r25, 0x07	; 7
     650:	01 97       	sbiw	r24, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <LCD_enInit+0x114>
     654:	00 c0       	rjmp	.+0      	; 0x656 <LCD_enInit+0x11a>
     656:	00 00       	nop
	
}
static inline void LCD_invidSendCommend(uint8_t _u8command)
{
	// set rw 0 as write
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	64 e0       	ldi	r22, 0x04	; 4
     65c:	84 e4       	ldi	r24, 0x44	; 68
     65e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// EN is low
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	84 e4       	ldi	r24, 0x44	; 68
     668:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// set data pins
	DIO_SetPinValue(D7_PORT,D7_PIN, ((_u8command>>7)&1) );
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	83 e4       	ldi	r24, 0x43	; 67
     672:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	83 e4       	ldi	r24, 0x43	; 67
     67c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	62 e0       	ldi	r22, 0x02	; 2
     684:	83 e4       	ldi	r24, 0x43	; 67
     686:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	83 e4       	ldi	r24, 0x43	; 67
     690:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D3_PORT,D3_PIN, ((_u8command>>3)&1) );
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	64 e0       	ldi	r22, 0x04	; 4
     698:	83 e4       	ldi	r24, 0x43	; 67
     69a:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT,D2_PIN, ((_u8command>>2)&1) );
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	65 e0       	ldi	r22, 0x05	; 5
     6a2:	83 e4       	ldi	r24, 0x43	; 67
     6a4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT,D1_PIN, ((_u8command>>1)&1) );
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	66 e0       	ldi	r22, 0x06	; 6
     6ac:	83 e4       	ldi	r24, 0x43	; 67
     6ae:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT,D0_PIN, ((_u8command>>0)&1) );
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	67 e0       	ldi	r22, 0x07	; 7
     6b6:	83 e4       	ldi	r24, 0x43	; 67
     6b8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	
	// enable latch
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	63 e0       	ldi	r22, 0x03	; 3
     6c0:	84 e4       	ldi	r24, 0x44	; 68
     6c2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     6c6:	8f e1       	ldi	r24, 0x1F	; 31
     6c8:	9e e4       	ldi	r25, 0x4E	; 78
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_enInit+0x18e>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_enInit+0x194>
     6d0:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	63 e0       	ldi	r22, 0x03	; 3
     6d6:	84 e4       	ldi	r24, 0x44	; 68
     6d8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     6dc:	8f e1       	ldi	r24, 0x1F	; 31
     6de:	9e e4       	ldi	r25, 0x4E	; 78
     6e0:	01 97       	sbiw	r24, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_enInit+0x1a4>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_enInit+0x1aa>
     6e6:	00 00       	nop
     6e8:	8f ec       	ldi	r24, 0xCF	; 207
     6ea:	97 e0       	ldi	r25, 0x07	; 7
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <LCD_enInit+0x1b0>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <LCD_enInit+0x1b6>
     6f2:	00 00       	nop
	
}
static inline void LCD_invidSendCommend(uint8_t _u8command)
{
	// set rw 0 as write
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	64 e0       	ldi	r22, 0x04	; 4
     6f8:	84 e4       	ldi	r24, 0x44	; 68
     6fa:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// EN is low
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	84 e4       	ldi	r24, 0x44	; 68
     704:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// set data pins
	DIO_SetPinValue(D7_PORT,D7_PIN, ((_u8command>>7)&1) );
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	60 e0       	ldi	r22, 0x00	; 0
     70c:	83 e4       	ldi	r24, 0x43	; 67
     70e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	83 e4       	ldi	r24, 0x43	; 67
     718:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	62 e0       	ldi	r22, 0x02	; 2
     720:	83 e4       	ldi	r24, 0x43	; 67
     722:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	83 e4       	ldi	r24, 0x43	; 67
     72c:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D3_PORT,D3_PIN, ((_u8command>>3)&1) );
     730:	40 e0       	ldi	r20, 0x00	; 0
     732:	64 e0       	ldi	r22, 0x04	; 4
     734:	83 e4       	ldi	r24, 0x43	; 67
     736:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT,D2_PIN, ((_u8command>>2)&1) );
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	65 e0       	ldi	r22, 0x05	; 5
     73e:	83 e4       	ldi	r24, 0x43	; 67
     740:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT,D1_PIN, ((_u8command>>1)&1) );
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	83 e4       	ldi	r24, 0x43	; 67
     74a:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT,D0_PIN, ((_u8command>>0)&1) );
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	67 e0       	ldi	r22, 0x07	; 7
     752:	83 e4       	ldi	r24, 0x43	; 67
     754:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	
	// enable latch
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	63 e0       	ldi	r22, 0x03	; 3
     75c:	84 e4       	ldi	r24, 0x44	; 68
     75e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     762:	8f e1       	ldi	r24, 0x1F	; 31
     764:	9e e4       	ldi	r25, 0x4E	; 78
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_enInit+0x22a>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_enInit+0x230>
     76c:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	63 e0       	ldi	r22, 0x03	; 3
     772:	84 e4       	ldi	r24, 0x44	; 68
     774:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     778:	8f e1       	ldi	r24, 0x1F	; 31
     77a:	9e e4       	ldi	r25, 0x4E	; 78
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	f1 f7       	brne	.-4      	; 0x77c <LCD_enInit+0x240>
     780:	00 c0       	rjmp	.+0      	; 0x782 <LCD_enInit+0x246>
     782:	00 00       	nop
     784:	8f e9       	ldi	r24, 0x9F	; 159
     786:	9f e0       	ldi	r25, 0x0F	; 15
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <LCD_enInit+0x24c>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <LCD_enInit+0x252>
     78e:	00 00       	nop
	
}
static inline void LCD_invidSendCommend(uint8_t _u8command)
{
	// set rw 0 as write
	DIO_SetPinValue(RW_PORT,RW_PIN,LOW);
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	64 e0       	ldi	r22, 0x04	; 4
     794:	84 e4       	ldi	r24, 0x44	; 68
     796:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// EN is low
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	84 e4       	ldi	r24, 0x44	; 68
     7a0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	// set data pins
	DIO_SetPinValue(D7_PORT,D7_PIN, ((_u8command>>7)&1) );
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	83 e4       	ldi	r24, 0x43	; 67
     7aa:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D6_PORT,D6_PIN, ((_u8command>>6)&1) );
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	83 e4       	ldi	r24, 0x43	; 67
     7b4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D5_PORT,D5_PIN, ((_u8command>>5)&1) );
     7b8:	40 e0       	ldi	r20, 0x00	; 0
     7ba:	62 e0       	ldi	r22, 0x02	; 2
     7bc:	83 e4       	ldi	r24, 0x43	; 67
     7be:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D4_PORT,D4_PIN, ((_u8command>>4)&1) );
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	63 e0       	ldi	r22, 0x03	; 3
     7c6:	83 e4       	ldi	r24, 0x43	; 67
     7c8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D3_PORT,D3_PIN, ((_u8command>>3)&1) );
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	64 e0       	ldi	r22, 0x04	; 4
     7d0:	83 e4       	ldi	r24, 0x43	; 67
     7d2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D2_PORT,D2_PIN, ((_u8command>>2)&1) );
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	65 e0       	ldi	r22, 0x05	; 5
     7da:	83 e4       	ldi	r24, 0x43	; 67
     7dc:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D1_PORT,D1_PIN, ((_u8command>>1)&1) );
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	66 e0       	ldi	r22, 0x06	; 6
     7e4:	83 e4       	ldi	r24, 0x43	; 67
     7e6:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	DIO_SetPinValue(D0_PORT,D0_PIN, ((_u8command>>0)&1) );
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	67 e0       	ldi	r22, 0x07	; 7
     7ee:	83 e4       	ldi	r24, 0x43	; 67
     7f0:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	
	// enable latch
	DIO_SetPinValue(EN_PORT,EN_PIN,HIGH);
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	63 e0       	ldi	r22, 0x03	; 3
     7f8:	84 e4       	ldi	r24, 0x44	; 68
     7fa:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     7fe:	8f e1       	ldi	r24, 0x1F	; 31
     800:	9e e4       	ldi	r25, 0x4E	; 78
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	63 e0       	ldi	r22, 0x03	; 3
     80e:	84 e4       	ldi	r24, 0x44	; 68
     810:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
     814:	8f e1       	ldi	r24, 0x1F	; 31
     816:	9e e4       	ldi	r25, 0x4E	; 78
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81e:	00 00       	nop
	_delay_ms(2);
	// entry mode set (I/D)
	LCD_invidSendCommend(0x06);
	return LocalErrorstate;
	
}
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	08 95       	ret

00000824 <LCD_enDisplayChar>:

ES_t LCD_enDisplayChar(uint8_t u8name)
{
     824:	cf 93       	push	r28
     826:	c8 2f       	mov	r28, r24
	ES_t LocalErrorstate =ES_OK;
	// set rs as data
	DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	65 e0       	ldi	r22, 0x05	; 5
     82c:	84 e4       	ldi	r24, 0x44	; 68
     82e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	LCD_Latch(u8name);
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 42 02 	call	0x484	; 0x484 <LCD_Latch>
	return LocalErrorstate;
}
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <LCD_enuDisplayString>:
ES_t LCD_enuDisplayString(uint8_t*str)
{
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	ec 01       	movw	r28, r24
	ES_t LocalErrorstate =ES_OK;
	 while(*str!='\0')
     844:	03 c0       	rjmp	.+6      	; 0x84c <LCD_enuDisplayString+0xe>
	 {
		 LCD_enDisplayChar(*str);
     846:	0e 94 12 04 	call	0x824	; 0x824 <LCD_enDisplayChar>
		 str++;
     84a:	21 96       	adiw	r28, 0x01	; 1
	return LocalErrorstate;
}
ES_t LCD_enuDisplayString(uint8_t*str)
{
	ES_t LocalErrorstate =ES_OK;
	 while(*str!='\0')
     84c:	88 81       	ld	r24, Y
     84e:	81 11       	cpse	r24, r1
     850:	fa cf       	rjmp	.-12     	; 0x846 <LCD_enuDisplayString+0x8>
	 {
		 LCD_enDisplayChar(*str);
		 str++;
	 }
	return LocalErrorstate;
}
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <LCD_enDisplayNum>:
ES_t LCD_enDisplayNum(s32 s32num)
{
     85a:	bf 92       	push	r11
     85c:	cf 92       	push	r12
     85e:	df 92       	push	r13
     860:	ef 92       	push	r14
     862:	ff 92       	push	r15
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
	ES_t LocalErrorstate= ES_OK;
	s32 LocalReverse=0;
	uint8_t Numdigit=0;
     86c:	c0 e0       	ldi	r28, 0x00	; 0
	return LocalErrorstate;
}
ES_t LCD_enDisplayNum(s32 s32num)
{
	ES_t LocalErrorstate= ES_OK;
	s32 LocalReverse=0;
     86e:	c1 2c       	mov	r12, r1
     870:	d1 2c       	mov	r13, r1
     872:	76 01       	movw	r14, r12
	uint8_t Numdigit=0;
	uint8_t LocalRemiander=0;
	// reverse number
	while(s32num)
     874:	21 c0       	rjmp	.+66     	; 0x8b8 <__stack+0x59>
	{
		LocalRemiander = s32num % 10;
     876:	2a e0       	ldi	r18, 0x0A	; 10
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodsi4>
		LocalReverse = LocalReverse*10 + LocalRemiander;
     882:	cc 0c       	add	r12, r12
     884:	dd 1c       	adc	r13, r13
     886:	ee 1c       	adc	r14, r14
     888:	ff 1c       	adc	r15, r15
     88a:	d7 01       	movw	r26, r14
     88c:	c6 01       	movw	r24, r12
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	88 0f       	add	r24, r24
     898:	99 1f       	adc	r25, r25
     89a:	aa 1f       	adc	r26, r26
     89c:	bb 1f       	adc	r27, r27
     89e:	c8 0e       	add	r12, r24
     8a0:	d9 1e       	adc	r13, r25
     8a2:	ea 1e       	adc	r14, r26
     8a4:	fb 1e       	adc	r15, r27
     8a6:	c6 0e       	add	r12, r22
     8a8:	d1 1c       	adc	r13, r1
     8aa:	e1 1c       	adc	r14, r1
     8ac:	f1 1c       	adc	r15, r1
		s32num /=10;
     8ae:	62 2f       	mov	r22, r18
     8b0:	73 2f       	mov	r23, r19
     8b2:	84 2f       	mov	r24, r20
     8b4:	95 2f       	mov	r25, r21
		Numdigit++;
     8b6:	cf 5f       	subi	r28, 0xFF	; 255
	ES_t LocalErrorstate= ES_OK;
	s32 LocalReverse=0;
	uint8_t Numdigit=0;
	uint8_t LocalRemiander=0;
	// reverse number
	while(s32num)
     8b8:	61 15       	cp	r22, r1
     8ba:	71 05       	cpc	r23, r1
     8bc:	81 05       	cpc	r24, r1
     8be:	91 05       	cpc	r25, r1
     8c0:	d1 f6       	brne	.-76     	; 0x876 <__stack+0x17>
     8c2:	1b c0       	rjmp	.+54     	; 0x8fa <__stack+0x9b>
		Numdigit++;
	}
	// display num
	while(Numdigit)
	{
		LocalRemiander = LocalReverse%10;
     8c4:	c7 01       	movw	r24, r14
     8c6:	b6 01       	movw	r22, r12
     8c8:	2a e0       	ldi	r18, 0x0A	; 10
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__divmodsi4>
     8d4:	b2 2e       	mov	r11, r18
     8d6:	03 2f       	mov	r16, r19
     8d8:	14 2f       	mov	r17, r20
     8da:	d5 2f       	mov	r29, r21
     8dc:	f6 2e       	mov	r15, r22
		DIO_SetPinValue(RS_PORT,RS_PIN,HIGH);
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	65 e0       	ldi	r22, 0x05	; 5
     8e2:	84 e4       	ldi	r24, 0x44	; 68
     8e4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
		LCD_Latch(LocalRemiander + '0');
     8e8:	80 e3       	ldi	r24, 0x30	; 48
     8ea:	8f 0d       	add	r24, r15
     8ec:	0e 94 42 02 	call	0x484	; 0x484 <LCD_Latch>
		LocalReverse /=10;
     8f0:	cb 2c       	mov	r12, r11
     8f2:	d0 2e       	mov	r13, r16
     8f4:	e1 2e       	mov	r14, r17
     8f6:	fd 2e       	mov	r15, r29
		Numdigit--;
     8f8:	c1 50       	subi	r28, 0x01	; 1
		LocalReverse = LocalReverse*10 + LocalRemiander;
		s32num /=10;
		Numdigit++;
	}
	// display num
	while(Numdigit)
     8fa:	c1 11       	cpse	r28, r1
     8fc:	e3 cf       	rjmp	.-58     	; 0x8c4 <__stack+0x65>
		Numdigit--;
	}
	
	
	return LocalErrorstate;
}
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	08 95       	ret

00000914 <LCD_enSendCommand>:

ES_t LCD_enSendCommand(uint8_t _u8command)
{
     914:	cf 93       	push	r28
     916:	c8 2f       	mov	r28, r24
    ES_t LocalErrorstate= ES_OK;
	// set rs  as command
	DIO_SetPinValue(RS_PORT,RS_PIN,LOW);
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	65 e0       	ldi	r22, 0x05	; 5
     91c:	84 e4       	ldi	r24, 0x44	; 68
     91e:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
	LCD_Latch(_u8command);
     922:	8c 2f       	mov	r24, r28
     924:	0e 94 42 02 	call	0x484	; 0x484 <LCD_Latch>
	
	return LocalErrorstate;
}
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <LCD_goto>:
	_delay_ms(10);
	DIO_SetPinValue(EN_PORT,EN_PIN,LOW);
	_delay_ms(10);
}
ES_t LCD_goto(uint8_t x,uint8_t y)
{
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <LCD_goto+0x6>
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
	ES_t Local=ES_OK;
	uint8_t Local_u8RowLocation [] = {FORCE_CURSOR_START_FIRST_LINE , FORCE_CURSOR_START_SECOND_LINE};
     938:	90 e8       	ldi	r25, 0x80	; 128
     93a:	99 83       	std	Y+1, r25	; 0x01
     93c:	90 ec       	ldi	r25, 0xC0	; 192
     93e:	9a 83       	std	Y+2, r25	; 0x02
	LCD_enSendCommand(Local_u8RowLocation [x-LCD_ONE]+(y-LCD_ONE));
     940:	e8 2f       	mov	r30, r24
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	31 97       	sbiw	r30, 0x01	; 1
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	8c 0f       	add	r24, r28
     94c:	9d 1f       	adc	r25, r29
     94e:	e8 0f       	add	r30, r24
     950:	f9 1f       	adc	r31, r25
     952:	80 81       	ld	r24, Z
     954:	86 0f       	add	r24, r22
     956:	81 50       	subi	r24, 0x01	; 1
     958:	0e 94 8a 04 	call	0x914	; 0x914 <LCD_enSendCommand>
	return Local;
}
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <LDR_enuInit>:
	ADC_enStartConversion();
	ADC_enPollingSystem();
	ADC_enReadHighValue(&_Vout);
	_Vout = (_Vout/1024)*5;
	*Copy_u16value = (_Vout*1000)/(5-_Vout);
}
     968:	cf 93       	push	r28
     96a:	c8 2f       	mov	r28, r24
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	68 2f       	mov	r22, r24
     970:	81 e4       	ldi	r24, 0x41	; 65
     972:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
     976:	c8 30       	cpi	r28, 0x08	; 8
     978:	28 f4       	brcc	.+10     	; 0x984 <LDR_enuInit+0x1c>
     97a:	8c 2f       	mov	r24, r28
     97c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ADC_SelectChannel>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	01 c0       	rjmp	.+2      	; 0x986 <LDR_enuInit+0x1e>
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <LDR_SychVoltageValue>:

void LDR_SychVoltageValue(u16_t*Copy_u16value)
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
	u16_t _Vin;
	ADC_enStartConversion();
     990:	0e 94 bb 05 	call	0xb76	; 0xb76 <ADC_enStartConversion>
	ADC_enPollingSystem();
     994:	0e 94 c0 05 	call	0xb80	; 0xb80 <ADC_enPollingSystem>
	ADC_enReadHighValue(Copy_u16value);
     998:	ce 01       	movw	r24, r28
     99a:	0e 94 c4 05 	call	0xb88	; 0xb88 <ADC_enReadHighValue>
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <led_init>:
#include "Led_priv.h"
#include "../../MCAL/DIO/DI0_interface.h"
//#include "Led_interface.h"
ES_t led_init(uint8_t ledport,uint8_t ledpin){
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     9a4:	9f eb       	ldi	r25, 0xBF	; 191
     9a6:	98 0f       	add	r25, r24
     9a8:	94 30       	cpi	r25, 0x04	; 4
     9aa:	28 f4       	brcc	.+10     	; 0x9b6 <led_init+0x12>
	{
		DIO_SetPinDirection(ledport,ledpin,OUT);
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
		LocalErrorstate=ES_OK;
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     9b6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return LocalErrorstate;
}
     9b8:	08 95       	ret

000009ba <led_on>:
ES_t led_on(uint8_t ledport,uint8_t ledpin,uint8_t type_connection)
{
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     9ba:	9f eb       	ldi	r25, 0xBF	; 191
     9bc:	98 0f       	add	r25, r24
     9be:	94 30       	cpi	r25, 0x04	; 4
     9c0:	60 f4       	brcc	.+24     	; 0x9da <led_on+0x20>
	{
		if(type_connection==source)//source
     9c2:	48 30       	cpi	r20, 0x08	; 8
     9c4:	29 f4       	brne	.+10     	; 0x9d0 <led_on+0x16>
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
		}
		else
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
		}
		LocalErrorstate=ES_OK;
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	08 95       	ret
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		else
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
		}
		LocalErrorstate=ES_OK;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     9da:	80 e0       	ldi	r24, 0x00	; 0
	}
	return LocalErrorstate;
}
     9dc:	08 95       	ret

000009de <led_of>:
ES_t led_of(uint8_t ledport,uint8_t ledpin,uint8_t type_connection)
{
	ES_t LocalErrorstate;
	if(ledport>='A' && ledport<='D')
     9de:	9f eb       	ldi	r25, 0xBF	; 191
     9e0:	98 0f       	add	r25, r24
     9e2:	94 30       	cpi	r25, 0x04	; 4
     9e4:	70 f4       	brcc	.+28     	; 0xa02 <led_of+0x24>
	{
		if(type_connection==source)//source
     9e6:	48 30       	cpi	r20, 0x08	; 8
     9e8:	29 f4       	brne	.+10     	; 0x9f4 <led_of+0x16>
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	08 95       	ret
	{
		if(type_connection==source)//source
		{
			DIO_SetPinValue(ledport,ledpin,LOW);
		}
		else if(type_connection==sink)
     9f4:	49 30       	cpi	r20, 0x09	; 9
     9f6:	39 f4       	brne	.+14     	; 0xa06 <led_of+0x28>
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_SetPinValue>
		}
		LocalErrorstate=ES_OK;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	08 95       	ret
	}
	else
	{
		LocalErrorstate=ES_NOK;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
		}
		else if(type_connection==sink)
		{
			DIO_SetPinValue(ledport,ledpin,HIGH);
		}
		LocalErrorstate=ES_OK;
     a06:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LocalErrorstate=ES_NOK;
	}
	return LocalErrorstate;
}
     a08:	08 95       	ret

00000a0a <Temp_enuInit>:
{
	ADC_enEnableInterruptMode();
	ADC_enEnableTriggeringMode(EX_IN);
	ADC_enCallBack(&read,Tem_value);
	ADC_enStartConversion();
}
     a0a:	cf 93       	push	r28
     a0c:	c8 2f       	mov	r28, r24
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	68 2f       	mov	r22, r24
     a12:	81 e4       	ldi	r24, 0x41	; 65
     a14:	0e 94 1a 06 	call	0xc34	; 0xc34 <DIO_SetPinDirection>
     a18:	c8 30       	cpi	r28, 0x08	; 8
     a1a:	28 f4       	brcc	.+10     	; 0xa26 <Temp_enuInit+0x1c>
     a1c:	8c 2f       	mov	r24, r28
     a1e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ADC_SelectChannel>
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <Temp_enuInit+0x1e>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <Temp_enuSychGetTemp_val>:
void Temp_enuSychGetTemp_val(u16_t*Tem_value)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	ec 01       	movw	r28, r24
	ADC_enStartConversion();
     a32:	0e 94 bb 05 	call	0xb76	; 0xb76 <ADC_enStartConversion>
	ADC_enPollingSystem();
     a36:	0e 94 c0 05 	call	0xb80	; 0xb80 <ADC_enPollingSystem>
	ADC_enReadHighValue(Tem_value);
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 c4 05 	call	0xb88	; 0xb88 <ADC_enReadHighValue>
	*Tem_value = ((*Tem_value)*MAX_ADC*1000ul)/MAX_ADC_RES;
     a40:	28 81       	ld	r18, Y
     a42:	39 81       	ldd	r19, Y+1	; 0x01
     a44:	c9 01       	movw	r24, r18
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	28 0f       	add	r18, r24
     a50:	39 1f       	adc	r19, r25
     a52:	a8 ee       	ldi	r26, 0xE8	; 232
     a54:	b3 e0       	ldi	r27, 0x03	; 3
     a56:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__umulhisi3>
     a5a:	26 ef       	ldi	r18, 0xF6	; 246
     a5c:	37 e2       	ldi	r19, 0x27	; 39
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 9f 0b 	call	0x173e	; 0x173e <__udivmodsi4>
     a66:	39 83       	std	Y+1, r19	; 0x01
     a68:	28 83       	st	Y, r18
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <main>:
#include "APP/Slave_Mode.h"

int main(void)
{

		 if(ES_OK==Check_Connection())
     a70:	0e 94 10 01 	call	0x220	; 0x220 <Check_Connection>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	11 f4       	brne	.+4      	; 0xa7c <main+0xc>
		 {
			OPEN_SmartHome();
     a78:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <OPEN_SmartHome>
		 }
     
			
		 
		
}
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	08 95       	ret

00000a82 <ADC_euInit>:
		INT0_ADC = Localptrfunc;
		ADC_pvoid = Localptr;
	}
	
	return LocalErrorState;
}
     a82:	96 b1       	in	r25, 0x06	; 6
     a84:	90 68       	ori	r25, 0x80	; 128
     a86:	96 b9       	out	0x06, r25	; 6
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	89 f0       	breq	.+34     	; 0xaae <ADC_euInit+0x2c>
     a8c:	48 f0       	brcs	.+18     	; 0xaa0 <ADC_euInit+0x1e>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	a1 f4       	brne	.+40     	; 0xaba <ADC_euInit+0x38>
     a92:	87 b1       	in	r24, 0x07	; 7
     a94:	8f 7b       	andi	r24, 0xBF	; 191
     a96:	87 b9       	out	0x07, r24	; 7
     a98:	87 b1       	in	r24, 0x07	; 7
     a9a:	8f 77       	andi	r24, 0x7F	; 127
     a9c:	87 b9       	out	0x07, r24	; 7
     a9e:	0d c0       	rjmp	.+26     	; 0xaba <ADC_euInit+0x38>
     aa0:	87 b1       	in	r24, 0x07	; 7
     aa2:	8f 77       	andi	r24, 0x7F	; 127
     aa4:	87 b9       	out	0x07, r24	; 7
     aa6:	87 b1       	in	r24, 0x07	; 7
     aa8:	80 64       	ori	r24, 0x40	; 64
     aaa:	87 b9       	out	0x07, r24	; 7
     aac:	06 c0       	rjmp	.+12     	; 0xaba <ADC_euInit+0x38>
     aae:	87 b1       	in	r24, 0x07	; 7
     ab0:	80 68       	ori	r24, 0x80	; 128
     ab2:	87 b9       	out	0x07, r24	; 7
     ab4:	87 b1       	in	r24, 0x07	; 7
     ab6:	80 64       	ori	r24, 0x40	; 64
     ab8:	87 b9       	out	0x07, r24	; 7
     aba:	41 30       	cpi	r20, 0x01	; 1
     abc:	71 f0       	breq	.+28     	; 0xada <ADC_euInit+0x58>
     abe:	18 f0       	brcs	.+6      	; 0xac6 <ADC_euInit+0x44>
     ac0:	42 30       	cpi	r20, 0x02	; 2
     ac2:	a9 f0       	breq	.+42     	; 0xaee <ADC_euInit+0x6c>
     ac4:	1d c0       	rjmp	.+58     	; 0xb00 <ADC_euInit+0x7e>
     ac6:	86 b1       	in	r24, 0x06	; 6
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	86 b9       	out	0x06, r24	; 6
     acc:	86 b1       	in	r24, 0x06	; 6
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	86 b9       	out	0x06, r24	; 6
     ad2:	86 b1       	in	r24, 0x06	; 6
     ad4:	8b 7f       	andi	r24, 0xFB	; 251
     ad6:	86 b9       	out	0x06, r24	; 6
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <ADC_euInit+0x7e>
     ada:	86 b1       	in	r24, 0x06	; 6
     adc:	8e 7f       	andi	r24, 0xFE	; 254
     ade:	86 b9       	out	0x06, r24	; 6
     ae0:	86 b1       	in	r24, 0x06	; 6
     ae2:	8d 7f       	andi	r24, 0xFD	; 253
     ae4:	86 b9       	out	0x06, r24	; 6
     ae6:	86 b1       	in	r24, 0x06	; 6
     ae8:	84 60       	ori	r24, 0x04	; 4
     aea:	86 b9       	out	0x06, r24	; 6
     aec:	09 c0       	rjmp	.+18     	; 0xb00 <ADC_euInit+0x7e>
     aee:	86 b1       	in	r24, 0x06	; 6
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	86 b9       	out	0x06, r24	; 6
     af4:	86 b1       	in	r24, 0x06	; 6
     af6:	8d 7f       	andi	r24, 0xFD	; 253
     af8:	86 b9       	out	0x06, r24	; 6
     afa:	86 b1       	in	r24, 0x06	; 6
     afc:	84 60       	ori	r24, 0x04	; 4
     afe:	86 b9       	out	0x06, r24	; 6
     b00:	61 11       	cpse	r22, r1
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <ADC_euInit+0x8a>
     b04:	87 b1       	in	r24, 0x07	; 7
     b06:	8f 7d       	andi	r24, 0xDF	; 223
     b08:	87 b9       	out	0x07, r24	; 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <ADC_euInit+0x94>
     b0c:	61 30       	cpi	r22, 0x01	; 1
     b0e:	19 f4       	brne	.+6      	; 0xb16 <ADC_euInit+0x94>
     b10:	87 b1       	in	r24, 0x07	; 7
     b12:	80 62       	ori	r24, 0x20	; 32
     b14:	87 b9       	out	0x07, r24	; 7
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret

00000b1a <ADC_SelectChannel>:
     b1a:	e8 2f       	mov	r30, r24
     b1c:	87 b1       	in	r24, 0x07	; 7
     b1e:	80 7e       	andi	r24, 0xE0	; 224
     b20:	87 b9       	out	0x07, r24	; 7
     b22:	8e 2f       	mov	r24, r30
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	88 30       	cpi	r24, 0x08	; 8
     b28:	91 05       	cpc	r25, r1
     b2a:	18 f5       	brcc	.+70     	; 0xb72 <ADC_SelectChannel+0x58>
     b2c:	fc 01       	movw	r30, r24
     b2e:	e6 5d       	subi	r30, 0xD6	; 214
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__tablejump2__>
     b36:	87 b1       	in	r24, 0x07	; 7
     b38:	87 b9       	out	0x07, r24	; 7
     b3a:	1b c0       	rjmp	.+54     	; 0xb72 <ADC_SelectChannel+0x58>
     b3c:	87 b1       	in	r24, 0x07	; 7
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	87 b9       	out	0x07, r24	; 7
     b42:	17 c0       	rjmp	.+46     	; 0xb72 <ADC_SelectChannel+0x58>
     b44:	87 b1       	in	r24, 0x07	; 7
     b46:	82 60       	ori	r24, 0x02	; 2
     b48:	87 b9       	out	0x07, r24	; 7
     b4a:	13 c0       	rjmp	.+38     	; 0xb72 <ADC_SelectChannel+0x58>
     b4c:	87 b1       	in	r24, 0x07	; 7
     b4e:	83 60       	ori	r24, 0x03	; 3
     b50:	87 b9       	out	0x07, r24	; 7
     b52:	0f c0       	rjmp	.+30     	; 0xb72 <ADC_SelectChannel+0x58>
     b54:	87 b1       	in	r24, 0x07	; 7
     b56:	84 60       	ori	r24, 0x04	; 4
     b58:	87 b9       	out	0x07, r24	; 7
     b5a:	0b c0       	rjmp	.+22     	; 0xb72 <ADC_SelectChannel+0x58>
     b5c:	87 b1       	in	r24, 0x07	; 7
     b5e:	85 60       	ori	r24, 0x05	; 5
     b60:	87 b9       	out	0x07, r24	; 7
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <ADC_SelectChannel+0x58>
     b64:	87 b1       	in	r24, 0x07	; 7
     b66:	86 60       	ori	r24, 0x06	; 6
     b68:	87 b9       	out	0x07, r24	; 7
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <ADC_SelectChannel+0x58>
     b6c:	87 b1       	in	r24, 0x07	; 7
     b6e:	87 60       	ori	r24, 0x07	; 7
     b70:	87 b9       	out	0x07, r24	; 7
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	08 95       	ret

00000b76 <ADC_enStartConversion>:
     b76:	86 b1       	in	r24, 0x06	; 6
     b78:	80 64       	ori	r24, 0x40	; 64
     b7a:	86 b9       	out	0x06, r24	; 6
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 95       	ret

00000b80 <ADC_enPollingSystem>:
     b80:	34 9b       	sbis	0x06, 4	; 6
     b82:	fe cf       	rjmp	.-4      	; 0xb80 <ADC_enPollingSystem>
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	08 95       	ret

00000b88 <ADC_enReadHighValue>:
     b88:	fc 01       	movw	r30, r24
     b8a:	3d 99       	sbic	0x07, 5	; 7
     b8c:	0f c0       	rjmp	.+30     	; 0xbac <ADC_enReadHighValue+0x24>
     b8e:	24 b1       	in	r18, 0x04	; 4
     b90:	42 2f       	mov	r20, r18
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	51 83       	std	Z+1, r21	; 0x01
     b96:	40 83       	st	Z, r20
     b98:	95 b1       	in	r25, 0x05	; 5
     b9a:	29 2f       	mov	r18, r25
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	32 2f       	mov	r19, r18
     ba0:	22 27       	eor	r18, r18
     ba2:	24 2b       	or	r18, r20
     ba4:	35 2b       	or	r19, r21
     ba6:	31 83       	std	Z+1, r19	; 0x01
     ba8:	20 83       	st	Z, r18
     baa:	14 c0       	rjmp	.+40     	; 0xbd4 <ADC_enReadHighValue+0x4c>
     bac:	3d 9b       	sbis	0x07, 5	; 7
     bae:	12 c0       	rjmp	.+36     	; 0xbd4 <ADC_enReadHighValue+0x4c>
     bb0:	24 b1       	in	r18, 0x04	; 4
     bb2:	22 95       	swap	r18
     bb4:	26 95       	lsr	r18
     bb6:	26 95       	lsr	r18
     bb8:	23 70       	andi	r18, 0x03	; 3
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	31 83       	std	Z+1, r19	; 0x01
     bbe:	20 83       	st	Z, r18
     bc0:	85 b1       	in	r24, 0x05	; 5
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	28 2b       	or	r18, r24
     bce:	39 2b       	or	r19, r25
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	86 b1       	in	r24, 0x06	; 6
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	86 b9       	out	0x06, r24	; 6
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret

00000bde <__vector_16>:

ISR(VECT_ADC)
{
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	INT0_ADC(ADC_pvoid);
     c00:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <INT0_ADC>
     c04:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <INT0_ADC+0x1>
     c08:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     c0c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
     c10:	09 95       	icall
}
     c12:	ff 91       	pop	r31
     c14:	ef 91       	pop	r30
     c16:	bf 91       	pop	r27
     c18:	af 91       	pop	r26
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	7f 91       	pop	r23
     c20:	6f 91       	pop	r22
     c22:	5f 91       	pop	r21
     c24:	4f 91       	pop	r20
     c26:	3f 91       	pop	r19
     c28:	2f 91       	pop	r18
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	0f 90       	pop	r0
     c30:	1f 90       	pop	r1
     c32:	18 95       	reti

00000c34 <DIO_SetPinDirection>:
	return Local_enErrorstate;
}
ES_t DIO_SetPinDirection(uint8_t portnumber,uint8_t pinnumber,uint8_t direction)
{
	ES_t Local_Errorstate;
	if(portnumber>='A' && portnumber<='D' && direction<=OUT)
     c34:	9f eb       	ldi	r25, 0xBF	; 191
     c36:	98 0f       	add	r25, r24
     c38:	94 30       	cpi	r25, 0x04	; 4
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <DIO_SetPinDirection+0xa>
     c3c:	86 c0       	rjmp	.+268    	; 0xd4a <DIO_SetPinDirection+0x116>
     c3e:	42 30       	cpi	r20, 0x02	; 2
     c40:	08 f0       	brcs	.+2      	; 0xc44 <DIO_SetPinDirection+0x10>
     c42:	85 c0       	rjmp	.+266    	; 0xd4e <DIO_SetPinDirection+0x11a>
	{
	 switch(portnumber)
     c44:	82 34       	cpi	r24, 0x42	; 66
     c46:	49 f1       	breq	.+82     	; 0xc9a <DIO_SetPinDirection+0x66>
     c48:	18 f4       	brcc	.+6      	; 0xc50 <DIO_SetPinDirection+0x1c>
     c4a:	81 34       	cpi	r24, 0x41	; 65
     c4c:	41 f0       	breq	.+16     	; 0xc5e <DIO_SetPinDirection+0x2a>
     c4e:	81 c0       	rjmp	.+258    	; 0xd52 <DIO_SetPinDirection+0x11e>
     c50:	83 34       	cpi	r24, 0x43	; 67
     c52:	09 f4       	brne	.+2      	; 0xc56 <DIO_SetPinDirection+0x22>
     c54:	40 c0       	rjmp	.+128    	; 0xcd6 <DIO_SetPinDirection+0xa2>
     c56:	84 34       	cpi	r24, 0x44	; 68
     c58:	09 f4       	brne	.+2      	; 0xc5c <DIO_SetPinDirection+0x28>
     c5a:	5a c0       	rjmp	.+180    	; 0xd10 <DIO_SetPinDirection+0xdc>
     c5c:	7a c0       	rjmp	.+244    	; 0xd52 <DIO_SetPinDirection+0x11e>
	 {
		case PORT_A:
		    if(direction==IN)
     c5e:	41 11       	cpse	r20, r1
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <DIO_SetPinDirection+0x48>
			{
				DDRA &= ~(1<<pinnumber);
     c62:	2a b3       	in	r18, 0x1a	; 26
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_SetPinDirection+0x3a>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	6a 95       	dec	r22
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_SetPinDirection+0x36>
     c72:	80 95       	com	r24
     c74:	82 23       	and	r24, r18
     c76:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	08 95       	ret
		case PORT_A:
		    if(direction==IN)
			{
				DDRA &= ~(1<<pinnumber);
			}
			else if(direction==OUT)
     c7c:	41 30       	cpi	r20, 0x01	; 1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <DIO_SetPinDirection+0x4e>
     c80:	6a c0       	rjmp	.+212    	; 0xd56 <DIO_SetPinDirection+0x122>
			{
				DDRA |=(1<<pinnumber);
     c82:	2a b3       	in	r18, 0x1a	; 26
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <DIO_SetPinDirection+0x5a>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	6a 95       	dec	r22
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <DIO_SetPinDirection+0x56>
     c92:	82 2b       	or	r24, r18
     c94:	8a bb       	out	0x1a, r24	; 26
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	08 95       	ret
			{
				DDRA |=(1<<pinnumber);
			}
		break;
		case PORT_B:
		    if(direction==IN)
     c9a:	41 11       	cpse	r20, r1
     c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <DIO_SetPinDirection+0x84>
		    {
			    DDRB &= ~(1<<pinnumber);
     c9e:	27 b3       	in	r18, 0x17	; 23
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_SetPinDirection+0x76>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	6a 95       	dec	r22
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_SetPinDirection+0x72>
     cae:	80 95       	com	r24
     cb0:	82 23       	and	r24, r18
     cb2:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	08 95       	ret
		case PORT_B:
		    if(direction==IN)
		    {
			    DDRB &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     cb8:	41 30       	cpi	r20, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <DIO_SetPinDirection+0x8a>
     cbc:	4e c0       	rjmp	.+156    	; 0xd5a <DIO_SetPinDirection+0x126>
		    {
			    DDRB |=(1<<pinnumber);
     cbe:	27 b3       	in	r18, 0x17	; 23
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_SetPinDirection+0x96>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	6a 95       	dec	r22
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_SetPinDirection+0x92>
     cce:	82 2b       	or	r24, r18
     cd0:	87 bb       	out	0x17, r24	; 23
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	08 95       	ret
		    {
			    DDRB |=(1<<pinnumber);
		    }
		break;
		case PORT_C:
		    if(direction==IN)
     cd6:	41 11       	cpse	r20, r1
     cd8:	0d c0       	rjmp	.+26     	; 0xcf4 <DIO_SetPinDirection+0xc0>
		    {
			    DDRC &= ~(1<<pinnumber);
     cda:	24 b3       	in	r18, 0x14	; 20
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <DIO_SetPinDirection+0xb2>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	6a 95       	dec	r22
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <DIO_SetPinDirection+0xae>
     cea:	80 95       	com	r24
     cec:	82 23       	and	r24, r18
     cee:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	08 95       	ret
		case PORT_C:
		    if(direction==IN)
		    {
			    DDRC &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     cf4:	41 30       	cpi	r20, 0x01	; 1
     cf6:	99 f5       	brne	.+102    	; 0xd5e <DIO_SetPinDirection+0x12a>
		    {
			    DDRC |=(1<<pinnumber);
     cf8:	24 b3       	in	r18, 0x14	; 20
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_SetPinDirection+0xd0>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	6a 95       	dec	r22
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_SetPinDirection+0xcc>
     d08:	82 2b       	or	r24, r18
     d0a:	84 bb       	out	0x14, r24	; 20
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	08 95       	ret
		    {
			    DDRC |=(1<<pinnumber);
		    }
		break;
		case PORT_D:
		    if(direction==IN)
     d10:	41 11       	cpse	r20, r1
     d12:	0d c0       	rjmp	.+26     	; 0xd2e <DIO_SetPinDirection+0xfa>
		    {
			    DDRD &= ~(1<<pinnumber);
     d14:	21 b3       	in	r18, 0x11	; 17
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_SetPinDirection+0xec>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	6a 95       	dec	r22
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_SetPinDirection+0xe8>
     d24:	80 95       	com	r24
     d26:	82 23       	and	r24, r18
     d28:	81 bb       	out	0x11, r24	; 17
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	08 95       	ret
		case PORT_D:
		    if(direction==IN)
		    {
			    DDRD &= ~(1<<pinnumber);
		    }
		    else if(direction==OUT)
     d2e:	41 30       	cpi	r20, 0x01	; 1
     d30:	c1 f4       	brne	.+48     	; 0xd62 <DIO_SetPinDirection+0x12e>
		    {
			    DDRD |=(1<<pinnumber);
     d32:	21 b3       	in	r18, 0x11	; 17
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_SetPinDirection+0x10a>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	6a 95       	dec	r22
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_SetPinDirection+0x106>
     d42:	82 2b       	or	r24, r18
     d44:	81 bb       	out	0x11, r24	; 17
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret
  }
  else
  {
	  Local_Errorstate = ES_NOK;
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	08 95       	ret
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret
		    {
			    DDRD |=(1<<pinnumber);
		    }
		break; 
	}
	Local_Errorstate =ES_OK;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	08 95       	ret
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	08 95       	ret
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	08 95       	ret
     d62:	81 e0       	ldi	r24, 0x01	; 1
  else
  {
	  Local_Errorstate = ES_NOK;
  }
  return Local_Errorstate;
}
     d64:	08 95       	ret

00000d66 <DIO_SetPinValue>:
ES_t DIO_SetPinValue(uint8_t portnumber,uint8_t pinnumber,uint8_t value)
{
	ES_t Local_Errorstate;
    if(portnumber>='A' && portnumber<='D' && value<=OUT)
     d66:	9f eb       	ldi	r25, 0xBF	; 191
     d68:	98 0f       	add	r25, r24
     d6a:	94 30       	cpi	r25, 0x04	; 4
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <DIO_SetPinValue+0xa>
     d6e:	6b c0       	rjmp	.+214    	; 0xe46 <DIO_SetPinValue+0xe0>
     d70:	42 30       	cpi	r20, 0x02	; 2
     d72:	08 f0       	brcs	.+2      	; 0xd76 <DIO_SetPinValue+0x10>
     d74:	6a c0       	rjmp	.+212    	; 0xe4a <DIO_SetPinValue+0xe4>
    {
		switch(portnumber)
     d76:	82 34       	cpi	r24, 0x42	; 66
     d78:	09 f1       	breq	.+66     	; 0xdbc <DIO_SetPinValue+0x56>
     d7a:	18 f4       	brcc	.+6      	; 0xd82 <DIO_SetPinValue+0x1c>
     d7c:	81 34       	cpi	r24, 0x41	; 65
     d7e:	39 f0       	breq	.+14     	; 0xd8e <DIO_SetPinValue+0x28>
     d80:	66 c0       	rjmp	.+204    	; 0xe4e <DIO_SetPinValue+0xe8>
     d82:	83 34       	cpi	r24, 0x43	; 67
     d84:	91 f1       	breq	.+100    	; 0xdea <DIO_SetPinValue+0x84>
     d86:	84 34       	cpi	r24, 0x44	; 68
     d88:	09 f4       	brne	.+2      	; 0xd8c <DIO_SetPinValue+0x26>
     d8a:	46 c0       	rjmp	.+140    	; 0xe18 <DIO_SetPinValue+0xb2>
     d8c:	60 c0       	rjmp	.+192    	; 0xe4e <DIO_SetPinValue+0xe8>
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
     d8e:	2b b3       	in	r18, 0x1b	; 27
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	06 2e       	mov	r0, r22
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_SetPinValue+0x36>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_SetPinValue+0x32>
     da0:	80 95       	com	r24
     da2:	82 23       	and	r24, r18
     da4:	8b bb       	out	0x1b, r24	; 27
				PORTA |=(value<<pinnumber);	
     da6:	8b b3       	in	r24, 0x1b	; 27
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_SetPinValue+0x4a>
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	6a 95       	dec	r22
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_SetPinValue+0x46>
     db4:	48 2b       	or	r20, r24
     db6:	4b bb       	out	0x1b, r20	; 27
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     db8:	81 e0       	ldi	r24, 0x01	; 1
		switch(portnumber)
		{
			case PORT_A:
				PORTA &=~(1<<pinnumber);//Mask
				PORTA |=(value<<pinnumber);	
			    break;
     dba:	08 95       	ret
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
     dbc:	28 b3       	in	r18, 0x18	; 24
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	06 2e       	mov	r0, r22
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_SetPinValue+0x64>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_SetPinValue+0x60>
     dce:	80 95       	com	r24
     dd0:	82 23       	and	r24, r18
     dd2:	88 bb       	out	0x18, r24	; 24
				PORTB |=(value<<pinnumber);
     dd4:	88 b3       	in	r24, 0x18	; 24
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_SetPinValue+0x78>
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_SetPinValue+0x74>
     de2:	48 2b       	or	r20, r24
     de4:	48 bb       	out	0x18, r20	; 24
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     de6:	81 e0       	ldi	r24, 0x01	; 1
				PORTA |=(value<<pinnumber);	
			    break;
			case PORT_B:
				PORTB &=~(1<<pinnumber);//Mask
				PORTB |=(value<<pinnumber);
				break;
     de8:	08 95       	ret
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
     dea:	25 b3       	in	r18, 0x15	; 21
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	06 2e       	mov	r0, r22
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_SetPinValue+0x92>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_SetPinValue+0x8e>
     dfc:	80 95       	com	r24
     dfe:	82 23       	and	r24, r18
     e00:	85 bb       	out	0x15, r24	; 21
				PORTC |=(value<<pinnumber);
     e02:	85 b3       	in	r24, 0x15	; 21
     e04:	50 e0       	ldi	r21, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_SetPinValue+0xa6>
     e08:	44 0f       	add	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_SetPinValue+0xa2>
     e10:	48 2b       	or	r20, r24
     e12:	45 bb       	out	0x15, r20	; 21
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     e14:	81 e0       	ldi	r24, 0x01	; 1
				PORTB |=(value<<pinnumber);
				break;
			case PORT_C:
				PORTC &=~(1<<pinnumber);//Mask
				PORTC |=(value<<pinnumber);
				break;
     e16:	08 95       	ret
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
     e18:	22 b3       	in	r18, 0x12	; 18
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	06 2e       	mov	r0, r22
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_SetPinValue+0xc0>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_SetPinValue+0xbc>
     e2a:	80 95       	com	r24
     e2c:	82 23       	and	r24, r18
     e2e:	82 bb       	out	0x12, r24	; 18
				PORTD |=(value<<pinnumber);
     e30:	82 b3       	in	r24, 0x12	; 18
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_SetPinValue+0xd4>
     e36:	44 0f       	add	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	6a 95       	dec	r22
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_SetPinValue+0xd0>
     e3e:	48 2b       	or	r20, r24
     e40:	42 bb       	out	0x12, r20	; 18
				break;
			
		}
		Local_Errorstate =ES_OK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
				PORTC |=(value<<pinnumber);
				break;
			case PORT_D:
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
     e44:	08 95       	ret
		}
		Local_Errorstate =ES_OK;
	}
   else
   {
	 Local_Errorstate= ES_NOK;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	08 95       	ret
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	08 95       	ret
				PORTD &=~(1<<pinnumber);//Mask
				PORTD |=(value<<pinnumber);
				break;
			
		}
		Local_Errorstate =ES_OK;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
   else
   {
	 Local_Errorstate= ES_NOK;
   }
  return Local_Errorstate;
}
     e50:	08 95       	ret

00000e52 <__vector_1>:
		break;
	}
}

ISR(INT0_vect)
{
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
	if(INT0_PTR!=NULLPTR)
     e74:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <INT0_PTR>
     e78:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <INT0_PTR+0x1>
     e7c:	30 97       	sbiw	r30, 0x00	; 0
     e7e:	29 f0       	breq	.+10     	; 0xe8a <__vector_1+0x38>
	{
		INT0_PTR(EXI_pvoidGenricprameter[0]);
     e80:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <EXI_pvoidGenricprameter>
     e84:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <EXI_pvoidGenricprameter+0x1>
     e88:	09 95       	icall
	}
	
}
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	bf 91       	pop	r27
     e90:	af 91       	pop	r26
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	7f 91       	pop	r23
     e98:	6f 91       	pop	r22
     e9a:	5f 91       	pop	r21
     e9c:	4f 91       	pop	r20
     e9e:	3f 91       	pop	r19
     ea0:	2f 91       	pop	r18
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <__vector_2>:
ISR(INT1_vect)
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	if(INT1_PTR!=NULLPTR)
     ece:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <INT1_PTR>
     ed2:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <INT1_PTR+0x1>
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	29 f0       	breq	.+10     	; 0xee4 <__vector_2+0x38>
	{
		INT1_PTR(EXI_pvoidGenricprameter[1]);
     eda:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <EXI_pvoidGenricprameter+0x2>
     ede:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <EXI_pvoidGenricprameter+0x3>
     ee2:	09 95       	icall
	}
	
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <__vector_3>:

ISR(INT2_vect)
{
     f06:	1f 92       	push	r1
     f08:	0f 92       	push	r0
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	0f 92       	push	r0
     f0e:	11 24       	eor	r1, r1
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	ef 93       	push	r30
     f26:	ff 93       	push	r31
	if(INT2_PTR!=NULLPTR)
     f28:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <INT2_PTR>
     f2c:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <INT2_PTR+0x1>
     f30:	30 97       	sbiw	r30, 0x00	; 0
     f32:	29 f0       	breq	.+10     	; 0xf3e <__vector_3+0x38>
	{
		INT2_PTR(EXI_pvoidGenricprameter[2]);
     f34:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EXI_pvoidGenricprameter+0x4>
     f38:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <EXI_pvoidGenricprameter+0x5>
     f3c:	09 95       	icall
	}
	
}
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <SPI_enuSlaveInit>:
		}
	}
}
void SPI_enuDisableInterrupt()
{
	SPCR &= ~(1<<SPIE);
     f60:	80 e4       	ldi	r24, 0x40	; 64
     f62:	87 bb       	out	0x17, r24	; 23
     f64:	8d b1       	in	r24, 0x0d	; 13
     f66:	80 64       	ori	r24, 0x40	; 64
     f68:	8d b9       	out	0x0d, r24	; 13
     f6a:	8d b1       	in	r24, 0x0d	; 13
     f6c:	8f 7e       	andi	r24, 0xEF	; 239
     f6e:	8d b9       	out	0x0d, r24	; 13
     f70:	8d b1       	in	r24, 0x0d	; 13
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8d b9       	out	0x0d, r24	; 13
     f76:	8d b1       	in	r24, 0x0d	; 13
     f78:	8d 7f       	andi	r24, 0xFD	; 253
     f7a:	8d b9       	out	0x0d, r24	; 13
     f7c:	8e b1       	in	r24, 0x0e	; 14
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8e b9       	out	0x0e, r24	; 14
     f82:	08 95       	ret

00000f84 <SPI_enuSelectClock_Polarity>:
     f84:	88 23       	and	r24, r24
     f86:	19 f0       	breq	.+6      	; 0xf8e <SPI_enuSelectClock_Polarity+0xa>
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	29 f0       	breq	.+10     	; 0xf96 <SPI_enuSelectClock_Polarity+0x12>
     f8c:	08 95       	ret
     f8e:	8d b1       	in	r24, 0x0d	; 13
     f90:	87 7f       	andi	r24, 0xF7	; 247
     f92:	8d b9       	out	0x0d, r24	; 13
     f94:	08 95       	ret
     f96:	8d b1       	in	r24, 0x0d	; 13
     f98:	88 60       	ori	r24, 0x08	; 8
     f9a:	8d b9       	out	0x0d, r24	; 13
     f9c:	08 95       	ret

00000f9e <SPI_enuSelectClock_Phase>:
     f9e:	88 23       	and	r24, r24
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <SPI_enuSelectClock_Phase+0xa>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	29 f0       	breq	.+10     	; 0xfb0 <SPI_enuSelectClock_Phase+0x12>
     fa6:	08 95       	ret
     fa8:	8d b1       	in	r24, 0x0d	; 13
     faa:	8b 7f       	andi	r24, 0xFB	; 251
     fac:	8d b9       	out	0x0d, r24	; 13
     fae:	08 95       	ret
     fb0:	8d b1       	in	r24, 0x0d	; 13
     fb2:	84 60       	ori	r24, 0x04	; 4
     fb4:	8d b9       	out	0x0d, r24	; 13
     fb6:	08 95       	ret

00000fb8 <SPI_enuSelectData_Order>:
     fb8:	81 11       	cpse	r24, r1
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <SPI_enuSelectData_Order+0xc>
     fbc:	8d b1       	in	r24, 0x0d	; 13
     fbe:	80 62       	ori	r24, 0x20	; 32
     fc0:	8d b9       	out	0x0d, r24	; 13
     fc2:	08 95       	ret
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	19 f4       	brne	.+6      	; 0xfce <SPI_enuSelectData_Order+0x16>
     fc8:	8d b1       	in	r24, 0x0d	; 13
     fca:	8f 7d       	andi	r24, 0xDF	; 223
     fcc:	8d b9       	out	0x0d, r24	; 13
     fce:	08 95       	ret

00000fd0 <SPI_enuReceiveChar>:
     fd0:	77 9b       	sbis	0x0e, 7	; 14
     fd2:	fe cf       	rjmp	.-4      	; 0xfd0 <SPI_enuReceiveChar>
     fd4:	2f b1       	in	r18, 0x0f	; 15
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
     fda:	08 95       	ret

00000fdc <SPI_enuEnableInterrupt>:
     fdc:	8d b1       	in	r24, 0x0d	; 13
     fde:	80 68       	ori	r24, 0x80	; 128
     fe0:	8d b9       	out	0x0d, r24	; 13
     fe2:	08 95       	ret

00000fe4 <SPI_CallBack>:
}
void SPI_CallBack(void(*Localptrfunc)(void*),void *Localptr)
{
	if(Localptrfunc!=NULLPTR)
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	41 f0       	breq	.+16     	; 0xff8 <SPI_CallBack+0x14>
	{
		INT_SPI = Localptrfunc;
     fe8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <INT_SPI+0x1>
     fec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <INT_SPI>
		SPI_pvoid = Localptr;
     ff0:	70 93 7f 00 	sts	0x007F, r23	; 0x80007f <SPI_pvoid+0x1>
     ff4:	60 93 7e 00 	sts	0x007E, r22	; 0x80007e <SPI_pvoid>
     ff8:	08 95       	ret

00000ffa <__vector_12>:
	}
}
ISR(VECT_SPI)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
	INT_SPI(SPI_pvoid);
    101c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <INT_SPI>
    1020:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <INT_SPI+0x1>
    1024:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SPI_pvoid>
    1028:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <SPI_pvoid+0x1>
    102c:	09 95       	icall
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <Timer_enSelectmode>:
ES_t TimerCTC_enEnableInterrupt()
{
	ES_t localErrorstate = ES_OK;
	TIMSK |= (1<<OCIE0);
	return localErrorstate;
}
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	d1 f0       	breq	.+52     	; 0x1088 <Timer_enSelectmode+0x38>
    1054:	28 f0       	brcs	.+10     	; 0x1060 <Timer_enSelectmode+0x10>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	81 f0       	breq	.+32     	; 0x107a <Timer_enSelectmode+0x2a>
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	e1 f0       	breq	.+56     	; 0x1096 <Timer_enSelectmode+0x46>
    105e:	21 c0       	rjmp	.+66     	; 0x10a2 <Timer_enSelectmode+0x52>
    1060:	83 b7       	in	r24, 0x33	; 51
    1062:	87 7f       	andi	r24, 0xF7	; 247
    1064:	83 bf       	out	0x33, r24	; 51
    1066:	83 b7       	in	r24, 0x33	; 51
    1068:	8f 7b       	andi	r24, 0xBF	; 191
    106a:	83 bf       	out	0x33, r24	; 51
    106c:	83 b7       	in	r24, 0x33	; 51
    106e:	8f 7e       	andi	r24, 0xEF	; 239
    1070:	83 bf       	out	0x33, r24	; 51
    1072:	83 b7       	in	r24, 0x33	; 51
    1074:	8f 7d       	andi	r24, 0xDF	; 223
    1076:	83 bf       	out	0x33, r24	; 51
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <Timer_enSelectmode+0x52>
    107a:	83 b7       	in	r24, 0x33	; 51
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	83 bf       	out	0x33, r24	; 51
    1080:	83 b7       	in	r24, 0x33	; 51
    1082:	88 60       	ori	r24, 0x08	; 8
    1084:	83 bf       	out	0x33, r24	; 51
    1086:	0d c0       	rjmp	.+26     	; 0x10a2 <Timer_enSelectmode+0x52>
    1088:	83 b7       	in	r24, 0x33	; 51
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	83 bf       	out	0x33, r24	; 51
    108e:	83 b7       	in	r24, 0x33	; 51
    1090:	8f 7b       	andi	r24, 0xBF	; 191
    1092:	83 bf       	out	0x33, r24	; 51
    1094:	06 c0       	rjmp	.+12     	; 0x10a2 <Timer_enSelectmode+0x52>
    1096:	83 b7       	in	r24, 0x33	; 51
    1098:	80 64       	ori	r24, 0x40	; 64
    109a:	83 bf       	out	0x33, r24	; 51
    109c:	83 b7       	in	r24, 0x33	; 51
    109e:	87 7f       	andi	r24, 0xF7	; 247
    10a0:	83 bf       	out	0x33, r24	; 51
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	08 95       	ret

000010a6 <Timer_enSelectPrescaler>:
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	c9 f1       	breq	.+114    	; 0x111c <Timer_enSelectPrescaler+0x76>
    10aa:	28 f4       	brcc	.+10     	; 0x10b6 <Timer_enSelectPrescaler+0x10>
    10ac:	88 23       	and	r24, r24
    10ae:	51 f0       	breq	.+20     	; 0x10c4 <Timer_enSelectPrescaler+0x1e>
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	f1 f0       	breq	.+60     	; 0x10f0 <Timer_enSelectPrescaler+0x4a>
    10b4:	74 c0       	rjmp	.+232    	; 0x119e <Timer_enSelectPrescaler+0xf8>
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	09 f4       	brne	.+2      	; 0x10bc <Timer_enSelectPrescaler+0x16>
    10ba:	46 c0       	rjmp	.+140    	; 0x1148 <Timer_enSelectPrescaler+0xa2>
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	09 f4       	brne	.+2      	; 0x10c2 <Timer_enSelectPrescaler+0x1c>
    10c0:	59 c0       	rjmp	.+178    	; 0x1174 <Timer_enSelectPrescaler+0xce>
    10c2:	6d c0       	rjmp	.+218    	; 0x119e <Timer_enSelectPrescaler+0xf8>
    10c4:	83 b7       	in	r24, 0x33	; 51
    10c6:	8e 7f       	andi	r24, 0xFE	; 254
    10c8:	83 bf       	out	0x33, r24	; 51
    10ca:	83 b7       	in	r24, 0x33	; 51
    10cc:	82 60       	ori	r24, 0x02	; 2
    10ce:	83 bf       	out	0x33, r24	; 51
    10d0:	83 b7       	in	r24, 0x33	; 51
    10d2:	8b 7f       	andi	r24, 0xFB	; 251
    10d4:	83 bf       	out	0x33, r24	; 51
    10d6:	85 e8       	ldi	r24, 0x85	; 133
    10d8:	91 eb       	ldi	r25, 0xB1	; 177
    10da:	a5 e8       	ldi	r26, 0x85	; 133
    10dc:	b9 e3       	ldi	r27, 0x39	; 57
    10de:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Time_ovf>
    10e2:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Time_ovf+0x1>
    10e6:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Time_ovf+0x2>
    10ea:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Time_ovf+0x3>
    10ee:	57 c0       	rjmp	.+174    	; 0x119e <Timer_enSelectPrescaler+0xf8>
    10f0:	83 b7       	in	r24, 0x33	; 51
    10f2:	81 60       	ori	r24, 0x01	; 1
    10f4:	83 bf       	out	0x33, r24	; 51
    10f6:	83 b7       	in	r24, 0x33	; 51
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	83 bf       	out	0x33, r24	; 51
    10fc:	83 b7       	in	r24, 0x33	; 51
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	83 bf       	out	0x33, r24	; 51
    1102:	85 e8       	ldi	r24, 0x85	; 133
    1104:	91 eb       	ldi	r25, 0xB1	; 177
    1106:	a5 e0       	ldi	r26, 0x05	; 5
    1108:	bb e3       	ldi	r27, 0x3B	; 59
    110a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Time_ovf>
    110e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Time_ovf+0x1>
    1112:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Time_ovf+0x2>
    1116:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Time_ovf+0x3>
    111a:	41 c0       	rjmp	.+130    	; 0x119e <Timer_enSelectPrescaler+0xf8>
    111c:	83 b7       	in	r24, 0x33	; 51
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	83 bf       	out	0x33, r24	; 51
    1122:	83 b7       	in	r24, 0x33	; 51
    1124:	8d 7f       	andi	r24, 0xFD	; 253
    1126:	83 bf       	out	0x33, r24	; 51
    1128:	83 b7       	in	r24, 0x33	; 51
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	83 bf       	out	0x33, r24	; 51
    112e:	85 e8       	ldi	r24, 0x85	; 133
    1130:	91 eb       	ldi	r25, 0xB1	; 177
    1132:	a5 e0       	ldi	r26, 0x05	; 5
    1134:	bc e3       	ldi	r27, 0x3C	; 60
    1136:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Time_ovf>
    113a:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Time_ovf+0x1>
    113e:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Time_ovf+0x2>
    1142:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Time_ovf+0x3>
    1146:	2b c0       	rjmp	.+86     	; 0x119e <Timer_enSelectPrescaler+0xf8>
    1148:	83 b7       	in	r24, 0x33	; 51
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	83 bf       	out	0x33, r24	; 51
    114e:	83 b7       	in	r24, 0x33	; 51
    1150:	8d 7f       	andi	r24, 0xFD	; 253
    1152:	83 bf       	out	0x33, r24	; 51
    1154:	83 b7       	in	r24, 0x33	; 51
    1156:	84 60       	ori	r24, 0x04	; 4
    1158:	83 bf       	out	0x33, r24	; 51
    115a:	85 e8       	ldi	r24, 0x85	; 133
    115c:	91 eb       	ldi	r25, 0xB1	; 177
    115e:	a5 e0       	ldi	r26, 0x05	; 5
    1160:	bd e3       	ldi	r27, 0x3D	; 61
    1162:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Time_ovf>
    1166:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Time_ovf+0x1>
    116a:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Time_ovf+0x2>
    116e:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Time_ovf+0x3>
    1172:	15 c0       	rjmp	.+42     	; 0x119e <Timer_enSelectPrescaler+0xf8>
    1174:	83 b7       	in	r24, 0x33	; 51
    1176:	81 60       	ori	r24, 0x01	; 1
    1178:	83 bf       	out	0x33, r24	; 51
    117a:	83 b7       	in	r24, 0x33	; 51
    117c:	8d 7f       	andi	r24, 0xFD	; 253
    117e:	83 bf       	out	0x33, r24	; 51
    1180:	83 b7       	in	r24, 0x33	; 51
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	83 bf       	out	0x33, r24	; 51
    1186:	85 e8       	ldi	r24, 0x85	; 133
    1188:	91 eb       	ldi	r25, 0xB1	; 177
    118a:	a5 e0       	ldi	r26, 0x05	; 5
    118c:	b8 e3       	ldi	r27, 0x38	; 56
    118e:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <Time_ovf>
    1192:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <Time_ovf+0x1>
    1196:	a0 93 98 00 	sts	0x0098, r26	; 0x800098 <Time_ovf+0x2>
    119a:	b0 93 99 00 	sts	0x0099, r27	; 0x800099 <Time_ovf+0x3>
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	08 95       	ret

000011a2 <TimerFPWM_enuSelectCompare_Output_Mode>:
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	49 f0       	breq	.+18     	; 0x11b8 <TimerFPWM_enuSelectCompare_Output_Mode+0x16>
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	71 f4       	brne	.+28     	; 0x11c6 <TimerFPWM_enuSelectCompare_Output_Mode+0x24>
    11aa:	83 b7       	in	r24, 0x33	; 51
    11ac:	8f 7e       	andi	r24, 0xEF	; 239
    11ae:	83 bf       	out	0x33, r24	; 51
    11b0:	83 b7       	in	r24, 0x33	; 51
    11b2:	80 62       	ori	r24, 0x20	; 32
    11b4:	83 bf       	out	0x33, r24	; 51
    11b6:	0d c0       	rjmp	.+26     	; 0x11d2 <TimerFPWM_enuSelectCompare_Output_Mode+0x30>
    11b8:	83 b7       	in	r24, 0x33	; 51
    11ba:	80 61       	ori	r24, 0x10	; 16
    11bc:	83 bf       	out	0x33, r24	; 51
    11be:	83 b7       	in	r24, 0x33	; 51
    11c0:	80 62       	ori	r24, 0x20	; 32
    11c2:	83 bf       	out	0x33, r24	; 51
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <TimerFPWM_enuSelectCompare_Output_Mode+0x30>
    11c6:	83 b7       	in	r24, 0x33	; 51
    11c8:	8f 7e       	andi	r24, 0xEF	; 239
    11ca:	83 bf       	out	0x33, r24	; 51
    11cc:	83 b7       	in	r24, 0x33	; 51
    11ce:	8f 7d       	andi	r24, 0xDF	; 223
    11d0:	83 bf       	out	0x33, r24	; 51
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	08 95       	ret

000011d6 <TimerFPWM_enuCalc_OCR>:
    11d6:	44 23       	and	r20, r20
    11d8:	19 f0       	breq	.+6      	; 0x11e0 <TimerFPWM_enuCalc_OCR+0xa>
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	59 f0       	breq	.+22     	; 0x11f4 <TimerFPWM_enuCalc_OCR+0x1e>
    11de:	1a c0       	rjmp	.+52     	; 0x1214 <TimerFPWM_enuCalc_OCR+0x3e>
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	53 e4       	ldi	r21, 0x43	; 67
    11e8:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    11ec:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fixunssfsi>
    11f0:	6c bf       	out	0x3c, r22	; 60
    11f2:	10 c0       	rjmp	.+32     	; 0x1214 <TimerFPWM_enuCalc_OCR+0x3e>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4f e7       	ldi	r20, 0x7F	; 127
    11fa:	53 e4       	ldi	r21, 0x43	; 67
    11fc:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	53 e4       	ldi	r21, 0x43	; 67
    1208:	0e 94 df 09 	call	0x13be	; 0x13be <__subsf3>
    120c:	90 58       	subi	r25, 0x80	; 128
    120e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fixunssfsi>
    1212:	6c bf       	out	0x3c, r22	; 60
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	08 95       	ret

00001218 <TimerPhaseCorrect_enuSelectCompare_Output_Mode>:
    1218:	83 30       	cpi	r24, 0x03	; 3
    121a:	19 f0       	breq	.+6      	; 0x1222 <TimerPhaseCorrect_enuSelectCompare_Output_Mode+0xa>
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	41 f0       	breq	.+16     	; 0x1230 <TimerPhaseCorrect_enuSelectCompare_Output_Mode+0x18>
    1220:	0e c0       	rjmp	.+28     	; 0x123e <TimerPhaseCorrect_enuSelectCompare_Output_Mode+0x26>
    1222:	83 b7       	in	r24, 0x33	; 51
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	83 bf       	out	0x33, r24	; 51
    1228:	83 b7       	in	r24, 0x33	; 51
    122a:	80 62       	ori	r24, 0x20	; 32
    122c:	83 bf       	out	0x33, r24	; 51
    122e:	0d c0       	rjmp	.+26     	; 0x124a <TimerPhaseCorrect_enuSelectCompare_Output_Mode+0x32>
    1230:	83 b7       	in	r24, 0x33	; 51
    1232:	8f 7e       	andi	r24, 0xEF	; 239
    1234:	83 bf       	out	0x33, r24	; 51
    1236:	83 b7       	in	r24, 0x33	; 51
    1238:	80 62       	ori	r24, 0x20	; 32
    123a:	83 bf       	out	0x33, r24	; 51
    123c:	06 c0       	rjmp	.+12     	; 0x124a <TimerPhaseCorrect_enuSelectCompare_Output_Mode+0x32>
    123e:	83 b7       	in	r24, 0x33	; 51
    1240:	8f 7e       	andi	r24, 0xEF	; 239
    1242:	83 bf       	out	0x33, r24	; 51
    1244:	83 b7       	in	r24, 0x33	; 51
    1246:	8f 7d       	andi	r24, 0xDF	; 223
    1248:	83 bf       	out	0x33, r24	; 51
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	08 95       	ret

0000124e <TimerPhaseCorrect_enuCalc_OCR>:
    124e:	66 23       	and	r22, r22
    1250:	19 f0       	breq	.+6      	; 0x1258 <TimerPhaseCorrect_enuCalc_OCR+0xa>
    1252:	61 30       	cpi	r22, 0x01	; 1
    1254:	99 f0       	breq	.+38     	; 0x127c <TimerPhaseCorrect_enuCalc_OCR+0x2e>
    1256:	24 c0       	rjmp	.+72     	; 0x12a0 <TimerPhaseCorrect_enuCalc_OCR+0x52>
    1258:	99 e2       	ldi	r25, 0x29	; 41
    125a:	89 9f       	mul	r24, r25
    125c:	81 2d       	mov	r24, r1
    125e:	11 24       	eor	r1, r1
    1260:	82 95       	swap	r24
    1262:	8f 70       	andi	r24, 0x0F	; 15
    1264:	4e ef       	ldi	r20, 0xFE	; 254
    1266:	51 e0       	ldi	r21, 0x01	; 1
    1268:	84 9f       	mul	r24, r20
    126a:	90 01       	movw	r18, r0
    126c:	85 9f       	mul	r24, r21
    126e:	30 0d       	add	r19, r0
    1270:	11 24       	eor	r1, r1
    1272:	c9 01       	movw	r24, r18
    1274:	95 95       	asr	r25
    1276:	87 95       	ror	r24
    1278:	8c bf       	out	0x3c, r24	; 60
    127a:	12 c0       	rjmp	.+36     	; 0x12a0 <TimerPhaseCorrect_enuCalc_OCR+0x52>
    127c:	99 e2       	ldi	r25, 0x29	; 41
    127e:	89 9f       	mul	r24, r25
    1280:	81 2d       	mov	r24, r1
    1282:	11 24       	eor	r1, r1
    1284:	82 95       	swap	r24
    1286:	8f 70       	andi	r24, 0x0F	; 15
    1288:	4e ef       	ldi	r20, 0xFE	; 254
    128a:	51 e0       	ldi	r21, 0x01	; 1
    128c:	84 9f       	mul	r24, r20
    128e:	90 01       	movw	r18, r0
    1290:	85 9f       	mul	r24, r21
    1292:	30 0d       	add	r19, r0
    1294:	11 24       	eor	r1, r1
    1296:	c9 01       	movw	r24, r18
    1298:	95 95       	asr	r25
    129a:	87 95       	ror	r24
    129c:	80 95       	com	r24
    129e:	8c bf       	out	0x3c, r24	; 60
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret

000012a4 <__vector_11>:
ISR(VECT_TIMER0_OVF)
{
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
	if(gptr!=NULLPTR)
    12c6:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <gptr>
    12ca:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <gptr+0x1>
    12ce:	89 2b       	or	r24, r25
    12d0:	c1 f1       	breq	.+112    	; 0x1342 <__vector_11+0x9e>
	{
		static u32_t counts = 0;
		counts++;
    12d2:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <counts.1756>
    12d6:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <counts.1756+0x1>
    12da:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <counts.1756+0x2>
    12de:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <counts.1756+0x3>
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <counts.1756>
    12f2:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <counts.1756+0x1>
    12f6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <counts.1756+0x2>
    12fa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <counts.1756+0x3>
		if(counts==num_ovf)
    12fe:	0e 94 80 0a 	call	0x1500	; 0x1500 <__floatunsisf>
    1302:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <num_ovf>
    1306:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <num_ovf+0x1>
    130a:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <num_ovf+0x2>
    130e:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <num_ovf+0x3>
    1312:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__cmpsf2>
    1316:	81 11       	cpse	r24, r1
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <__vector_11+0x9e>
		{
			TCNT0=preload;
    131a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <preload>
    131e:	82 bf       	out	0x32, r24	; 50
			counts=0;
    1320:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <counts.1756>
    1324:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <counts.1756+0x1>
    1328:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <counts.1756+0x2>
    132c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <counts.1756+0x3>
			gptr(gparameter);
    1330:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <gptr>
    1334:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <gptr+0x1>
    1338:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <gparameter>
    133c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <gparameter+0x1>
    1340:	09 95       	icall
		}
	}
}
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_10>:
ISR(VECT_TIMER0_CTC)
{
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	2f 93       	push	r18
    1370:	3f 93       	push	r19
    1372:	4f 93       	push	r20
    1374:	5f 93       	push	r21
    1376:	6f 93       	push	r22
    1378:	7f 93       	push	r23
    137a:	8f 93       	push	r24
    137c:	9f 93       	push	r25
    137e:	af 93       	push	r26
    1380:	bf 93       	push	r27
    1382:	ef 93       	push	r30
    1384:	ff 93       	push	r31
	if(gptr_ctc!=NULLPTR)
    1386:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <gptr_ctc>
    138a:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <gptr_ctc+0x1>
    138e:	30 97       	sbiw	r30, 0x00	; 0
    1390:	29 f0       	breq	.+10     	; 0x139c <__vector_10+0x38>
	{
		gptr_ctc(gparameter_ctc);
    1392:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <gparameter_ctc>
    1396:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <gparameter_ctc+0x1>
    139a:	09 95       	icall
	}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <__subsf3>:
    13be:	50 58       	subi	r21, 0x80	; 128

000013c0 <__addsf3>:
    13c0:	bb 27       	eor	r27, r27
    13c2:	aa 27       	eor	r26, r26
    13c4:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__addsf3x>
    13c8:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    13cc:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    13d0:	38 f0       	brcs	.+14     	; 0x13e0 <__addsf3+0x20>
    13d2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    13d6:	20 f0       	brcs	.+8      	; 0x13e0 <__addsf3+0x20>
    13d8:	39 f4       	brne	.+14     	; 0x13e8 <__addsf3+0x28>
    13da:	9f 3f       	cpi	r25, 0xFF	; 255
    13dc:	19 f4       	brne	.+6      	; 0x13e4 <__addsf3+0x24>
    13de:	26 f4       	brtc	.+8      	; 0x13e8 <__addsf3+0x28>
    13e0:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    13e4:	0e f4       	brtc	.+2      	; 0x13e8 <__addsf3+0x28>
    13e6:	e0 95       	com	r30
    13e8:	e7 fb       	bst	r30, 7
    13ea:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>

000013ee <__addsf3x>:
    13ee:	e9 2f       	mov	r30, r25
    13f0:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    13f4:	58 f3       	brcs	.-42     	; 0x13cc <__addsf3+0xc>
    13f6:	ba 17       	cp	r27, r26
    13f8:	62 07       	cpc	r22, r18
    13fa:	73 07       	cpc	r23, r19
    13fc:	84 07       	cpc	r24, r20
    13fe:	95 07       	cpc	r25, r21
    1400:	20 f0       	brcs	.+8      	; 0x140a <__addsf3x+0x1c>
    1402:	79 f4       	brne	.+30     	; 0x1422 <__addsf3x+0x34>
    1404:	a6 f5       	brtc	.+104    	; 0x146e <__addsf3x+0x80>
    1406:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    140a:	0e f4       	brtc	.+2      	; 0x140e <__addsf3x+0x20>
    140c:	e0 95       	com	r30
    140e:	0b 2e       	mov	r0, r27
    1410:	ba 2f       	mov	r27, r26
    1412:	a0 2d       	mov	r26, r0
    1414:	0b 01       	movw	r0, r22
    1416:	b9 01       	movw	r22, r18
    1418:	90 01       	movw	r18, r0
    141a:	0c 01       	movw	r0, r24
    141c:	ca 01       	movw	r24, r20
    141e:	a0 01       	movw	r20, r0
    1420:	11 24       	eor	r1, r1
    1422:	ff 27       	eor	r31, r31
    1424:	59 1b       	sub	r21, r25
    1426:	99 f0       	breq	.+38     	; 0x144e <__addsf3x+0x60>
    1428:	59 3f       	cpi	r21, 0xF9	; 249
    142a:	50 f4       	brcc	.+20     	; 0x1440 <__addsf3x+0x52>
    142c:	50 3e       	cpi	r21, 0xE0	; 224
    142e:	68 f1       	brcs	.+90     	; 0x148a <__addsf3x+0x9c>
    1430:	1a 16       	cp	r1, r26
    1432:	f0 40       	sbci	r31, 0x00	; 0
    1434:	a2 2f       	mov	r26, r18
    1436:	23 2f       	mov	r18, r19
    1438:	34 2f       	mov	r19, r20
    143a:	44 27       	eor	r20, r20
    143c:	58 5f       	subi	r21, 0xF8	; 248
    143e:	f3 cf       	rjmp	.-26     	; 0x1426 <__addsf3x+0x38>
    1440:	46 95       	lsr	r20
    1442:	37 95       	ror	r19
    1444:	27 95       	ror	r18
    1446:	a7 95       	ror	r26
    1448:	f0 40       	sbci	r31, 0x00	; 0
    144a:	53 95       	inc	r21
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__addsf3x+0x52>
    144e:	7e f4       	brtc	.+30     	; 0x146e <__addsf3x+0x80>
    1450:	1f 16       	cp	r1, r31
    1452:	ba 0b       	sbc	r27, r26
    1454:	62 0b       	sbc	r22, r18
    1456:	73 0b       	sbc	r23, r19
    1458:	84 0b       	sbc	r24, r20
    145a:	ba f0       	brmi	.+46     	; 0x148a <__addsf3x+0x9c>
    145c:	91 50       	subi	r25, 0x01	; 1
    145e:	a1 f0       	breq	.+40     	; 0x1488 <__addsf3x+0x9a>
    1460:	ff 0f       	add	r31, r31
    1462:	bb 1f       	adc	r27, r27
    1464:	66 1f       	adc	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	88 1f       	adc	r24, r24
    146a:	c2 f7       	brpl	.-16     	; 0x145c <__addsf3x+0x6e>
    146c:	0e c0       	rjmp	.+28     	; 0x148a <__addsf3x+0x9c>
    146e:	ba 0f       	add	r27, r26
    1470:	62 1f       	adc	r22, r18
    1472:	73 1f       	adc	r23, r19
    1474:	84 1f       	adc	r24, r20
    1476:	48 f4       	brcc	.+18     	; 0x148a <__addsf3x+0x9c>
    1478:	87 95       	ror	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b7 95       	ror	r27
    1480:	f7 95       	ror	r31
    1482:	9e 3f       	cpi	r25, 0xFE	; 254
    1484:	08 f0       	brcs	.+2      	; 0x1488 <__addsf3x+0x9a>
    1486:	b0 cf       	rjmp	.-160    	; 0x13e8 <__addsf3+0x28>
    1488:	93 95       	inc	r25
    148a:	88 0f       	add	r24, r24
    148c:	08 f0       	brcs	.+2      	; 0x1490 <__addsf3x+0xa2>
    148e:	99 27       	eor	r25, r25
    1490:	ee 0f       	add	r30, r30
    1492:	97 95       	ror	r25
    1494:	87 95       	ror	r24
    1496:	08 95       	ret

00001498 <__cmpsf2>:
    1498:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_cmp>
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <__cmpsf2+0x8>
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	08 95       	ret

000014a2 <__fixunssfsi>:
    14a2:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    14a6:	88 f0       	brcs	.+34     	; 0x14ca <__fixunssfsi+0x28>
    14a8:	9f 57       	subi	r25, 0x7F	; 127
    14aa:	98 f0       	brcs	.+38     	; 0x14d2 <__fixunssfsi+0x30>
    14ac:	b9 2f       	mov	r27, r25
    14ae:	99 27       	eor	r25, r25
    14b0:	b7 51       	subi	r27, 0x17	; 23
    14b2:	b0 f0       	brcs	.+44     	; 0x14e0 <__fixunssfsi+0x3e>
    14b4:	e1 f0       	breq	.+56     	; 0x14ee <__fixunssfsi+0x4c>
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	1a f0       	brmi	.+6      	; 0x14c6 <__fixunssfsi+0x24>
    14c0:	ba 95       	dec	r27
    14c2:	c9 f7       	brne	.-14     	; 0x14b6 <__fixunssfsi+0x14>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <__fixunssfsi+0x4c>
    14c6:	b1 30       	cpi	r27, 0x01	; 1
    14c8:	91 f0       	breq	.+36     	; 0x14ee <__fixunssfsi+0x4c>
    14ca:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_zero>
    14ce:	b1 e0       	ldi	r27, 0x01	; 1
    14d0:	08 95       	ret
    14d2:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    14d6:	67 2f       	mov	r22, r23
    14d8:	78 2f       	mov	r23, r24
    14da:	88 27       	eor	r24, r24
    14dc:	b8 5f       	subi	r27, 0xF8	; 248
    14de:	39 f0       	breq	.+14     	; 0x14ee <__fixunssfsi+0x4c>
    14e0:	b9 3f       	cpi	r27, 0xF9	; 249
    14e2:	cc f3       	brlt	.-14     	; 0x14d6 <__fixunssfsi+0x34>
    14e4:	86 95       	lsr	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b3 95       	inc	r27
    14ec:	d9 f7       	brne	.-10     	; 0x14e4 <__fixunssfsi+0x42>
    14ee:	3e f4       	brtc	.+14     	; 0x14fe <__fixunssfsi+0x5c>
    14f0:	90 95       	com	r25
    14f2:	80 95       	com	r24
    14f4:	70 95       	com	r23
    14f6:	61 95       	neg	r22
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	8f 4f       	sbci	r24, 0xFF	; 255
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	08 95       	ret

00001500 <__floatunsisf>:
    1500:	e8 94       	clt
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <__floatsisf+0x12>

00001504 <__floatsisf>:
    1504:	97 fb       	bst	r25, 7
    1506:	3e f4       	brtc	.+14     	; 0x1516 <__floatsisf+0x12>
    1508:	90 95       	com	r25
    150a:	80 95       	com	r24
    150c:	70 95       	com	r23
    150e:	61 95       	neg	r22
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	8f 4f       	sbci	r24, 0xFF	; 255
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	99 23       	and	r25, r25
    1518:	a9 f0       	breq	.+42     	; 0x1544 <__floatsisf+0x40>
    151a:	f9 2f       	mov	r31, r25
    151c:	96 e9       	ldi	r25, 0x96	; 150
    151e:	bb 27       	eor	r27, r27
    1520:	93 95       	inc	r25
    1522:	f6 95       	lsr	r31
    1524:	87 95       	ror	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f1 11       	cpse	r31, r1
    152e:	f8 cf       	rjmp	.-16     	; 0x1520 <__floatsisf+0x1c>
    1530:	fa f4       	brpl	.+62     	; 0x1570 <__floatsisf+0x6c>
    1532:	bb 0f       	add	r27, r27
    1534:	11 f4       	brne	.+4      	; 0x153a <__floatsisf+0x36>
    1536:	60 ff       	sbrs	r22, 0
    1538:	1b c0       	rjmp	.+54     	; 0x1570 <__floatsisf+0x6c>
    153a:	6f 5f       	subi	r22, 0xFF	; 255
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	16 c0       	rjmp	.+44     	; 0x1570 <__floatsisf+0x6c>
    1544:	88 23       	and	r24, r24
    1546:	11 f0       	breq	.+4      	; 0x154c <__floatsisf+0x48>
    1548:	96 e9       	ldi	r25, 0x96	; 150
    154a:	11 c0       	rjmp	.+34     	; 0x156e <__floatsisf+0x6a>
    154c:	77 23       	and	r23, r23
    154e:	21 f0       	breq	.+8      	; 0x1558 <__floatsisf+0x54>
    1550:	9e e8       	ldi	r25, 0x8E	; 142
    1552:	87 2f       	mov	r24, r23
    1554:	76 2f       	mov	r23, r22
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__floatsisf+0x5e>
    1558:	66 23       	and	r22, r22
    155a:	71 f0       	breq	.+28     	; 0x1578 <__floatsisf+0x74>
    155c:	96 e8       	ldi	r25, 0x86	; 134
    155e:	86 2f       	mov	r24, r22
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	2a f0       	brmi	.+10     	; 0x1570 <__floatsisf+0x6c>
    1566:	9a 95       	dec	r25
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	da f7       	brpl	.-10     	; 0x1566 <__floatsisf+0x62>
    1570:	88 0f       	add	r24, r24
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	97 f9       	bld	r25, 7
    1578:	08 95       	ret

0000157a <__fp_cmp>:
    157a:	99 0f       	add	r25, r25
    157c:	00 08       	sbc	r0, r0
    157e:	55 0f       	add	r21, r21
    1580:	aa 0b       	sbc	r26, r26
    1582:	e0 e8       	ldi	r30, 0x80	; 128
    1584:	fe ef       	ldi	r31, 0xFE	; 254
    1586:	16 16       	cp	r1, r22
    1588:	17 06       	cpc	r1, r23
    158a:	e8 07       	cpc	r30, r24
    158c:	f9 07       	cpc	r31, r25
    158e:	c0 f0       	brcs	.+48     	; 0x15c0 <__fp_cmp+0x46>
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	e4 07       	cpc	r30, r20
    1596:	f5 07       	cpc	r31, r21
    1598:	98 f0       	brcs	.+38     	; 0x15c0 <__fp_cmp+0x46>
    159a:	62 1b       	sub	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	95 0b       	sbc	r25, r21
    15a2:	39 f4       	brne	.+14     	; 0x15b2 <__fp_cmp+0x38>
    15a4:	0a 26       	eor	r0, r26
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <__fp_cmp+0x46>
    15a8:	23 2b       	or	r18, r19
    15aa:	24 2b       	or	r18, r20
    15ac:	25 2b       	or	r18, r21
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <__fp_cmp+0x3e>
    15b0:	08 95       	ret
    15b2:	0a 26       	eor	r0, r26
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__fp_cmp+0x3e>
    15b6:	a1 40       	sbci	r26, 0x01	; 1
    15b8:	a6 95       	lsr	r26
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	81 1d       	adc	r24, r1
    15be:	81 1d       	adc	r24, r1
    15c0:	08 95       	ret

000015c2 <__fp_inf>:
    15c2:	97 f9       	bld	r25, 7
    15c4:	9f 67       	ori	r25, 0x7F	; 127
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	08 95       	ret

000015ce <__fp_nan>:
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	80 ec       	ldi	r24, 0xC0	; 192
    15d2:	08 95       	ret

000015d4 <__fp_pscA>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	09 06       	cpc	r0, r25
    15e0:	08 95       	ret

000015e2 <__fp_pscB>:
    15e2:	00 24       	eor	r0, r0
    15e4:	0a 94       	dec	r0
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	14 06       	cpc	r1, r20
    15ec:	05 06       	cpc	r0, r21
    15ee:	08 95       	ret

000015f0 <__fp_round>:
    15f0:	09 2e       	mov	r0, r25
    15f2:	03 94       	inc	r0
    15f4:	00 0c       	add	r0, r0
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__fp_round+0xc>
    15f8:	88 23       	and	r24, r24
    15fa:	52 f0       	brmi	.+20     	; 0x1610 <__fp_round+0x20>
    15fc:	bb 0f       	add	r27, r27
    15fe:	40 f4       	brcc	.+16     	; 0x1610 <__fp_round+0x20>
    1600:	bf 2b       	or	r27, r31
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0x18>
    1604:	60 ff       	sbrs	r22, 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <__fp_round+0x20>
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__fp_split3>:
    1612:	57 fd       	sbrc	r21, 7
    1614:	90 58       	subi	r25, 0x80	; 128
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	59 f0       	breq	.+22     	; 0x1632 <__fp_splitA+0x10>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	71 f0       	breq	.+28     	; 0x163c <__fp_splitA+0x1a>
    1620:	47 95       	ror	r20

00001622 <__fp_splitA>:
    1622:	88 0f       	add	r24, r24
    1624:	97 fb       	bst	r25, 7
    1626:	99 1f       	adc	r25, r25
    1628:	61 f0       	breq	.+24     	; 0x1642 <__fp_splitA+0x20>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	79 f0       	breq	.+30     	; 0x164c <__fp_splitA+0x2a>
    162e:	87 95       	ror	r24
    1630:	08 95       	ret
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	14 06       	cpc	r1, r20
    1638:	55 1f       	adc	r21, r21
    163a:	f2 cf       	rjmp	.-28     	; 0x1620 <__fp_split3+0xe>
    163c:	46 95       	lsr	r20
    163e:	f1 df       	rcall	.-30     	; 0x1622 <__fp_splitA>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <__fp_splitA+0x30>
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	99 1f       	adc	r25, r25
    164a:	f1 cf       	rjmp	.-30     	; 0x162e <__fp_splitA+0xc>
    164c:	86 95       	lsr	r24
    164e:	71 05       	cpc	r23, r1
    1650:	61 05       	cpc	r22, r1
    1652:	08 94       	sec
    1654:	08 95       	ret

00001656 <__fp_zero>:
    1656:	e8 94       	clt

00001658 <__fp_szero>:
    1658:	bb 27       	eor	r27, r27
    165a:	66 27       	eor	r22, r22
    165c:	77 27       	eor	r23, r23
    165e:	cb 01       	movw	r24, r22
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__mulsf3>:
    1664:	0e 94 45 0b 	call	0x168a	; 0x168a <__mulsf3x>
    1668:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    166c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    1670:	38 f0       	brcs	.+14     	; 0x1680 <__mulsf3+0x1c>
    1672:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    1676:	20 f0       	brcs	.+8      	; 0x1680 <__mulsf3+0x1c>
    1678:	95 23       	and	r25, r21
    167a:	11 f0       	breq	.+4      	; 0x1680 <__mulsf3+0x1c>
    167c:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    1680:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    1684:	11 24       	eor	r1, r1
    1686:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>

0000168a <__mulsf3x>:
    168a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    168e:	70 f3       	brcs	.-36     	; 0x166c <__mulsf3+0x8>

00001690 <__mulsf3_pse>:
    1690:	95 9f       	mul	r25, r21
    1692:	c1 f3       	breq	.-16     	; 0x1684 <__mulsf3+0x20>
    1694:	95 0f       	add	r25, r21
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	55 1f       	adc	r21, r21
    169a:	62 9f       	mul	r22, r18
    169c:	f0 01       	movw	r30, r0
    169e:	72 9f       	mul	r23, r18
    16a0:	bb 27       	eor	r27, r27
    16a2:	f0 0d       	add	r31, r0
    16a4:	b1 1d       	adc	r27, r1
    16a6:	63 9f       	mul	r22, r19
    16a8:	aa 27       	eor	r26, r26
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	aa 1f       	adc	r26, r26
    16b0:	64 9f       	mul	r22, r20
    16b2:	66 27       	eor	r22, r22
    16b4:	b0 0d       	add	r27, r0
    16b6:	a1 1d       	adc	r26, r1
    16b8:	66 1f       	adc	r22, r22
    16ba:	82 9f       	mul	r24, r18
    16bc:	22 27       	eor	r18, r18
    16be:	b0 0d       	add	r27, r0
    16c0:	a1 1d       	adc	r26, r1
    16c2:	62 1f       	adc	r22, r18
    16c4:	73 9f       	mul	r23, r19
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	83 9f       	mul	r24, r19
    16ce:	a0 0d       	add	r26, r0
    16d0:	61 1d       	adc	r22, r1
    16d2:	22 1f       	adc	r18, r18
    16d4:	74 9f       	mul	r23, r20
    16d6:	33 27       	eor	r19, r19
    16d8:	a0 0d       	add	r26, r0
    16da:	61 1d       	adc	r22, r1
    16dc:	23 1f       	adc	r18, r19
    16de:	84 9f       	mul	r24, r20
    16e0:	60 0d       	add	r22, r0
    16e2:	21 1d       	adc	r18, r1
    16e4:	82 2f       	mov	r24, r18
    16e6:	76 2f       	mov	r23, r22
    16e8:	6a 2f       	mov	r22, r26
    16ea:	11 24       	eor	r1, r1
    16ec:	9f 57       	subi	r25, 0x7F	; 127
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	9a f0       	brmi	.+38     	; 0x1718 <__mulsf3_pse+0x88>
    16f2:	f1 f0       	breq	.+60     	; 0x1730 <__mulsf3_pse+0xa0>
    16f4:	88 23       	and	r24, r24
    16f6:	4a f0       	brmi	.+18     	; 0x170a <__mulsf3_pse+0x7a>
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	bb 1f       	adc	r27, r27
    16fe:	66 1f       	adc	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	50 40       	sbci	r21, 0x00	; 0
    1708:	a9 f7       	brne	.-22     	; 0x16f4 <__mulsf3_pse+0x64>
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	51 05       	cpc	r21, r1
    170e:	80 f0       	brcs	.+32     	; 0x1730 <__mulsf3_pse+0xa0>
    1710:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    1714:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    1718:	5f 3f       	cpi	r21, 0xFF	; 255
    171a:	e4 f3       	brlt	.-8      	; 0x1714 <__mulsf3_pse+0x84>
    171c:	98 3e       	cpi	r25, 0xE8	; 232
    171e:	d4 f3       	brlt	.-12     	; 0x1714 <__mulsf3_pse+0x84>
    1720:	86 95       	lsr	r24
    1722:	77 95       	ror	r23
    1724:	67 95       	ror	r22
    1726:	b7 95       	ror	r27
    1728:	f7 95       	ror	r31
    172a:	e7 95       	ror	r30
    172c:	9f 5f       	subi	r25, 0xFF	; 255
    172e:	c1 f7       	brne	.-16     	; 0x1720 <__mulsf3_pse+0x90>
    1730:	fe 2b       	or	r31, r30
    1732:	88 0f       	add	r24, r24
    1734:	91 1d       	adc	r25, r1
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	97 f9       	bld	r25, 7
    173c:	08 95       	ret

0000173e <__udivmodsi4>:
    173e:	a1 e2       	ldi	r26, 0x21	; 33
    1740:	1a 2e       	mov	r1, r26
    1742:	aa 1b       	sub	r26, r26
    1744:	bb 1b       	sub	r27, r27
    1746:	fd 01       	movw	r30, r26
    1748:	0d c0       	rjmp	.+26     	; 0x1764 <__udivmodsi4_ep>

0000174a <__udivmodsi4_loop>:
    174a:	aa 1f       	adc	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	ee 1f       	adc	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	a2 17       	cp	r26, r18
    1754:	b3 07       	cpc	r27, r19
    1756:	e4 07       	cpc	r30, r20
    1758:	f5 07       	cpc	r31, r21
    175a:	20 f0       	brcs	.+8      	; 0x1764 <__udivmodsi4_ep>
    175c:	a2 1b       	sub	r26, r18
    175e:	b3 0b       	sbc	r27, r19
    1760:	e4 0b       	sbc	r30, r20
    1762:	f5 0b       	sbc	r31, r21

00001764 <__udivmodsi4_ep>:
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	1a 94       	dec	r1
    176e:	69 f7       	brne	.-38     	; 0x174a <__udivmodsi4_loop>
    1770:	60 95       	com	r22
    1772:	70 95       	com	r23
    1774:	80 95       	com	r24
    1776:	90 95       	com	r25
    1778:	9b 01       	movw	r18, r22
    177a:	ac 01       	movw	r20, r24
    177c:	bd 01       	movw	r22, r26
    177e:	cf 01       	movw	r24, r30
    1780:	08 95       	ret

00001782 <__divmodsi4>:
    1782:	05 2e       	mov	r0, r21
    1784:	97 fb       	bst	r25, 7
    1786:	1e f4       	brtc	.+6      	; 0x178e <__divmodsi4+0xc>
    1788:	00 94       	com	r0
    178a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__negsi2>
    178e:	57 fd       	sbrc	r21, 7
    1790:	07 d0       	rcall	.+14     	; 0x17a0 <__divmodsi4_neg2>
    1792:	0e 94 9f 0b 	call	0x173e	; 0x173e <__udivmodsi4>
    1796:	07 fc       	sbrc	r0, 7
    1798:	03 d0       	rcall	.+6      	; 0x17a0 <__divmodsi4_neg2>
    179a:	4e f4       	brtc	.+18     	; 0x17ae <__divmodsi4_exit>
    179c:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__negsi2>

000017a0 <__divmodsi4_neg2>:
    17a0:	50 95       	com	r21
    17a2:	40 95       	com	r20
    17a4:	30 95       	com	r19
    17a6:	21 95       	neg	r18
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	4f 4f       	sbci	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255

000017ae <__divmodsi4_exit>:
    17ae:	08 95       	ret

000017b0 <__negsi2>:
    17b0:	90 95       	com	r25
    17b2:	80 95       	com	r24
    17b4:	70 95       	com	r23
    17b6:	61 95       	neg	r22
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	8f 4f       	sbci	r24, 0xFF	; 255
    17bc:	9f 4f       	sbci	r25, 0xFF	; 255
    17be:	08 95       	ret

000017c0 <__tablejump2__>:
    17c0:	ee 0f       	add	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	05 90       	lpm	r0, Z+
    17c6:	f4 91       	lpm	r31, Z
    17c8:	e0 2d       	mov	r30, r0
    17ca:	09 94       	ijmp

000017cc <__umulhisi3>:
    17cc:	a2 9f       	mul	r26, r18
    17ce:	b0 01       	movw	r22, r0
    17d0:	b3 9f       	mul	r27, r19
    17d2:	c0 01       	movw	r24, r0
    17d4:	a3 9f       	mul	r26, r19
    17d6:	70 0d       	add	r23, r0
    17d8:	81 1d       	adc	r24, r1
    17da:	11 24       	eor	r1, r1
    17dc:	91 1d       	adc	r25, r1
    17de:	b2 9f       	mul	r27, r18
    17e0:	70 0d       	add	r23, r0
    17e2:	81 1d       	adc	r24, r1
    17e4:	11 24       	eor	r1, r1
    17e6:	91 1d       	adc	r25, r1
    17e8:	08 95       	ret

000017ea <_exit>:
    17ea:	f8 94       	cli

000017ec <__stop_program>:
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <__stop_program>
